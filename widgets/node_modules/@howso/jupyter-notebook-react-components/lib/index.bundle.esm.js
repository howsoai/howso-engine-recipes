var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/void-elements/index.js
var require_void_elements = __commonJS({
  "node_modules/void-elements/index.js"(exports, module) {
    module.exports = {
      "area": true,
      "base": true,
      "br": true,
      "col": true,
      "embed": true,
      "hr": true,
      "img": true,
      "input": true,
      "link": true,
      "meta": true,
      "param": true,
      "source": true,
      "track": true,
      "wbr": true
    };
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i2 = 0; i2 < arguments.length; i2++) {
          var arg = arguments[i2];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/debounce/index.js
var require_debounce = __commonJS({
  "node_modules/debounce/index.js"(exports, module) {
    function debounce3(function_, wait = 100, options2 = {}) {
      if (typeof function_ !== "function") {
        throw new TypeError(`Expected the first parameter to be a function, got \`${typeof function_}\`.`);
      }
      if (wait < 0) {
        throw new RangeError("`wait` must not be negative.");
      }
      const { immediate } = typeof options2 === "boolean" ? { immediate: options2 } : options2;
      let storedContext;
      let storedArguments;
      let timeoutId2;
      let timestamp;
      let result;
      function run() {
        const callContext = storedContext;
        const callArguments = storedArguments;
        storedContext = void 0;
        storedArguments = void 0;
        result = function_.apply(callContext, callArguments);
        return result;
      }
      function later() {
        const last = Date.now() - timestamp;
        if (last < wait && last >= 0) {
          timeoutId2 = setTimeout(later, wait - last);
        } else {
          timeoutId2 = void 0;
          if (!immediate) {
            result = run();
          }
        }
      }
      const debounced = function(...arguments_) {
        if (storedContext && this !== storedContext) {
          throw new Error("Debounced method called with different contexts.");
        }
        storedContext = this;
        storedArguments = arguments_;
        timestamp = Date.now();
        const callNow = immediate && !timeoutId2;
        if (!timeoutId2) {
          timeoutId2 = setTimeout(later, wait);
        }
        if (callNow) {
          result = run();
        }
        return result;
      };
      debounced.clear = () => {
        if (!timeoutId2) {
          return;
        }
        clearTimeout(timeoutId2);
        timeoutId2 = void 0;
      };
      debounced.flush = () => {
        if (!timeoutId2) {
          return;
        }
        debounced.trigger();
      };
      debounced.trigger = () => {
        result = run();
        debounced.clear();
      };
      return debounced;
    }
    module.exports.debounce = debounce3;
    module.exports = debounce3;
  }
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e3) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index3 = -1, length = array == null ? 0 : array.length;
        while (++index3 < length) {
          var value = array[index3];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index3 = -1, length = array == null ? 0 : array.length;
        while (++index3 < length) {
          if (iteratee(array[index3], index3, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index3 = -1, length = array == null ? 0 : array.length;
        while (++index3 < length) {
          if (!predicate(array[index3], index3, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index3 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index3 < length) {
          var value = array[index3];
          if (predicate(value, index3, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index3 = -1, length = array == null ? 0 : array.length;
        while (++index3 < length) {
          if (comparator(value, array[index3])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index3 = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index3 < length) {
          result[index3] = iteratee(array[index3], index3, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index3 = -1, length = values.length, offset4 = array.length;
        while (++index3 < length) {
          array[offset4 + index3] = values[index3];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index3 = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index3];
        }
        while (++index3 < length) {
          accumulator = iteratee(accumulator, array[index3], index3, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index3 = -1, length = array == null ? 0 : array.length;
        while (++index3 < length) {
          if (predicate(array[index3], index3, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index3 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index3-- : ++index3 < length) {
          if (predicate(array[index3], index3, array)) {
            return index3;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index3 = fromIndex - 1, length = array.length;
        while (++index3 < length) {
          if (comparator(array[index3], value)) {
            return index3;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index3, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index3, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index3 = -1, length = array.length;
        while (++index3 < length) {
          var current = iteratee(array[index3]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n2, iteratee) {
        var index3 = -1, result = Array(n2);
        while (++index3 < n2) {
          result[index3] = iteratee(index3);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index3 = -1, length = strSymbols.length;
        while (++index3 < length && baseIndexOf(chrSymbols, strSymbols[index3], 0) > -1) {
        }
        return index3;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index3 = strSymbols.length;
        while (index3-- && baseIndexOf(chrSymbols, strSymbols[index3], 0) > -1) {
        }
        return index3;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index3 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index3] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index3 = -1, length = array.length, resIndex = 0, result = [];
        while (++index3 < length) {
          var value = array[index3];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index3] = PLACEHOLDER;
            result[resIndex++] = index3;
          }
        }
        return result;
      }
      function setToArray(set2) {
        var index3 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index3] = value;
        });
        return result;
      }
      function setToPairs(set2) {
        var index3 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index3] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index3 = fromIndex - 1, length = array.length;
        while (++index3 < length) {
          if (array[index3] === value) {
            return index3;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index3 = fromIndex + 1;
        while (index3--) {
          if (array[index3] === value) {
            return index3;
          }
        }
        return index3;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index3 = string.length;
        while (index3-- && reWhitespace.test(string.charAt(index3))) {
        }
        return index3;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e3) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject3(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir2 = this.__dir__, isArr = isArray(array), isRight = dir2 < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index3 = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index3 += dir2;
              var iterIndex = -1, value = array[index3];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index3 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index3 < length) {
            var entry = entries[index3];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index3 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index3 < length) {
            var entry = entries[index3];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index3 = assocIndexOf(data, key);
          if (index3 < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index3 == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index3, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index3 = assocIndexOf(data, key);
          return index3 < 0 ? undefined2 : data[index3][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index3 = assocIndexOf(data, key);
          if (index3 < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index3][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index3 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index3 < length) {
            var entry = entries[index3];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size5 = data.size;
          data.set(key, value);
          this.size += data.size == size5 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index3 = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index3 < length) {
            this.add(values2[index3]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n2) {
          return shuffleSelf(copyArray(array), baseClamp(n2, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index3 = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index3 < length) {
            result2[index3] = skip ? undefined2 : get3(object, paths[index3]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject3(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index3 = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index3 < length) {
              var value = array[index3], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index3, collection2) {
            result2 = !!predicate(value, index3, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index3 = -1, length = array.length;
          while (++index3 < length) {
            var value = array[index3], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index3, collection2) {
            if (predicate(value, index3, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index3 = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index3 < length) {
            var value = array[index3];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction2(object[key]);
          });
        }
        function baseGet2(object, path2) {
          path2 = castPath(path2, object);
          var index3 = 0, length = path2.length;
          while (object != null && index3 < length) {
            object = object[toKey(path2[index3++])];
          }
          return index3 && index3 == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index3 = -1, seen = caches[0];
          outer:
            while (++index3 < length && result2.length < maxLength) {
              var value = array[index3], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path2, args) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          var func = object == null ? object : object[toKey(last(path2))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index3 = matchData.length, length = index3, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index3--) {
            var data = matchData[index3];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index3 < length) {
            data = matchData[index3];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject3(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength2(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject3(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index3 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index3] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path2, srcValue) {
          if (isKey2(path2) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path2), srcValue);
          }
          return function(object) {
            var objValue = get3(object, path2);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject3(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject3(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n2) {
          var length = array.length;
          if (!length) {
            return;
          }
          n2 += n2 < 0 ? length : 0;
          return isIndex(n2, length) ? array[n2] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet2(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index3 = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index3, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path2) {
            return hasIn(object, path2);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index3 = -1, length = paths.length, result2 = {};
          while (++index3 < length) {
            var path2 = paths[index3], value = baseGet2(object, path2);
            if (predicate(value, path2)) {
              baseSet(result2, castPath(path2, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path2) {
          return function(object) {
            return baseGet2(object, path2);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index3 = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index3 < length) {
            var fromIndex = 0, value = values2[index3], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index3 = indexes[length];
            if (length == lastIndex || index3 !== previous) {
              var previous = index3;
              if (isIndex(index3)) {
                splice.call(array, index3, 1);
              } else {
                baseUnset(array, index3);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index3 = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index3] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n2) {
          var result2 = "";
          if (!string || n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n2 % 2) {
              result2 += string;
            }
            n2 = nativeFloor(n2 / 2);
            if (n2) {
              string += string;
            }
          } while (n2);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n2) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n2, 0, array.length));
        }
        function baseSet(object, path2, value, customizer) {
          if (!isObject3(object)) {
            return object;
          }
          path2 = castPath(path2, object);
          var index3 = -1, length = path2.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index3 < length) {
            var key = toKey(path2[index3]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index3 != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject3(objValue) ? objValue : isIndex(path2[index3 + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index3 = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index3 < length) {
            result2[index3] = array[index3 + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index3, collection2) {
            result2 = predicate(value, index3, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index3 = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index3 < length) {
            var value = array[index3], computed = iteratee2 ? iteratee2(value) : value;
            if (!index3 || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index3 = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set3 = iteratee2 ? null : createSet(array);
            if (set3) {
              return setToArray(set3);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index3 < length) {
              var value = array[index3], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path2) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          return object == null || delete object[toKey(last(path2))];
        }
        function baseUpdate(object, path2, updater, customizer) {
          return baseSet(object, path2, updater(baseGet2(object, path2)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index3 = fromRight ? length : -1;
          while ((fromRight ? index3-- : ++index3 < length) && predicate(array[index3], index3, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index3, fromRight ? index3 + 1 : length) : baseSlice(array, fromRight ? index3 + 1 : 0, fromRight ? length : index3);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index3 = -1, result2 = Array2(length);
          while (++index3 < length) {
            var array = arrays[index3], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index3) {
                result2[index3] = baseDifference(result2[index3] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index3 = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index3 < length) {
            var value = index3 < valsLength ? values2[index3] : undefined2;
            assignFunc(result2, props[index3], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey2(value, object) ? [value] : stringToPath2(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index3 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index3 < length) {
            var result2 = compareAscending(objCriteria[index3], othCriteria[index3]);
            if (result2) {
              if (index3 >= ordersLength) {
                return result2;
              }
              var order = orders[index3];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset4 = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset4 + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset4 + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index3 = -1, length = source.length;
          array || (array = Array2(length));
          while (++index3 < length) {
            array[index3] = source[index3];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index3 = -1, length = props.length;
          while (++index3 < length) {
            var key = props[index3];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index3 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index3 < length) {
              var source = sources[index3];
              if (source) {
                assigner(object, source, index3, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index3 = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index3-- : ++index3 < length) {
              if (iteratee2(iterable[index3], index3, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index3 = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index3];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject3(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index3 = length, placeholder = getHolder(wrapper);
            while (index3--) {
              args[index3] = arguments[index3];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index3 = findIndexFunc(collection, predicate, fromIndex);
            return index3 > -1 ? iterable[iteratee2 ? collection[index3] : index3] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index3 = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index3--) {
              var func = funcs[index3];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index3 = wrapper ? index3 : length;
            while (++index3 < length) {
              func = funcs[index3];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index4 = 0, result2 = length ? funcs[index4].apply(this, args) : value;
              while (++index4 < length) {
                result2 = funcs[index4].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index3 = length;
            while (index3--) {
              args[index3] = arguments[index3];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars2) {
          chars2 = chars2 === undefined2 ? " " : baseToString(chars2);
          var charsLength = chars2.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars2, length) : chars2;
          }
          var result2 = baseRepeat(chars2, nativeCeil(length / stringSize(chars2)));
          return hasUnicode(chars2) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject3(objValue) && isObject3(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject2(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index3 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index3 < arrLength) {
            var arrValue = array[index3], othValue = other[index3];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index3, other, array, stack) : customizer(arrValue, othValue, index3, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index3 = objLength;
          while (index3--) {
            var key = objProps[index3];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index3 < objLength) {
            key = objProps[index3];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e3) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index3 = -1, length = transforms.length;
          while (++index3 < length) {
            var data = transforms[index3], size5 = data.size;
            switch (data.type) {
              case "drop":
                start += size5;
                break;
              case "dropRight":
                end -= size5;
                break;
              case "take":
                end = nativeMin(end, start + size5);
                break;
              case "takeRight":
                start = nativeMax(start, end - size5);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path2, hasFunc) {
          path2 = castPath(path2, object);
          var index3 = -1, length = path2.length, result2 = false;
          while (++index3 < length) {
            var key = toKey(path2[index3]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index3 != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength2(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index3, object) {
          if (!isObject3(object)) {
            return false;
          }
          var type = typeof index3;
          if (type == "number" ? isArrayLike(object) && isIndex(index3, object.length) : type == "string" && index3 in object) {
            return eq(object[index3], value);
          }
          return false;
        }
        function isKey2(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject3(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index3 = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index3 < length) {
              array[index3] = args[start + index3];
            }
            index3 = -1;
            var otherArgs = Array2(start + 1);
            while (++index3 < start) {
              otherArgs[index3] = args[index3];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path2) {
          return path2.length < 2 ? object : baseGet2(object, baseSlice(path2, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index3 = indexes[length];
            array[length] = isIndex(index3, arrLength) ? oldArray[index3] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count2 = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count2 >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count2 = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size5) {
          var index3 = -1, length = array.length, lastIndex = length - 1;
          size5 = size5 === undefined2 ? length : size5;
          while (++index3 < size5) {
            var rand = baseRandom(index3, lastIndex), value = array[rand];
            array[rand] = array[index3];
            array[index3] = value;
          }
          array.length = size5;
          return array;
        }
        var stringToPath2 = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e3) {
            }
            try {
              return func + "";
            } catch (e3) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size5, guard) {
          if (guard ? isIterateeCall(array, size5, guard) : size5 === undefined2) {
            size5 = 1;
          } else {
            size5 = nativeMax(toInteger(size5), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size5 < 1) {
            return [];
          }
          var index3 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size5));
          while (index3 < length) {
            result2[resIndex++] = baseSlice(array, index3, index3 += size5);
          }
          return result2;
        }
        function compact2(array) {
          var index3 = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index3 < length) {
            var value = array[index3];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index3 = length;
          while (index3--) {
            args[index3 - 1] = arguments[index3];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array, n2 < 0 ? 0 : n2, length);
        }
        function dropRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array, 0, n2 < 0 ? 0 : n2);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index3 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index3 < 0) {
            index3 = nativeMax(length + index3, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index3);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index3 = length - 1;
          if (fromIndex !== undefined2) {
            index3 = toInteger(fromIndex);
            index3 = fromIndex < 0 ? nativeMax(length + index3, 0) : nativeMin(index3, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index3, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index3 = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index3 < length) {
            var pair = pairs[index3];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index3 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index3 < 0) {
            index3 = nativeMax(length + index3, 0);
          }
          return baseIndexOf(array, value, index3);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index3 = length;
          if (fromIndex !== undefined2) {
            index3 = toInteger(fromIndex);
            index3 = index3 < 0 ? nativeMax(length + index3, 0) : nativeMin(index3, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index3) : baseFindIndex(array, baseIsNaN, index3, true);
        }
        function nth(array, n2) {
          return array && array.length ? baseNth(array, toInteger(n2)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index3) {
            return isIndex(index3, length) ? +index3 : index3;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index3 = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index3 < length) {
            var value = array[index3];
            if (predicate(value, index3, array)) {
              result2.push(value);
              indexes.push(index3);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice2(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index3 = baseSortedIndex(array, value);
            if (index3 < length && eq(array[index3], value)) {
              return index3;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index3 = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index3], value)) {
              return index3;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n2, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          return baseSlice(array, 0, n2 < 0 ? 0 : n2);
        }
        function takeRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined2 ? 1 : toInteger(n2);
          n2 = length - n2;
          return baseSlice(array, n2 < 0 ? 0 : n2, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index3) {
            return arrayMap(array, baseProperty(index3));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach2(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path2, args) {
          var index3 = -1, isFunc = typeof path2 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index3] = isFunc ? apply(path2, value, args) : baseInvoke(value, path2, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n2, guard) {
          if (guard ? isIterateeCall(collection, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n2);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size4(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n2, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n2, guard) {
          n2 = guard ? undefined2 : n2;
          n2 = func && n2 == null ? func.length : n2;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n2);
        }
        function before(n2, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n2 <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce3(func, wait, options2) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject3(options2)) {
            leading = !!options2.leading;
            maxing = "maxWait" in options2;
            maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options2 ? !!options2.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer2 = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip4(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index3 = -1, length = nativeMin(args.length, funcsLength);
            while (++index3 < length) {
              args[index3] = transforms[index3].call(this, args[index3]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options2) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject3(options2)) {
            leading = "leading" in options2 ? !!options2.leading : leading;
            trailing = "trailing" in options2 ? !!options2.trailing : trailing;
          }
          return debounce3(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep2(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength2(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean2(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement2(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
        }
        function isEmpty2(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject3(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger2(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength2(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject3(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber2(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull2(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber2(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject2(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger2(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined2(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject3(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject3(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults2 = baseRest(function(object, sources) {
          object = Object2(object);
          var index3 = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index3 < length) {
            var source = sources[index3];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get3(object, path2, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet2(object, path2);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path2) {
          return object != null && hasPath(object, path2, baseHas);
        }
        function hasIn(object, path2) {
          return object != null && hasPath(object, path2, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit2 = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path2) {
            path2 = castPath(path2, object);
            isDeep || (isDeep = path2.length > 1);
            return path2;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path2) {
            return predicate(value, path2[0]);
          });
        }
        function result(object, path2, defaultValue) {
          path2 = castPath(path2, object);
          var index3 = -1, length = path2.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index3 < length) {
            var value = object == null ? undefined2 : object[toKey(path2[index3])];
            if (value === undefined2) {
              index3 = length;
              value = defaultValue;
            }
            object = isFunction2(value) ? value.call(object) : value;
          }
          return object;
        }
        function set2(object, path2, value) {
          return object == null ? object : baseSet(object, path2, value);
        }
        function setWith(object, path2, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path2, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject3(object)) {
              accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index3, object2) {
            return iteratee2(accumulator, value, index3, object2);
          });
          return accumulator;
        }
        function unset2(object, path2) {
          return object == null ? true : baseUnset(object, path2);
        }
        function update(object, path2, updater) {
          return object == null ? object : baseUpdate(object, path2, castFunction(updater));
        }
        function updateWith(object, path2, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path2, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp2(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index3) {
          word = word.toLowerCase();
          return result2 + (index3 ? capitalize2(word) : word);
        });
        function capitalize2(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape2(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index3) {
          return result2 + (index3 ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index3) {
          return result2 + (index3 ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars2) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars2) + string + createPadding(nativeCeil(mid), chars2);
        }
        function padEnd(string, length, chars2) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars2) : string;
        }
        function padStart(string, length, chars2) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars2) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n2, guard) {
          if (guard ? isIterateeCall(string, n2, guard) : n2 === undefined2) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          return baseRepeat(toString(string), n2);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index3) {
          return result2 + (index3 ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index3) {
          return result2 + (index3 ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options2, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options2, guard)) {
            options2 = undefined2;
          }
          string = toString(string);
          options2 = assignInWith({}, options2, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options2.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index3 = 0, interpolate = options2.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options2.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options2.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options2, "sourceURL") ? (options2.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset4) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index3, offset4).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index3 = offset4 + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options2, "variable") && options2.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars2, guard) {
          string = toString(string);
          if (string && (guard || chars2 === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars2 = baseToString(chars2))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars2), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars2, guard) {
          string = toString(string);
          if (string && (guard || chars2 === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars2 = baseToString(chars2))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars2)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars2, guard) {
          string = toString(string);
          if (string && (guard || chars2 === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars2 = baseToString(chars2))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars2));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options2) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject3(options2)) {
            var separator = "separator" in options2 ? options2.separator : separator;
            length = "length" in options2 ? toInteger(options2.length) : length;
            omission = "omission" in options2 ? baseToString(options2.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index3 = result2.lastIndexOf(separator);
            if (index3 > -1) {
              result2 = result2.slice(0, index3);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index3) {
          return result2 + (index3 ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e3) {
            return isError(e3) ? e3 : new Error2(e3);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index3 = -1;
            while (++index3 < length) {
              var pair = pairs[index3];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches2(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path2, srcValue) {
          return baseMatchesProperty(path2, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path2, args) {
          return function(object) {
            return baseInvoke(object, path2, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path2) {
            return baseInvoke(object, path2, args);
          };
        });
        function mixin(object, source, options2) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options2 == null && !(isObject3(source) && (methodNames.length || !props.length))) {
            options2 = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject3(options2) && "chain" in options2) || !!options2.chain, isFunc = isFunction2(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n2) {
          n2 = toInteger(n2);
          return baseRest(function(args) {
            return baseNth(args, n2);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path2) {
          return isKey2(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
        }
        function propertyOf(object) {
          return function(path2) {
            return object == null ? undefined2 : baseGet2(object, path2);
          };
        }
        var range2 = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n2, iteratee2) {
          n2 = toInteger(n2);
          if (n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return [];
          }
          var index3 = MAX_ARRAY_LENGTH, length = nativeMin(n2, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n2 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index3 < n2) {
            iteratee2(index3);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath2(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor2 = createRound("floor");
        function max2(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min2(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round2 = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact2;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce3;
        lodash.defaults = defaults2;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer2;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip4;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches2;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit2;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range2;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set2;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice2;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset2;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize2;
        lodash.ceil = ceil;
        lodash.clamp = clamp2;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep2;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape2;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor2;
        lodash.forEach = forEach2;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get3;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean2;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement2;
        lodash.isEmpty = isEmpty2;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction2;
        lodash.isInteger = isInteger2;
        lodash.isLength = isLength2;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull2;
        lodash.isNumber = isNumber2;
        lodash.isObject = isObject3;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject2;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString2;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined2;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max2;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min2;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop2;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round2;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size4;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape2;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach2;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index3) {
          LazyWrapper.prototype[methodName] = function(n2) {
            n2 = n2 === undefined2 ? 1 : nativeMax(toInteger(n2), 0);
            var result2 = this.__filtered__ && !index3 ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n2, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n2, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n2) {
            return this.reverse()[methodName](n2).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index3) {
          var type = index3 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index3) {
          var takeName = "take" + (index3 ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index3) {
          var dropName = "drop" + (index3 ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path2, args) {
          if (typeof path2 == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path2, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// node_modules/react-i18next/dist/es/Trans.js
import { useContext } from "react";

// node_modules/react-i18next/dist/es/TransWithoutContext.js
import { Fragment, isValidElement, cloneElement, createElement, Children } from "react";

// node_modules/html-parse-stringify/dist/html-parse-stringify.module.js
var import_void_elements = __toESM(require_void_elements());
var t = /\s([^'"/\s><]+?)[\s/>]|([^\s=]+)=\s?(".*?"|'.*?')/g;
function n(n2) {
  var r2 = { type: "tag", name: "", voidElement: false, attrs: {}, children: [] }, i2 = n2.match(/<\/?([^\s]+?)[/\s>]/);
  if (i2 && (r2.name = i2[1], (import_void_elements.default[i2[1]] || "/" === n2.charAt(n2.length - 2)) && (r2.voidElement = true), r2.name.startsWith("!--"))) {
    var s3 = n2.indexOf("-->");
    return { type: "comment", comment: -1 !== s3 ? n2.slice(4, s3) : "" };
  }
  for (var a2 = new RegExp(t), c2 = null; null !== (c2 = a2.exec(n2)); ) if (c2[0].trim()) if (c2[1]) {
    var o = c2[1].trim(), l = [o, ""];
    o.indexOf("=") > -1 && (l = o.split("=")), r2.attrs[l[0]] = l[1], a2.lastIndex--;
  } else c2[2] && (r2.attrs[c2[2]] = c2[3].trim().substring(1, c2[3].length - 1));
  return r2;
}
var r = /<[a-zA-Z0-9\-\!\/](?:"[^"]*"|'[^']*'|[^'">])*>/g;
var i = /^\s*$/;
var s = /* @__PURE__ */ Object.create(null);
function a(e3, t3) {
  switch (t3.type) {
    case "text":
      return e3 + t3.content;
    case "tag":
      return e3 += "<" + t3.name + (t3.attrs ? function(e4) {
        var t4 = [];
        for (var n2 in e4) t4.push(n2 + '="' + e4[n2] + '"');
        return t4.length ? " " + t4.join(" ") : "";
      }(t3.attrs) : "") + (t3.voidElement ? "/>" : ">"), t3.voidElement ? e3 : e3 + t3.children.reduce(a, "") + "</" + t3.name + ">";
    case "comment":
      return e3 + "<!--" + t3.comment + "-->";
  }
}
var c = { parse: function(e3, t3) {
  t3 || (t3 = {}), t3.components || (t3.components = s);
  var a2, c2 = [], o = [], l = -1, m = false;
  if (0 !== e3.indexOf("<")) {
    var u = e3.indexOf("<");
    c2.push({ type: "text", content: -1 === u ? e3 : e3.substring(0, u) });
  }
  return e3.replace(r, function(r2, s3) {
    if (m) {
      if (r2 !== "</" + a2.name + ">") return;
      m = false;
    }
    var u2, f = "/" !== r2.charAt(1), h = r2.startsWith("<!--"), p = s3 + r2.length, d = e3.charAt(p);
    if (h) {
      var v = n(r2);
      return l < 0 ? (c2.push(v), c2) : ((u2 = o[l]).children.push(v), c2);
    }
    if (f && (l++, "tag" === (a2 = n(r2)).type && t3.components[a2.name] && (a2.type = "component", m = true), a2.voidElement || m || !d || "<" === d || a2.children.push({ type: "text", content: e3.slice(p, e3.indexOf("<", p)) }), 0 === l && c2.push(a2), (u2 = o[l - 1]) && u2.children.push(a2), o[l] = a2), (!f || a2.voidElement) && (l > -1 && (a2.voidElement || a2.name === r2.slice(2, -1)) && (l--, a2 = -1 === l ? c2 : o[l]), !m && "<" !== d && d)) {
      u2 = -1 === l ? c2 : o[l].children;
      var x = e3.indexOf("<", p), g = e3.slice(p, -1 === x ? void 0 : x);
      i.test(g) && (g = " "), (x > -1 && l + u2.length >= 0 || " " !== g) && u2.push({ type: "text", content: g });
    }
  }), c2;
}, stringify: function(e3) {
  return e3.reduce(function(e4, t3) {
    return e4 + a("", t3);
  }, "");
} };
var html_parse_stringify_module_default = c;

// node_modules/react-i18next/dist/es/utils.js
function warn() {
  if (console && console.warn) {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[0] === "string") args[0] = `react-i18next:: ${args[0]}`;
    console.warn(...args);
  }
}
var alreadyWarned = {};
function warnOnce() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  if (typeof args[0] === "string" && alreadyWarned[args[0]]) return;
  if (typeof args[0] === "string") alreadyWarned[args[0]] = /* @__PURE__ */ new Date();
  warn(...args);
}
var loadedClb = (i18n, cb) => () => {
  if (i18n.isInitialized) {
    cb();
  } else {
    const initialized = () => {
      setTimeout(() => {
        i18n.off("initialized", initialized);
      }, 0);
      cb();
    };
    i18n.on("initialized", initialized);
  }
};
function loadNamespaces(i18n, ns2, cb) {
  i18n.loadNamespaces(ns2, loadedClb(i18n, cb));
}
function loadLanguages(i18n, lng, ns2, cb) {
  if (typeof ns2 === "string") ns2 = [ns2];
  ns2.forEach((n2) => {
    if (i18n.options.ns.indexOf(n2) < 0) i18n.options.ns.push(n2);
  });
  i18n.loadLanguages(lng, loadedClb(i18n, cb));
}
function oldI18nextHasLoadedNamespace(ns2, i18n) {
  let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const lng = i18n.languages[0];
  const fallbackLng = i18n.options ? i18n.options.fallbackLng : false;
  const lastLng = i18n.languages[i18n.languages.length - 1];
  if (lng.toLowerCase() === "cimode") return true;
  const loadNotPending = (l, n2) => {
    const loadState = i18n.services.backendConnector.state[`${l}|${n2}`];
    return loadState === -1 || loadState === 2;
  };
  if (options2.bindI18n && options2.bindI18n.indexOf("languageChanging") > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns2)) return false;
  if (i18n.hasResourceBundle(lng, ns2)) return true;
  if (!i18n.services.backendConnector.backend || i18n.options.resources && !i18n.options.partialBundledLanguages) return true;
  if (loadNotPending(lng, ns2) && (!fallbackLng || loadNotPending(lastLng, ns2))) return true;
  return false;
}
function hasLoadedNamespace(ns2, i18n) {
  let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (!i18n.languages || !i18n.languages.length) {
    warnOnce("i18n.languages were undefined or empty", i18n.languages);
    return true;
  }
  const isNewerI18next = i18n.options.ignoreJSONStructure !== void 0;
  if (!isNewerI18next) {
    return oldI18nextHasLoadedNamespace(ns2, i18n, options2);
  }
  return i18n.hasLoadedNamespace(ns2, {
    lng: options2.lng,
    precheck: (i18nInstance2, loadNotPending) => {
      if (options2.bindI18n && options2.bindI18n.indexOf("languageChanging") > -1 && i18nInstance2.services.backendConnector.backend && i18nInstance2.isLanguageChangingTo && !loadNotPending(i18nInstance2.isLanguageChangingTo, ns2)) return false;
    }
  });
}

// node_modules/react-i18next/dist/es/unescape.js
var matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
var htmlEntities = {
  "&amp;": "&",
  "&#38;": "&",
  "&lt;": "<",
  "&#60;": "<",
  "&gt;": ">",
  "&#62;": ">",
  "&apos;": "'",
  "&#39;": "'",
  "&quot;": '"',
  "&#34;": '"',
  "&nbsp;": " ",
  "&#160;": " ",
  "&copy;": "\xA9",
  "&#169;": "\xA9",
  "&reg;": "\xAE",
  "&#174;": "\xAE",
  "&hellip;": "\u2026",
  "&#8230;": "\u2026",
  "&#x2F;": "/",
  "&#47;": "/"
};
var unescapeHtmlEntity = (m) => htmlEntities[m];
var unescape = (text) => text.replace(matchHtmlEntity, unescapeHtmlEntity);

// node_modules/react-i18next/dist/es/defaults.js
var defaultOptions = {
  bindI18n: "languageChanged",
  bindI18nStore: "",
  transEmptyNodeValue: "",
  transSupportBasicHtmlNodes: true,
  transWrapTextNodes: "",
  transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
  useSuspense: true,
  unescape
};
function setDefaults() {
  let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  defaultOptions = {
    ...defaultOptions,
    ...options2
  };
}
function getDefaults() {
  return defaultOptions;
}

// node_modules/react-i18next/dist/es/i18nInstance.js
var i18nInstance;
function setI18n(instance2) {
  i18nInstance = instance2;
}
function getI18n() {
  return i18nInstance;
}

// node_modules/react-i18next/dist/es/TransWithoutContext.js
function hasChildren(node, checkLength) {
  if (!node) return false;
  const base2 = node.props ? node.props.children : node.children;
  if (checkLength) return base2.length > 0;
  return !!base2;
}
function getChildren(node) {
  if (!node) return [];
  const children = node.props ? node.props.children : node.children;
  return node.props && node.props.i18nIsDynamicList ? getAsArray(children) : children;
}
function hasValidReactChildren(children) {
  if (Object.prototype.toString.call(children) !== "[object Array]") return false;
  return children.every((child) => isValidElement(child));
}
function getAsArray(data) {
  return Array.isArray(data) ? data : [data];
}
function mergeProps(source, target) {
  const newTarget = {
    ...target
  };
  newTarget.props = Object.assign(source.props, target.props);
  return newTarget;
}
function nodesToString(children, i18nOptions) {
  if (!children) return "";
  let stringNode = "";
  const childrenArray = getAsArray(children);
  const keepArray = i18nOptions.transSupportBasicHtmlNodes && i18nOptions.transKeepBasicHtmlNodesFor ? i18nOptions.transKeepBasicHtmlNodesFor : [];
  childrenArray.forEach((child, childIndex) => {
    if (typeof child === "string") {
      stringNode += `${child}`;
    } else if (isValidElement(child)) {
      const childPropsCount = Object.keys(child.props).length;
      const shouldKeepChild = keepArray.indexOf(child.type) > -1;
      const childChildren = child.props.children;
      if (!childChildren && shouldKeepChild && childPropsCount === 0) {
        stringNode += `<${child.type}/>`;
      } else if (!childChildren && (!shouldKeepChild || childPropsCount !== 0)) {
        stringNode += `<${childIndex}></${childIndex}>`;
      } else if (child.props.i18nIsDynamicList) {
        stringNode += `<${childIndex}></${childIndex}>`;
      } else if (shouldKeepChild && childPropsCount === 1 && typeof childChildren === "string") {
        stringNode += `<${child.type}>${childChildren}</${child.type}>`;
      } else {
        const content = nodesToString(childChildren, i18nOptions);
        stringNode += `<${childIndex}>${content}</${childIndex}>`;
      }
    } else if (child === null) {
      warn(`Trans: the passed in value is invalid - seems you passed in a null child.`);
    } else if (typeof child === "object") {
      const {
        format,
        ...clone
      } = child;
      const keys = Object.keys(clone);
      if (keys.length === 1) {
        const value = format ? `${keys[0]}, ${format}` : keys[0];
        stringNode += `{{${value}}}`;
      } else {
        warn(`react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.`, child);
      }
    } else {
      warn(`Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.`, child);
    }
  });
  return stringNode;
}
function renderNodes(children, targetString, i18n, i18nOptions, combinedTOpts, shouldUnescape) {
  if (targetString === "") return [];
  const keepArray = i18nOptions.transKeepBasicHtmlNodesFor || [];
  const emptyChildrenButNeedsHandling = targetString && new RegExp(keepArray.map((keep) => `<${keep}`).join("|")).test(targetString);
  if (!children && !emptyChildrenButNeedsHandling && !shouldUnescape) return [targetString];
  const data = {};
  function getData(childs) {
    const childrenArray = getAsArray(childs);
    childrenArray.forEach((child) => {
      if (typeof child === "string") return;
      if (hasChildren(child)) getData(getChildren(child));
      else if (typeof child === "object" && !isValidElement(child)) Object.assign(data, child);
    });
  }
  getData(children);
  const ast = html_parse_stringify_module_default.parse(`<0>${targetString}</0>`);
  const opts = {
    ...data,
    ...combinedTOpts
  };
  function renderInner(child, node, rootReactNode) {
    const childs = getChildren(child);
    const mappedChildren = mapAST(childs, node.children, rootReactNode);
    return hasValidReactChildren(childs) && mappedChildren.length === 0 || child.props && child.props.i18nIsDynamicList ? childs : mappedChildren;
  }
  function pushTranslatedJSX(child, inner, mem, i2, isVoid) {
    if (child.dummy) {
      child.children = inner;
      mem.push(cloneElement(child, {
        key: i2
      }, isVoid ? void 0 : inner));
    } else {
      mem.push(...Children.map([child], (c2) => {
        const props = {
          ...c2.props
        };
        delete props.i18nIsDynamicList;
        return createElement(c2.type, {
          ...props,
          key: i2,
          ref: c2.ref
        }, isVoid ? null : inner);
      }));
    }
  }
  function mapAST(reactNode, astNode, rootReactNode) {
    const reactNodes = getAsArray(reactNode);
    const astNodes = getAsArray(astNode);
    return astNodes.reduce((mem, node, i2) => {
      const translationContent = node.children && node.children[0] && node.children[0].content && i18n.services.interpolator.interpolate(node.children[0].content, opts, i18n.language);
      if (node.type === "tag") {
        let tmp = reactNodes[parseInt(node.name, 10)];
        if (rootReactNode.length === 1 && !tmp) tmp = rootReactNode[0][node.name];
        if (!tmp) tmp = {};
        const child = Object.keys(node.attrs).length !== 0 ? mergeProps({
          props: node.attrs
        }, tmp) : tmp;
        const isElement2 = isValidElement(child);
        const isValidTranslationWithChildren = isElement2 && hasChildren(node, true) && !node.voidElement;
        const isEmptyTransWithHTML = emptyChildrenButNeedsHandling && typeof child === "object" && child.dummy && !isElement2;
        const isKnownComponent = typeof children === "object" && children !== null && Object.hasOwnProperty.call(children, node.name);
        if (typeof child === "string") {
          const value = i18n.services.interpolator.interpolate(child, opts, i18n.language);
          mem.push(value);
        } else if (hasChildren(child) || isValidTranslationWithChildren) {
          const inner = renderInner(child, node, rootReactNode);
          pushTranslatedJSX(child, inner, mem, i2);
        } else if (isEmptyTransWithHTML) {
          const inner = mapAST(reactNodes, node.children, rootReactNode);
          pushTranslatedJSX(child, inner, mem, i2);
        } else if (Number.isNaN(parseFloat(node.name))) {
          if (isKnownComponent) {
            const inner = renderInner(child, node, rootReactNode);
            pushTranslatedJSX(child, inner, mem, i2, node.voidElement);
          } else if (i18nOptions.transSupportBasicHtmlNodes && keepArray.indexOf(node.name) > -1) {
            if (node.voidElement) {
              mem.push(createElement(node.name, {
                key: `${node.name}-${i2}`
              }));
            } else {
              const inner = mapAST(reactNodes, node.children, rootReactNode);
              mem.push(createElement(node.name, {
                key: `${node.name}-${i2}`
              }, inner));
            }
          } else if (node.voidElement) {
            mem.push(`<${node.name} />`);
          } else {
            const inner = mapAST(reactNodes, node.children, rootReactNode);
            mem.push(`<${node.name}>${inner}</${node.name}>`);
          }
        } else if (typeof child === "object" && !isElement2) {
          const content = node.children[0] ? translationContent : null;
          if (content) mem.push(content);
        } else {
          pushTranslatedJSX(child, translationContent, mem, i2, node.children.length !== 1 || !translationContent);
        }
      } else if (node.type === "text") {
        const wrapTextNodes = i18nOptions.transWrapTextNodes;
        const content = shouldUnescape ? i18nOptions.unescape(i18n.services.interpolator.interpolate(node.content, opts, i18n.language)) : i18n.services.interpolator.interpolate(node.content, opts, i18n.language);
        if (wrapTextNodes) {
          mem.push(createElement(wrapTextNodes, {
            key: `${node.name}-${i2}`
          }, content));
        } else {
          mem.push(content);
        }
      }
      return mem;
    }, []);
  }
  const result = mapAST([{
    dummy: true,
    children: children || []
  }], ast, getAsArray(children || []));
  return getChildren(result[0]);
}
function Trans(_ref) {
  let {
    children,
    count: count2,
    parent,
    i18nKey,
    context,
    tOptions = {},
    values,
    defaults: defaults2,
    components,
    ns: ns2,
    i18n: i18nFromProps,
    t: tFromProps,
    shouldUnescape,
    ...additionalProps
  } = _ref;
  const i18n = i18nFromProps || getI18n();
  if (!i18n) {
    warnOnce("You will need to pass in an i18next instance by using i18nextReactModule");
    return children;
  }
  const t3 = tFromProps || i18n.t.bind(i18n) || ((k) => k);
  const reactI18nextOptions = {
    ...getDefaults(),
    ...i18n.options && i18n.options.react
  };
  let namespaces = ns2 || t3.ns || i18n.options && i18n.options.defaultNS;
  namespaces = typeof namespaces === "string" ? [namespaces] : namespaces || ["translation"];
  const nodeAsString = nodesToString(children, reactI18nextOptions);
  const defaultValue = defaults2 || nodeAsString || reactI18nextOptions.transEmptyNodeValue || i18nKey;
  const {
    hashTransKey
  } = reactI18nextOptions;
  const key = i18nKey || (hashTransKey ? hashTransKey(nodeAsString || defaultValue) : nodeAsString || defaultValue);
  if (i18n.options && i18n.options.interpolation && i18n.options.interpolation.defaultVariables) {
    values = values && Object.keys(values).length > 0 ? {
      ...values,
      ...i18n.options.interpolation.defaultVariables
    } : {
      ...i18n.options.interpolation.defaultVariables
    };
  }
  const interpolationOverride = values || count2 !== void 0 || !children ? tOptions.interpolation : {
    interpolation: {
      ...tOptions.interpolation,
      prefix: "#$?",
      suffix: "?$#"
    }
  };
  const combinedTOpts = {
    ...tOptions,
    context: context || tOptions.context,
    count: count2,
    ...values,
    ...interpolationOverride,
    defaultValue,
    ns: namespaces
  };
  const translation = key ? t3(key, combinedTOpts) : defaultValue;
  if (components) {
    Object.keys(components).forEach((c2) => {
      const comp = components[c2];
      if (typeof comp.type === "function" || !comp.props || !comp.props.children || translation.indexOf(`${c2}/>`) < 0 && translation.indexOf(`${c2} />`) < 0) return;
      function Componentized() {
        return createElement(Fragment, null, comp);
      }
      components[c2] = createElement(Componentized);
    });
  }
  const content = renderNodes(components || children, translation, i18n, reactI18nextOptions, combinedTOpts, shouldUnescape);
  const useAsParent = parent !== void 0 ? parent : reactI18nextOptions.defaultTransParent;
  return useAsParent ? createElement(useAsParent, additionalProps, content) : content;
}

// node_modules/react-i18next/dist/es/context.js
import { createContext } from "react";

// node_modules/react-i18next/dist/es/initReactI18next.js
var initReactI18next = {
  type: "3rdParty",
  init(instance2) {
    setDefaults(instance2.options.react);
    setI18n(instance2);
  }
};

// node_modules/react-i18next/dist/es/context.js
var I18nContext = createContext();
var ReportNamespaces = class {
  constructor() {
    this.usedNamespaces = {};
  }
  addUsedNamespaces(namespaces) {
    namespaces.forEach((ns2) => {
      if (!this.usedNamespaces[ns2]) this.usedNamespaces[ns2] = true;
    });
  }
  getUsedNamespaces() {
    return Object.keys(this.usedNamespaces);
  }
};

// node_modules/react-i18next/dist/es/Trans.js
function Trans2(_ref) {
  let {
    children,
    count: count2,
    parent,
    i18nKey,
    context,
    tOptions = {},
    values,
    defaults: defaults2,
    components,
    ns: ns2,
    i18n: i18nFromProps,
    t: tFromProps,
    shouldUnescape,
    ...additionalProps
  } = _ref;
  const {
    i18n: i18nFromContext,
    defaultNS: defaultNSFromContext
  } = useContext(I18nContext) || {};
  const i18n = i18nFromProps || i18nFromContext || getI18n();
  const t3 = tFromProps || i18n && i18n.t.bind(i18n);
  return Trans({
    children,
    count: count2,
    parent,
    i18nKey,
    context,
    tOptions,
    values,
    defaults: defaults2,
    components,
    ns: ns2 || t3 && t3.ns || defaultNSFromContext || i18n && i18n.options && i18n.options.defaultNS,
    i18n,
    t: tFromProps,
    shouldUnescape,
    ...additionalProps
  });
}

// node_modules/react-i18next/dist/es/useTranslation.js
import { useState, useEffect, useContext as useContext2, useRef, useCallback } from "react";
var usePrevious = (value, ignore) => {
  const ref = useRef();
  useEffect(() => {
    ref.current = ignore ? ref.current : value;
  }, [value, ignore]);
  return ref.current;
};
function alwaysNewT(i18n, language, namespace, keyPrefix) {
  return i18n.getFixedT(language, namespace, keyPrefix);
}
function useMemoizedT(i18n, language, namespace, keyPrefix) {
  return useCallback(alwaysNewT(i18n, language, namespace, keyPrefix), [i18n, language, namespace, keyPrefix]);
}
function useTranslation(ns2) {
  let props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const {
    i18n: i18nFromProps
  } = props;
  const {
    i18n: i18nFromContext,
    defaultNS: defaultNSFromContext
  } = useContext2(I18nContext) || {};
  const i18n = i18nFromProps || i18nFromContext || getI18n();
  if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new ReportNamespaces();
  if (!i18n) {
    warnOnce("You will need to pass in an i18next instance by using initReactI18next");
    const notReadyT = (k, optsOrDefaultValue) => {
      if (typeof optsOrDefaultValue === "string") return optsOrDefaultValue;
      if (optsOrDefaultValue && typeof optsOrDefaultValue === "object" && typeof optsOrDefaultValue.defaultValue === "string") return optsOrDefaultValue.defaultValue;
      return Array.isArray(k) ? k[k.length - 1] : k;
    };
    const retNotReady = [notReadyT, {}, false];
    retNotReady.t = notReadyT;
    retNotReady.i18n = {};
    retNotReady.ready = false;
    return retNotReady;
  }
  if (i18n.options.react && i18n.options.react.wait !== void 0) warnOnce("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
  const i18nOptions = {
    ...getDefaults(),
    ...i18n.options.react,
    ...props
  };
  const {
    useSuspense,
    keyPrefix
  } = i18nOptions;
  let namespaces = ns2 || defaultNSFromContext || i18n.options && i18n.options.defaultNS;
  namespaces = typeof namespaces === "string" ? [namespaces] : namespaces || ["translation"];
  if (i18n.reportNamespaces.addUsedNamespaces) i18n.reportNamespaces.addUsedNamespaces(namespaces);
  const ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every((n2) => hasLoadedNamespace(n2, i18n, i18nOptions));
  const memoGetT = useMemoizedT(i18n, props.lng || null, i18nOptions.nsMode === "fallback" ? namespaces : namespaces[0], keyPrefix);
  const getT = () => memoGetT;
  const getNewT = () => alwaysNewT(i18n, props.lng || null, i18nOptions.nsMode === "fallback" ? namespaces : namespaces[0], keyPrefix);
  const [t3, setT] = useState(getT);
  let joinedNS = namespaces.join();
  if (props.lng) joinedNS = `${props.lng}${joinedNS}`;
  const previousJoinedNS = usePrevious(joinedNS);
  const isMounted = useRef(true);
  useEffect(() => {
    const {
      bindI18n,
      bindI18nStore
    } = i18nOptions;
    isMounted.current = true;
    if (!ready && !useSuspense) {
      if (props.lng) {
        loadLanguages(i18n, props.lng, namespaces, () => {
          if (isMounted.current) setT(getNewT);
        });
      } else {
        loadNamespaces(i18n, namespaces, () => {
          if (isMounted.current) setT(getNewT);
        });
      }
    }
    if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
      setT(getNewT);
    }
    function boundReset() {
      if (isMounted.current) setT(getNewT);
    }
    if (bindI18n && i18n) i18n.on(bindI18n, boundReset);
    if (bindI18nStore && i18n) i18n.store.on(bindI18nStore, boundReset);
    return () => {
      isMounted.current = false;
      if (bindI18n && i18n) bindI18n.split(" ").forEach((e3) => i18n.off(e3, boundReset));
      if (bindI18nStore && i18n) bindI18nStore.split(" ").forEach((e3) => i18n.store.off(e3, boundReset));
    };
  }, [i18n, joinedNS]);
  useEffect(() => {
    if (isMounted.current && ready) {
      setT(getT);
    }
  }, [i18n, keyPrefix, ready]);
  const ret = [t3, i18n, ready];
  ret.t = t3;
  ret.i18n = i18n;
  ret.ready = ready;
  if (ready) return ret;
  if (!ready && !useSuspense) return ret;
  throw new Promise((resolve) => {
    if (props.lng) {
      loadLanguages(i18n, props.lng, namespaces, () => resolve());
    } else {
      loadNamespaces(i18n, namespaces, () => resolve());
    }
  });
}

// node_modules/react-i18next/dist/es/withTranslation.js
import { createElement as createElement2, forwardRef as forwardRefReact } from "react";

// node_modules/react-i18next/dist/es/I18nextProvider.js
import { createElement as createElement3, useMemo } from "react";

// node_modules/react-i18next/dist/es/withSSR.js
import { createElement as createElement4 } from "react";

// node_modules/react-i18next/dist/es/useSSR.js
import { useContext as useContext3 } from "react";

// node_modules/i18next/dist/esm/i18next.js
var consoleLogger = {
  type: "logger",
  log(args) {
    this.output("log", args);
  },
  warn(args) {
    this.output("warn", args);
  },
  error(args) {
    this.output("error", args);
  },
  output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};
var Logger = class _Logger {
  constructor(concreteLogger) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(concreteLogger, options2);
  }
  init(concreteLogger) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = options2.prefix || "i18next:";
    this.logger = concreteLogger || consoleLogger;
    this.options = options2;
    this.debug = options2.debug;
  }
  log() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.forward(args, "log", "", true);
  }
  warn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.forward(args, "warn", "", true);
  }
  error() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.forward(args, "error", "");
  }
  deprecate() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (typeof args[0] === "string") args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new _Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options2) {
    options2 = options2 || this.options;
    options2.prefix = options2.prefix || this.prefix;
    return new _Logger(this.logger, options2);
  }
};
var baseLogger = new Logger();
var EventEmitter = class {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(" ").forEach((event) => {
      if (!this.observers[event]) this.observers[event] = /* @__PURE__ */ new Map();
      const numListeners = this.observers[event].get(listener) || 0;
      this.observers[event].set(listener, numListeners + 1);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event].delete(listener);
  }
  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (this.observers[event]) {
      const cloned = Array.from(this.observers[event].entries());
      cloned.forEach((_ref) => {
        let [observer, numTimesAdded] = _ref;
        for (let i2 = 0; i2 < numTimesAdded; i2++) {
          observer(...args);
        }
      });
    }
    if (this.observers["*"]) {
      const cloned = Array.from(this.observers["*"].entries());
      cloned.forEach((_ref2) => {
        let [observer, numTimesAdded] = _ref2;
        for (let i2 = 0; i2 < numTimesAdded; i2++) {
          observer.apply(observer, [event, ...args]);
        }
      });
    }
  }
};
function defer() {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return "";
  return "" + object;
}
function copy(a2, s3, t3) {
  a2.forEach((m) => {
    if (s3[m]) t3[m] = s3[m];
  });
}
var lastOfPathSeparatorRegExp = /###/g;
function getLastOfPath(object, path2, Empty) {
  function cleanKey(key) {
    return key && key.indexOf("###") > -1 ? key.replace(lastOfPathSeparatorRegExp, ".") : key;
  }
  function canNotTraverseDeeper() {
    return !object || typeof object === "string";
  }
  const stack = typeof path2 !== "string" ? path2 : path2.split(".");
  let stackIndex = 0;
  while (stackIndex < stack.length - 1) {
    if (canNotTraverseDeeper()) return {};
    const key = cleanKey(stack[stackIndex]);
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
    ++stackIndex;
  }
  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack[stackIndex])
  };
}
function setPath(object, path2, newValue) {
  const {
    obj,
    k
  } = getLastOfPath(object, path2, Object);
  if (obj !== void 0 || path2.length === 1) {
    obj[k] = newValue;
    return;
  }
  let e3 = path2[path2.length - 1];
  let p = path2.slice(0, path2.length - 1);
  let last = getLastOfPath(object, p, Object);
  while (last.obj === void 0 && p.length) {
    e3 = `${p[p.length - 1]}.${e3}`;
    p = p.slice(0, p.length - 1);
    last = getLastOfPath(object, p, Object);
    if (last && last.obj && typeof last.obj[`${last.k}.${e3}`] !== "undefined") {
      last.obj = void 0;
    }
  }
  last.obj[`${last.k}.${e3}`] = newValue;
}
function pushPath(object, path2, newValue, concat) {
  const {
    obj,
    k
  } = getLastOfPath(object, path2, Object);
  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path2) {
  const {
    obj,
    k
  } = getLastOfPath(object, path2);
  if (!obj) return void 0;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  const value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (const prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function escape(data) {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, (s3) => _entityMap[s3]);
  }
  return data;
}
var RegExpCache = class {
  constructor(capacity) {
    this.capacity = capacity;
    this.regExpMap = /* @__PURE__ */ new Map();
    this.regExpQueue = [];
  }
  getRegExp(pattern) {
    const regExpFromCache = this.regExpMap.get(pattern);
    if (regExpFromCache !== void 0) {
      return regExpFromCache;
    }
    const regExpNew = new RegExp(pattern);
    if (this.regExpQueue.length === this.capacity) {
      this.regExpMap.delete(this.regExpQueue.shift());
    }
    this.regExpMap.set(pattern, regExpNew);
    this.regExpQueue.push(pattern);
    return regExpNew;
  }
};
var chars = [" ", ",", "?", "!", ";"];
var looksLikeObjectPathRegExpCache = new RegExpCache(20);
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  const possibleChars = chars.filter((c2) => nsSeparator.indexOf(c2) < 0 && keySeparator.indexOf(c2) < 0);
  if (possibleChars.length === 0) return true;
  const r2 = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map((c2) => c2 === "?" ? "\\?" : c2).join("|")})`);
  let matched = !r2.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r2.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
}
function deepFind(obj, path2) {
  let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj) return void 0;
  if (obj[path2]) return obj[path2];
  const tokens = path2.split(keySeparator);
  let current = obj;
  for (let i2 = 0; i2 < tokens.length; ) {
    if (!current || typeof current !== "object") {
      return void 0;
    }
    let next;
    let nextPath = "";
    for (let j = i2; j < tokens.length; ++j) {
      if (j !== i2) {
        nextPath += keySeparator;
      }
      nextPath += tokens[j];
      next = current[nextPath];
      if (next !== void 0) {
        if (["string", "number", "boolean"].indexOf(typeof next) > -1 && j < tokens.length - 1) {
          continue;
        }
        i2 += j - i2 + 1;
        break;
      }
    }
    current = next;
  }
  return current;
}
function getCleanedCode(code) {
  if (code && code.indexOf("_") > 0) return code.replace("_", "-");
  return code;
}
var ResourceStore = class extends EventEmitter {
  constructor(data) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super();
    this.data = data || {};
    this.options = options2;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    if (this.options.ignoreJSONStructure === void 0) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns2) {
    if (this.options.ns.indexOf(ns2) < 0) {
      this.options.ns.push(ns2);
    }
  }
  removeNamespaces(ns2) {
    const index3 = this.options.ns.indexOf(ns2);
    if (index3 > -1) {
      this.options.ns.splice(index3, 1);
    }
  }
  getResource(lng, ns2, key) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options2.ignoreJSONStructure !== void 0 ? options2.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path2;
    if (lng.indexOf(".") > -1) {
      path2 = lng.split(".");
    } else {
      path2 = [lng, ns2];
      if (key) {
        if (Array.isArray(key)) {
          path2.push(...key);
        } else if (typeof key === "string" && keySeparator) {
          path2.push(...key.split(keySeparator));
        } else {
          path2.push(key);
        }
      }
    }
    const result = getPath(this.data, path2);
    if (!result && !ns2 && !key && lng.indexOf(".") > -1) {
      lng = path2[0];
      ns2 = path2[1];
      key = path2.slice(2).join(".");
    }
    if (result || !ignoreJSONStructure || typeof key !== "string") return result;
    return deepFind(this.data && this.data[lng] && this.data[lng][ns2], key, keySeparator);
  }
  addResource(lng, ns2, key, value) {
    let options2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: false
    };
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    let path2 = [lng, ns2];
    if (key) path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf(".") > -1) {
      path2 = lng.split(".");
      value = ns2;
      ns2 = path2[1];
    }
    this.addNamespaces(ns2);
    setPath(this.data, path2, value);
    if (!options2.silent) this.emit("added", lng, ns2, key, value);
  }
  addResources(lng, ns2, resources) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: false
    };
    for (const m in resources) {
      if (typeof resources[m] === "string" || Array.isArray(resources[m])) this.addResource(lng, ns2, m, resources[m], {
        silent: true
      });
    }
    if (!options2.silent) this.emit("added", lng, ns2, resources);
  }
  addResourceBundle(lng, ns2, resources, deep, overwrite) {
    let options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: false,
      skipCopy: false
    };
    let path2 = [lng, ns2];
    if (lng.indexOf(".") > -1) {
      path2 = lng.split(".");
      deep = resources;
      resources = ns2;
      ns2 = path2[1];
    }
    this.addNamespaces(ns2);
    let pack = getPath(this.data, path2) || {};
    if (!options2.skipCopy) resources = JSON.parse(JSON.stringify(resources));
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path2, pack);
    if (!options2.silent) this.emit("added", lng, ns2, resources);
  }
  removeResourceBundle(lng, ns2) {
    if (this.hasResourceBundle(lng, ns2)) {
      delete this.data[lng][ns2];
    }
    this.removeNamespaces(ns2);
    this.emit("removed", lng, ns2);
  }
  hasResourceBundle(lng, ns2) {
    return this.getResource(lng, ns2) !== void 0;
  }
  getResourceBundle(lng, ns2) {
    if (!ns2) ns2 = this.options.defaultNS;
    if (this.options.compatibilityAPI === "v1") return {
      ...{},
      ...this.getResource(lng, ns2)
    };
    return this.getResource(lng, ns2);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n2 = data && Object.keys(data) || [];
    return !!n2.find((v) => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
};
var postProcessor = {
  processors: {},
  addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle(processors, value, key, options2, translator) {
    processors.forEach((processor) => {
      if (this.processors[processor]) value = this.processors[processor].process(value, key, options2, translator);
    });
    return value;
  }
};
var checkedLoadedFor = {};
var Translator = class _Translator extends EventEmitter {
  constructor(services) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super();
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
    this.options = options2;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    this.logger = baseLogger.create("translator");
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (key === void 0 || key === null) {
      return false;
    }
    const resolved = this.resolve(key, options2);
    return resolved && resolved.res !== void 0;
  }
  extractFromKey(key, options2) {
    let nsSeparator = options2.nsSeparator !== void 0 ? options2.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === void 0) nsSeparator = ":";
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    let namespaces = options2.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options2.keySeparator && !this.options.userDefinedNsSeparator && !options2.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    if (typeof namespaces === "string") namespaces = [namespaces];
    return {
      key,
      namespaces
    };
  }
  translate(keys, options2, lastKey) {
    if (typeof options2 !== "object" && this.options.overloadTranslationOptionHandler) {
      options2 = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options2 === "object") options2 = {
      ...options2
    };
    if (!options2) options2 = {};
    if (keys === void 0 || keys === null) return "";
    if (!Array.isArray(keys)) keys = [String(keys)];
    const returnDetails = options2.returnDetails !== void 0 ? options2.returnDetails : this.options.returnDetails;
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys[keys.length - 1], options2);
    const namespace = namespaces[namespaces.length - 1];
    const lng = options2.lng || this.language;
    const appendNamespaceToCIMode = options2.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng && lng.toLowerCase() === "cimode") {
      if (appendNamespaceToCIMode) {
        const nsSeparator = options2.nsSeparator || this.options.nsSeparator;
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(options2)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(options2)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys, options2);
    let res = resolved && resolved.res;
    const resUsedKey = resolved && resolved.usedKey || key;
    const resExactUsedKey = resolved && resolved.exactUsedKey || key;
    const resType = Object.prototype.toString.apply(res);
    const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
    const joinArrays = options2.joinArrays !== void 0 ? options2.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && Array.isArray(res))) {
      if (!options2.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        }
        const r2 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
          ...options2,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r2;
          resolved.usedParams = this.getUsedParamsDetails(options2);
          return resolved;
        }
        return r2;
      }
      if (keySeparator) {
        const resTypeIsArray = Array.isArray(res);
        const copy2 = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in res) {
          if (Object.prototype.hasOwnProperty.call(res, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            copy2[m] = this.translate(deepKey, {
              ...options2,
              ...{
                joinArrays: false,
                ns: namespaces
              }
            });
            if (copy2[m] === deepKey) copy2[m] = res[m];
          }
        }
        res = copy2;
      }
    } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && Array.isArray(res)) {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys, options2, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      const needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
      const hasDefaultValue = _Translator.hasDefaultValue(options2);
      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options2.count, options2) : "";
      const defaultValueSuffixOrdinalFallback = options2.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options2.count, {
        ordinal: false
      }) : "";
      const needsZeroSuffixLookup = needsPluralHandling && !options2.ordinal && options2.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const defaultValue = needsZeroSuffixLookup && options2[`defaultValue${this.options.pluralSeparator}zero`] || options2[`defaultValue${defaultValueSuffix}`] || options2[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options2.defaultValue;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = options2.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...options2,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options2.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
          for (let i2 = 0; i2 < fallbackLngs.length; i2++) {
            lngs.push(fallbackLngs[i2]);
          }
        } else if (this.options.saveMissingTo === "all") {
          lngs = this.languageUtils.toResolveHierarchy(options2.lng || this.language);
        } else {
          lngs.push(options2.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options2);
          } else if (this.backendConnector && this.backendConnector.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options2);
          }
          this.emit("missingKey", l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach((language) => {
              const suffixes = this.pluralResolver.getSuffixes(language, options2);
              if (needsZeroSuffixLookup && options2[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                suffixes.push(`${this.options.pluralSeparator}zero`);
              }
              suffixes.forEach((suffix) => {
                send([language], key + suffix, options2[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys, options2, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        if (this.options.compatibilityAPI !== "v1") {
          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);
        } else {
          res = this.options.parseMissingKeyHandler(res);
        }
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(options2);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, options2, resolved, lastKey) {
    var _this = this;
    if (this.i18nFormat && this.i18nFormat.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...options2
      }, options2.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!options2.skipInterpolation) {
      if (options2.interpolation) this.interpolator.init({
        ...options2,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...options2.interpolation
          }
        }
      });
      const skipOnVariables = typeof res === "string" && (options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = options2.replace && typeof options2.replace !== "string" ? options2.replace : options2;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, options2.lng || this.language, options2);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) options2.nest = false;
      }
      if (!options2.lng && this.options.compatibilityAPI !== "v1" && resolved && resolved.res) options2.lng = resolved.usedLng;
      if (options2.nest !== false) res = this.interpolator.nest(res, function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (lastKey && lastKey[0] === args[0] && !options2.context) {
          _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return _this.translate(...args, key);
      }, options2);
      if (options2.interpolation) this.interpolator.reset();
    }
    const postProcess = options2.postProcess || this.options.postProcess;
    const postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
    if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options2.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(options2)
        },
        ...options2
      } : options2, this);
    }
    return res;
  }
  resolve(keys) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (typeof keys === "string") keys = [keys];
    keys.forEach((k) => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k, options2);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
      const needsZeroSuffixLookup = needsPluralHandling && !options2.ordinal && options2.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const needsContextHandling = options2.context !== void 0 && (typeof options2.context === "string" || typeof options2.context === "number") && options2.context !== "";
      const codes = options2.lngs ? options2.lngs : this.languageUtils.toResolveHierarchy(options2.lng || this.language, options2.fallbackLng);
      namespaces.forEach((ns2) => {
        if (this.isValidLookup(found)) return;
        usedNS = ns2;
        if (!checkedLoadedFor[`${codes[0]}-${ns2}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns2}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        }
        codes.forEach((code) => {
          if (this.isValidLookup(found)) return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns2, options2);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options2.count, options2);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (options2.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${options2.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (options2.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns2, possibleKey, options2);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
  }
  getResource(code, ns2, key) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns2, key, options2);
    return this.resourceStore.getResource(code, ns2, key, options2);
  }
  getUsedParamsDetails() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const optionsKeys = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"];
    const useOptionsReplaceForData = options2.replace && typeof options2.replace !== "string";
    let data = useOptionsReplaceForData ? options2.replace : options2;
    if (useOptionsReplaceForData && typeof options2.count !== "undefined") {
      data.count = options2.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options2) {
    const prefix = "defaultValue";
    for (const option in options2) {
      if (Object.prototype.hasOwnProperty.call(options2, option) && prefix === option.substring(0, prefix.length) && void 0 !== options2[option]) {
        return true;
      }
    }
    return false;
  }
};
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
var LanguageUtil = class {
  constructor(options2) {
    this.options = options2;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0) return null;
    const p = code.split("-");
    if (p.length === 2) return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === "x") return null;
    return this.formatLanguageCode(p.join("-"));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0) return code;
    const p = code.split("-");
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (typeof code === "string" && code.indexOf("-") > -1) {
      const specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
      let p = code.split("-");
      if (this.options.lowerCaseLng) {
        p = p.map((part) => part.toLowerCase());
      } else if (p.length === 2) {
        p[0] = p[0].toLowerCase();
        p[1] = p[1].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
      } else if (p.length === 3) {
        p[0] = p[0].toLowerCase();
        if (p[1].length === 2) p[1] = p[1].toUpperCase();
        if (p[0] !== "sgn" && p[2].length === 2) p[2] = p[2].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
      }
      return p.join("-");
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes) return null;
    let found;
    codes.forEach((code) => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach((code) => {
        if (found) return;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find((supportedLng) => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
          if (supportedLng.indexOf("-") > 0 && lngOnly.indexOf("-") < 0 && supportedLng.substring(0, supportedLng.indexOf("-")) === lngOnly) return supportedLng;
          if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === "function") fallbacks = fallbacks(code);
    if (typeof fallbacks === "string") fallbacks = [fallbacks];
    if (Array.isArray(fallbacks)) return fallbacks;
    if (!code) return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = (c2) => {
      if (!c2) return;
      if (this.isSupportedCode(c2)) {
        codes.push(c2);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c2}`);
      }
    };
    if (typeof code === "string" && (code.indexOf("-") > -1 || code.indexOf("_") > -1)) {
      if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code));
      if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code));
    } else if (typeof code === "string") {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach((fc) => {
      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
};
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function(n2) {
    return Number(n2 > 1);
  },
  2: function(n2) {
    return Number(n2 != 1);
  },
  3: function(n2) {
    return 0;
  },
  4: function(n2) {
    return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
  },
  5: function(n2) {
    return Number(n2 == 0 ? 0 : n2 == 1 ? 1 : n2 == 2 ? 2 : n2 % 100 >= 3 && n2 % 100 <= 10 ? 3 : n2 % 100 >= 11 ? 4 : 5);
  },
  6: function(n2) {
    return Number(n2 == 1 ? 0 : n2 >= 2 && n2 <= 4 ? 1 : 2);
  },
  7: function(n2) {
    return Number(n2 == 1 ? 0 : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
  },
  8: function(n2) {
    return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 != 8 && n2 != 11 ? 2 : 3);
  },
  9: function(n2) {
    return Number(n2 >= 2);
  },
  10: function(n2) {
    return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 < 7 ? 2 : n2 < 11 ? 3 : 4);
  },
  11: function(n2) {
    return Number(n2 == 1 || n2 == 11 ? 0 : n2 == 2 || n2 == 12 ? 1 : n2 > 2 && n2 < 20 ? 2 : 3);
  },
  12: function(n2) {
    return Number(n2 % 10 != 1 || n2 % 100 == 11);
  },
  13: function(n2) {
    return Number(n2 !== 0);
  },
  14: function(n2) {
    return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 == 3 ? 2 : 3);
  },
  15: function(n2) {
    return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 % 10 >= 2 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
  },
  16: function(n2) {
    return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 !== 0 ? 1 : 2);
  },
  17: function(n2) {
    return Number(n2 == 1 || n2 % 10 == 1 && n2 % 100 != 11 ? 0 : 1);
  },
  18: function(n2) {
    return Number(n2 == 0 ? 0 : n2 == 1 ? 1 : 2);
  },
  19: function(n2) {
    return Number(n2 == 1 ? 0 : n2 == 0 || n2 % 100 > 1 && n2 % 100 < 11 ? 1 : n2 % 100 > 10 && n2 % 100 < 20 ? 2 : 3);
  },
  20: function(n2) {
    return Number(n2 == 1 ? 0 : n2 == 0 || n2 % 100 > 0 && n2 % 100 < 20 ? 1 : 2);
  },
  21: function(n2) {
    return Number(n2 % 100 == 1 ? 1 : n2 % 100 == 2 ? 2 : n2 % 100 == 3 || n2 % 100 == 4 ? 3 : 0);
  },
  22: function(n2) {
    return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : (n2 < 0 || n2 > 10) && n2 % 10 == 0 ? 2 : 3);
  }
};
var nonIntlVersions = ["v1", "v2", "v3"];
var intlVersions = ["v4"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function createRules() {
  const rules = {};
  sets.forEach((set2) => {
    set2.lngs.forEach((l) => {
      rules[l] = {
        numbers: set2.nr,
        plurals: _rulesPluralsTypes[set2.fc]
      };
    });
  });
  return rules;
}
var PluralResolver = class {
  constructor(languageUtils) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  getRule(code) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.shouldUseIntlApi()) {
      try {
        return new Intl.PluralRules(getCleanedCode(code === "dev" ? "en" : code), {
          type: options2.ordinal ? "ordinal" : "cardinal"
        });
      } catch (err) {
        return;
      }
    }
    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
  }
  needsPlural(code) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options2);
    if (this.shouldUseIntlApi()) {
      return rule && rule.resolvedOptions().pluralCategories.length > 1;
    }
    return rule && rule.numbers.length > 1;
  }
  getPluralFormsOfKey(code, key) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(code, options2).map((suffix) => `${key}${suffix}`);
  }
  getSuffixes(code) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options2);
    if (!rule) {
      return [];
    }
    if (this.shouldUseIntlApi()) {
      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
    }
    return rule.numbers.map((number) => this.getSuffix(code, number, options2));
  }
  getSuffix(code, count2) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const rule = this.getRule(code, options2);
    if (rule) {
      if (this.shouldUseIntlApi()) {
        return `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${rule.select(count2)}`;
      }
      return this.getSuffixRetroCompatible(rule, count2);
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return "";
  }
  getSuffixRetroCompatible(rule, count2) {
    const idx = rule.noAbs ? rule.plurals(count2) : rule.plurals(Math.abs(count2));
    let suffix = rule.numbers[idx];
    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      if (suffix === 2) {
        suffix = "plural";
      } else if (suffix === 1) {
        suffix = "";
      }
    }
    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
    if (this.options.compatibilityJSON === "v1") {
      if (suffix === 1) return "";
      if (typeof suffix === "number") return `_plural_${suffix.toString()}`;
      return returnSuffix();
    } else if (this.options.compatibilityJSON === "v2") {
      return returnSuffix();
    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      return returnSuffix();
    }
    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
  }
  shouldUseIntlApi() {
    return !nonIntlVersions.includes(this.options.compatibilityJSON);
  }
};
function deepFindWithDefaults(data, defaultData, key) {
  let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  let path2 = getPathWithDefaults(data, defaultData, key);
  if (!path2 && ignoreJSONStructure && typeof key === "string") {
    path2 = deepFind(data, key, keySeparator);
    if (path2 === void 0) path2 = deepFind(defaultData, key, keySeparator);
  }
  return path2;
}
var Interpolator = class {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("interpolator");
    this.options = options2;
    this.format = options2.interpolation && options2.interpolation.format || ((value) => value);
    this.init(options2);
  }
  init() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!options2.interpolation) options2.interpolation = {
      escapeValue: true
    };
    const {
      escape: escape$1,
      escapeValue,
      useRawValueToEscape,
      prefix,
      prefixEscaped,
      suffix,
      suffixEscaped,
      formatSeparator,
      unescapeSuffix,
      unescapePrefix,
      nestingPrefix,
      nestingPrefixEscaped,
      nestingSuffix,
      nestingSuffixEscaped,
      nestingOptionsSeparator,
      maxReplaces,
      alwaysFormat
    } = options2.interpolation;
    this.escape = escape$1 !== void 0 ? escape$1 : escape;
    this.escapeValue = escapeValue !== void 0 ? escapeValue : true;
    this.useRawValueToEscape = useRawValueToEscape !== void 0 ? useRawValueToEscape : false;
    this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || "{{";
    this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || "}}";
    this.formatSeparator = formatSeparator || ",";
    this.unescapePrefix = unescapeSuffix ? "" : unescapePrefix || "-";
    this.unescapeSuffix = this.unescapePrefix ? "" : unescapeSuffix || "";
    this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape("$t(");
    this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(")");
    this.nestingOptionsSeparator = nestingOptionsSeparator || ",";
    this.maxReplaces = maxReplaces || 1e3;
    this.alwaysFormat = alwaysFormat !== void 0 ? alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const getOrResetRegExp = (existingRegExp, pattern) => {
      if (existingRegExp && existingRegExp.source === pattern) {
        existingRegExp.lastIndex = 0;
        return existingRegExp;
      }
      return new RegExp(pattern, "g");
    };
    this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
    this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
    this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(str, data, lng, options2) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    function regexSafe(val) {
      return val.replace(/\$/g, "$$$$");
    }
    const handleFormat = (key) => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path2 = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path2, void 0, lng, {
          ...options2,
          ...data,
          interpolationkey: key
        }) : path2;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options2,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options2 && options2.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: (val) => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach((todo) => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === void 0) {
          if (typeof missingInterpolationHandler === "function") {
            const temp = missingInterpolationHandler(str, match, options2);
            value = typeof temp === "string" ? temp : "";
          } else if (options2 && Object.prototype.hasOwnProperty.call(options2, matchedVar)) {
            value = "";
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = "";
          }
        } else if (typeof value !== "string" && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let match;
    let value;
    let clonedOptions;
    function handleHasOptions(key, inheritedOptions) {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c2 = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c2[1]}`;
      key = c2[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e3) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e3);
        return `${key}${sep}${optionsString}`;
      }
      if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
      return key;
    }
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options2
      };
      clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== "string" ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      let doReduce = false;
      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
        const r2 = match[1].split(this.formatSeparator).map((elem) => elem.trim());
        match[1] = r2.shift();
        formatters = r2;
        doReduce = true;
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && typeof value !== "string") return value;
      if (typeof value !== "string") value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = "";
      }
      if (doReduce) {
        value = formatters.reduce((v, f) => this.format(v, f, options2.lng, {
          ...options2,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
};
function parseFormatStr(formatStr) {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    const p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(";");
      opts.forEach((opt) => {
        if (opt) {
          const [key, ...rest] = opt.split(":");
          const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
          const trimmedKey = key.trim();
          if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
          if (val === "false") formatOptions[trimmedKey] = false;
          if (val === "true") formatOptions[trimmedKey] = true;
          if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
        }
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
}
function createCachedFormatter(fn) {
  const cache = {};
  return function invokeFormatter(val, lng, options2) {
    const key = lng + JSON.stringify(options2);
    let formatter = cache[key];
    if (!formatter) {
      formatter = fn(getCleanedCode(lng), options2);
      cache[key] = formatter;
    }
    return formatter(val);
  };
}
var Formatter = class {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("formatter");
    this.options = options2;
    this.formats = {
      number: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      currency: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: "currency"
        });
        return (val) => formatter.format(val);
      }),
      datetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      relativetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val, opt.range || "day");
      }),
      list: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      })
    };
    this.init(options2);
  }
  init(services) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    const iOpts = options2.interpolation;
    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const formats = format.split(this.formatSeparator);
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options2 && options2.formatParams && options2.formatParams[options2.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options2.locale || options2.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options2,
            ...valOptions
          });
        } catch (error2) {
          this.logger.warn(error2);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
};
function removePending(q, name) {
  if (q.pending[name] !== void 0) {
    delete q.pending[name];
    q.pendingCount--;
  }
}
var Connector = class extends EventEmitter {
  constructor(backend, store2, services) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super();
    this.backend = backend;
    this.store = store2;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("backendConnector");
    this.waitingReads = [];
    this.maxParallelReads = options2.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options2.maxRetries >= 0 ? options2.maxRetries : 5;
    this.retryTimeout = options2.retryTimeout >= 1 ? options2.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    if (this.backend && this.backend.init) {
      this.backend.init(services, options2.backend, options2);
    }
  }
  queueLoad(languages, namespaces, options2, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach((lng) => {
      let hasAllNamespaces = true;
      namespaces.forEach((ns2) => {
        const name = `${lng}|${ns2}`;
        if (!options2.reload && this.store.hasResourceBundle(lng, ns2)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0) ;
        else if (this.state[name] === 1) {
          if (pending[name] === void 0) pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === void 0) pending[name] = true;
          if (toLoad[name] === void 0) toLoad[name] = true;
          if (toLoadNamespaces[ns2] === void 0) toLoadNamespaces[ns2] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s3 = name.split("|");
    const lng = s3[0];
    const ns2 = s3[1];
    if (err) this.emit("failedLoading", lng, ns2, err);
    if (data) {
      this.store.addResourceBundle(lng, ns2, data, void 0, void 0, {
        skipCopy: true
      });
    }
    this.state[name] = err ? -1 : 2;
    const loaded = {};
    this.queue.forEach((q) => {
      pushPath(q.loaded, [lng], ns2);
      removePending(q, name);
      if (err) q.errors.push(err);
      if (q.pendingCount === 0 && !q.done) {
        Object.keys(q.loaded).forEach((l) => {
          if (!loaded[l]) loaded[l] = {};
          const loadedKeys = q.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach((n2) => {
              if (loaded[l][n2] === void 0) loaded[l][n2] = true;
            });
          }
        });
        q.done = true;
        if (q.errors.length) {
          q.callback(q.errors);
        } else {
          q.callback();
        }
      }
    });
    this.emit("loaded", loaded);
    this.queue = this.queue.filter((q) => !q.done);
  }
  read(lng, ns2, fcName) {
    let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
    let callback = arguments.length > 5 ? arguments[5] : void 0;
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns: ns2,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns2, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r2 = fc(lng, ns2);
        if (r2 && typeof r2.then === "function") {
          r2.then((data) => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r2);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns2, resolver);
  }
  prepareLoading(languages, namespaces) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let callback = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend) {
      this.logger.warn("No backend was added via i18next.use. Will not load resources.");
      return callback && callback();
    }
    if (typeof languages === "string") languages = this.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === "string") namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options2, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach((name) => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name) {
    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const s3 = name.split("|");
    const lng = s3[0];
    const ns2 = s3[1];
    this.read(lng, ns2, "read", void 0, void 0, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns2} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns2} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
    let options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (key === void 0 || key === null || key === "") return;
    if (this.backend && this.backend.create) {
      const opts = {
        ...options2,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r2;
          if (fc.length === 5) {
            r2 = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r2 = fc(languages, namespace, key, fallbackValue);
          }
          if (r2 && typeof r2.then === "function") {
            r2.then((data) => clb(null, data)).catch(clb);
          } else {
            clb(null, r2);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
};
function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: "all",
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: "fallback",
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: false,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle(args) {
      let ret = {};
      if (typeof args[1] === "object") ret = args[1];
      if (typeof args[1] === "string") ret.defaultValue = args[1];
      if (typeof args[2] === "string") ret.tDescription = args[2];
      if (typeof args[2] === "object" || typeof args[3] === "object") {
        const options2 = args[3] || args[2];
        Object.keys(options2).forEach((key) => {
          ret[key] = options2[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: (value) => value,
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: true
    }
  };
}
function transformOptions(options2) {
  if (typeof options2.ns === "string") options2.ns = [options2.ns];
  if (typeof options2.fallbackLng === "string") options2.fallbackLng = [options2.fallbackLng];
  if (typeof options2.fallbackNS === "string") options2.fallbackNS = [options2.fallbackNS];
  if (options2.supportedLngs && options2.supportedLngs.indexOf("cimode") < 0) {
    options2.supportedLngs = options2.supportedLngs.concat(["cimode"]);
  }
  return options2;
}
function noop() {
}
function bindMemberFunctions(inst) {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach((mem) => {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}
var I18n = class _I18n extends EventEmitter {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    super();
    this.options = transformOptions(options2);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options2.isClone) {
      if (!this.options.initImmediate) {
        this.init(options2, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options2, callback);
      }, 0);
    }
  }
  init() {
    var _this = this;
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    this.isInitializing = true;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    if (!options2.defaultNS && options2.defaultNS !== false && options2.ns) {
      if (typeof options2.ns === "string") {
        options2.defaultNS = options2.ns;
      } else if (options2.ns.indexOf("translation") < 0) {
        options2.defaultNS = options2.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options2)
    };
    if (this.options.compatibilityAPI !== "v1") {
      this.options.interpolation = {
        ...defOpts.interpolation,
        ...this.options.interpolation
      };
    }
    if (options2.keySeparator !== void 0) {
      this.options.userDefinedKeySeparator = options2.keySeparator;
    }
    if (options2.nsSeparator !== void 0) {
      this.options.userDefinedNsSeparator = options2.nsSeparator;
    }
    function createClassOnDemand(ClassOrObject) {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === "function") return new ClassOrObject();
      return ClassOrObject;
    }
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else if (typeof Intl !== "undefined") {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s3 = this.services;
      s3.logger = baseLogger;
      s3.resourceStore = this.store;
      s3.languageUtils = lu;
      s3.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s3.formatter = createClassOnDemand(formatter);
        s3.formatter.init(s3, this.options);
        this.options.interpolation.format = s3.formatter.format.bind(s3.formatter);
      }
      s3.interpolator = new Interpolator(this.options);
      s3.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s3.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s3.resourceStore, s3, this.options);
      s3.backendConnector.on("*", function(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s3.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s3.languageDetector.init) s3.languageDetector.init(s3, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s3.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s3.i18nFormat.init) s3.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on("*", function(event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this.emit(event, ...args);
      });
      this.modules.external.forEach((m) => {
        if (m.init) m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== "dev") this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn("init: no languageDetector is used and no lng is defined");
    }
    const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
    storeApi.forEach((fcName) => {
      this[fcName] = function() {
        return _this.store[fcName](...arguments);
      };
    });
    const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
    storeApiChained.forEach((fcName) => {
      this[fcName] = function() {
        _this.store[fcName](...arguments);
        return _this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t3) => {
        this.isInitializing = false;
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn("init: i18next is already initialized. You should call init just once!");
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log("initialized", this.options);
        this.emit("initialized", this.options);
        deferred.resolve(t3);
        callback(err, t3);
      };
      if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initImmediate) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language) {
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
    let usedCallback = callback;
    const usedLng = typeof language === "string" ? language : this.language;
    if (typeof language === "function") usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng && usedLng.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
      const toLoad = [];
      const append = (lng) => {
        if (!lng) return;
        if (lng === "cimode") return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach((l) => {
          if (l === "cimode") return;
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach((l) => append(l));
      } else {
        append(usedLng);
      }
      if (this.options.preload) {
        this.options.preload.forEach((l) => append(l));
      }
      this.services.backendConnector.load(toLoad, this.options.ns, (e3) => {
        if (!e3 && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e3);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns2, callback) {
    const deferred = defer();
    if (!lngs) lngs = this.languages;
    if (!ns2) ns2 = this.options.ns;
    if (!callback) callback = noop;
    this.services.backendConnector.reload(lngs, ns2, (err) => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module) {
    if (!module) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!module.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    if (module.type === "backend") {
      this.modules.backend = module;
    }
    if (module.type === "logger" || module.log && module.warn && module.error) {
      this.modules.logger = module;
    }
    if (module.type === "languageDetector") {
      this.modules.languageDetector = module;
    }
    if (module.type === "i18nFormat") {
      this.modules.i18nFormat = module;
    }
    if (module.type === "postProcessor") {
      postProcessor.addPostProcessor(module);
    }
    if (module.type === "formatter") {
      this.modules.formatter = module;
    }
    if (module.type === "3rdParty") {
      this.modules.external.push(module);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages) return;
    if (["cimode", "dev"].indexOf(l) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
  }
  changeLanguage(lng, callback) {
    var _this2 = this;
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit("languageChanging", lng);
    const setLngProps = (l) => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = void 0;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        setLngProps(l);
        this.translator.changeLanguage(l);
        this.isLanguageChangingTo = void 0;
        this.emit("languageChanged", l);
        this.logger.log("languageChanged", l);
      } else {
        this.isLanguageChangingTo = void 0;
      }
      deferred.resolve(function() {
        return _this2.t(...arguments);
      });
      if (callback) callback(err, function() {
        return _this2.t(...arguments);
      });
    };
    const setLng = (lngs) => {
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const l = typeof lngs === "string" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language) this.translator.changeLanguage(l);
        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);
      }
      this.loadResources(l, (err) => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns2, keyPrefix) {
    var _this3 = this;
    const fixedT = function(key, opts) {
      let options2;
      if (typeof opts !== "object") {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          rest[_key3 - 2] = arguments[_key3];
        }
        options2 = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        options2 = {
          ...opts
        };
      }
      options2.lng = options2.lng || fixedT.lng;
      options2.lngs = options2.lngs || fixedT.lngs;
      options2.ns = options2.ns || fixedT.ns;
      options2.keyPrefix = options2.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = _this3.options.keySeparator || ".";
      let resultKey;
      if (options2.keyPrefix && Array.isArray(key)) {
        resultKey = key.map((k) => `${options2.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = options2.keyPrefix ? `${options2.keyPrefix}${keySeparator}${key}` : key;
      }
      return _this3.t(resultKey, options2);
    };
    if (typeof lng === "string") {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns2;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(ns2) {
    this.options.defaultNS = ns2;
  }
  hasLoadedNamespace(ns2) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized) {
      this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
      return false;
    }
    const lng = options2.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === "cimode") return true;
    const loadNotPending = (l, n2) => {
      const loadState = this.services.backendConnector.state[`${l}|${n2}`];
      return loadState === -1 || loadState === 2;
    };
    if (options2.precheck) {
      const preResult = options2.precheck(this, loadNotPending);
      if (preResult !== void 0) return preResult;
    }
    if (this.hasResourceBundle(lng, ns2)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns2) && (!fallbackLng || loadNotPending(lastLng, ns2))) return true;
    return false;
  }
  loadNamespaces(ns2, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (typeof ns2 === "string") ns2 = [ns2];
    ns2.forEach((n2) => {
      if (this.options.ns.indexOf(n2) < 0) this.options.ns.push(n2);
    });
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (typeof lngs === "string") lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
    if (!lng) return "rtl";
    const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    return new _I18n(options2, callback);
  }
  cloneInstance() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
    const forkResourceStore = options2.forkResourceStore;
    if (forkResourceStore) delete options2.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options2,
      ...{
        isClone: true
      }
    };
    const clone = new _I18n(mergedOptions);
    if (options2.debug !== void 0 || options2.prefix !== void 0) {
      clone.logger = clone.logger.clone(options2);
    }
    const membersToCopy = ["store", "services", "language"];
    membersToCopy.forEach((m) => {
      clone[m] = this[m];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      clone.store = new ResourceStore(this.store.data, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on("*", function(event) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
};
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var dir = instance.dir;
var init = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t2 = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace2 = instance.hasLoadedNamespace;
var loadNamespaces2 = instance.loadNamespaces;
var loadLanguages2 = instance.loadLanguages;

// node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js
var {
  slice,
  forEach
} = [];
function defaults(obj) {
  forEach.call(slice.call(arguments, 1), (source) => {
    if (source) {
      for (const prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
  });
  return obj;
}
var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
var serializeCookie = (name, val, options2) => {
  const opt = options2 || {};
  opt.path = opt.path || "/";
  const value = encodeURIComponent(val);
  let str = `${name}=${value}`;
  if (opt.maxAge > 0) {
    const maxAge = opt.maxAge - 0;
    if (Number.isNaN(maxAge)) throw new Error("maxAge should be a Number");
    str += `; Max-Age=${Math.floor(maxAge)}`;
  }
  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError("option domain is invalid");
    }
    str += `; Domain=${opt.domain}`;
  }
  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError("option path is invalid");
    }
    str += `; Path=${opt.path}`;
  }
  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== "function") {
      throw new TypeError("option expires is invalid");
    }
    str += `; Expires=${opt.expires.toUTCString()}`;
  }
  if (opt.httpOnly) str += "; HttpOnly";
  if (opt.secure) str += "; Secure";
  if (opt.sameSite) {
    const sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
    switch (sameSite) {
      case true:
        str += "; SameSite=Strict";
        break;
      case "lax":
        str += "; SameSite=Lax";
        break;
      case "strict":
        str += "; SameSite=Strict";
        break;
      case "none":
        str += "; SameSite=None";
        break;
      default:
        throw new TypeError("option sameSite is invalid");
    }
  }
  return str;
};
var cookie = {
  create(name, value, minutes, domain) {
    let cookieOptions = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      path: "/",
      sameSite: "strict"
    };
    if (minutes) {
      cookieOptions.expires = /* @__PURE__ */ new Date();
      cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1e3);
    }
    if (domain) cookieOptions.domain = domain;
    document.cookie = serializeCookie(name, encodeURIComponent(value), cookieOptions);
  },
  read(name) {
    const nameEQ = `${name}=`;
    const ca = document.cookie.split(";");
    for (let i2 = 0; i2 < ca.length; i2++) {
      let c2 = ca[i2];
      while (c2.charAt(0) === " ") c2 = c2.substring(1, c2.length);
      if (c2.indexOf(nameEQ) === 0) return c2.substring(nameEQ.length, c2.length);
    }
    return null;
  },
  remove(name) {
    this.create(name, "", -1);
  }
};
var cookie$1 = {
  name: "cookie",
  // Deconstruct the options object and extract the lookupCookie property
  lookup(_ref) {
    let {
      lookupCookie
    } = _ref;
    if (lookupCookie && typeof document !== "undefined") {
      return cookie.read(lookupCookie) || void 0;
    }
    return void 0;
  },
  // Deconstruct the options object and extract the lookupCookie, cookieMinutes, cookieDomain, and cookieOptions properties
  cacheUserLanguage(lng, _ref2) {
    let {
      lookupCookie,
      cookieMinutes,
      cookieDomain,
      cookieOptions
    } = _ref2;
    if (lookupCookie && typeof document !== "undefined") {
      cookie.create(lookupCookie, lng, cookieMinutes, cookieDomain, cookieOptions);
    }
  }
};
var querystring = {
  name: "querystring",
  // Deconstruct the options object and extract the lookupQuerystring property
  lookup(_ref) {
    let {
      lookupQuerystring
    } = _ref;
    let found;
    if (typeof window !== "undefined") {
      let {
        search
      } = window.location;
      if (!window.location.search && window.location.hash?.indexOf("?") > -1) {
        search = window.location.hash.substring(window.location.hash.indexOf("?"));
      }
      const query = search.substring(1);
      const params = query.split("&");
      for (let i2 = 0; i2 < params.length; i2++) {
        const pos = params[i2].indexOf("=");
        if (pos > 0) {
          const key = params[i2].substring(0, pos);
          if (key === lookupQuerystring) {
            found = params[i2].substring(pos + 1);
          }
        }
      }
    }
    return found;
  }
};
var hasLocalStorageSupport = null;
var localStorageAvailable = () => {
  if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;
  try {
    hasLocalStorageSupport = window !== "undefined" && window.localStorage !== null;
    const testKey = "i18next.translate.boo";
    window.localStorage.setItem(testKey, "foo");
    window.localStorage.removeItem(testKey);
  } catch (e3) {
    hasLocalStorageSupport = false;
  }
  return hasLocalStorageSupport;
};
var localStorage2 = {
  name: "localStorage",
  // Deconstruct the options object and extract the lookupLocalStorage property
  lookup(_ref) {
    let {
      lookupLocalStorage
    } = _ref;
    if (lookupLocalStorage && localStorageAvailable()) {
      return window.localStorage.getItem(lookupLocalStorage) || void 0;
    }
    return void 0;
  },
  // Deconstruct the options object and extract the lookupLocalStorage property
  cacheUserLanguage(lng, _ref2) {
    let {
      lookupLocalStorage
    } = _ref2;
    if (lookupLocalStorage && localStorageAvailable()) {
      window.localStorage.setItem(lookupLocalStorage, lng);
    }
  }
};
var hasSessionStorageSupport = null;
var sessionStorageAvailable = () => {
  if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;
  try {
    hasSessionStorageSupport = window !== "undefined" && window.sessionStorage !== null;
    const testKey = "i18next.translate.boo";
    window.sessionStorage.setItem(testKey, "foo");
    window.sessionStorage.removeItem(testKey);
  } catch (e3) {
    hasSessionStorageSupport = false;
  }
  return hasSessionStorageSupport;
};
var sessionStorage = {
  name: "sessionStorage",
  lookup(_ref) {
    let {
      lookupSessionStorage
    } = _ref;
    if (lookupSessionStorage && sessionStorageAvailable()) {
      return window.sessionStorage.getItem(lookupSessionStorage) || void 0;
    }
    return void 0;
  },
  cacheUserLanguage(lng, _ref2) {
    let {
      lookupSessionStorage
    } = _ref2;
    if (lookupSessionStorage && sessionStorageAvailable()) {
      window.sessionStorage.setItem(lookupSessionStorage, lng);
    }
  }
};
var navigator$1 = {
  name: "navigator",
  lookup(options2) {
    const found = [];
    if (typeof navigator !== "undefined") {
      const {
        languages,
        userLanguage,
        language
      } = navigator;
      if (languages) {
        for (let i2 = 0; i2 < languages.length; i2++) {
          found.push(languages[i2]);
        }
      }
      if (userLanguage) {
        found.push(userLanguage);
      }
      if (language) {
        found.push(language);
      }
    }
    return found.length > 0 ? found : void 0;
  }
};
var htmlTag = {
  name: "htmlTag",
  // Deconstruct the options object and extract the htmlTag property
  lookup(_ref) {
    let {
      htmlTag: htmlTag2
    } = _ref;
    let found;
    const internalHtmlTag = htmlTag2 || (typeof document !== "undefined" ? document.documentElement : null);
    if (internalHtmlTag && typeof internalHtmlTag.getAttribute === "function") {
      found = internalHtmlTag.getAttribute("lang");
    }
    return found;
  }
};
var path = {
  name: "path",
  // Deconstruct the options object and extract the lookupFromPathIndex property
  lookup(_ref) {
    let {
      lookupFromPathIndex
    } = _ref;
    if (typeof window === "undefined") return void 0;
    const language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
    if (!Array.isArray(language)) return void 0;
    const index3 = typeof lookupFromPathIndex === "number" ? lookupFromPathIndex : 0;
    return language[index3]?.replace("/", "");
  }
};
var subdomain = {
  name: "subdomain",
  lookup(_ref) {
    let {
      lookupFromSubdomainIndex
    } = _ref;
    const internalLookupFromSubdomainIndex = typeof lookupFromSubdomainIndex === "number" ? lookupFromSubdomainIndex + 1 : 1;
    const language = typeof window !== "undefined" && window.location?.hostname?.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);
    if (!language) return void 0;
    return language[internalLookupFromSubdomainIndex];
  }
};
function getDefaults2() {
  return {
    order: ["querystring", "cookie", "localStorage", "sessionStorage", "navigator", "htmlTag"],
    lookupQuerystring: "lng",
    lookupCookie: "i18next",
    lookupLocalStorage: "i18nextLng",
    lookupSessionStorage: "i18nextLng",
    // cache user language
    caches: ["localStorage"],
    excludeCacheFor: ["cimode"],
    // cookieMinutes: 10,
    // cookieDomain: 'myDomain'
    convertDetectedLanguage: (l) => l
  };
}
var Browser = class {
  constructor(services) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.type = "languageDetector";
    this.detectors = {};
    this.init(services, options2);
  }
  init(services) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let i18nOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    this.services = services || {
      languageUtils: {}
    };
    this.options = defaults(options2, this.options || {}, getDefaults2());
    if (typeof this.options.convertDetectedLanguage === "string" && this.options.convertDetectedLanguage.indexOf("15897") > -1) {
      this.options.convertDetectedLanguage = (l) => l.replace("-", "_");
    }
    if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
    this.i18nOptions = i18nOptions;
    this.addDetector(cookie$1);
    this.addDetector(querystring);
    this.addDetector(localStorage2);
    this.addDetector(sessionStorage);
    this.addDetector(navigator$1);
    this.addDetector(htmlTag);
    this.addDetector(path);
    this.addDetector(subdomain);
  }
  addDetector(detector) {
    this.detectors[detector.name] = detector;
    return this;
  }
  detect(detectionOrder) {
    if (!detectionOrder) detectionOrder = this.options.order;
    let detected = [];
    detectionOrder.forEach((detectorName) => {
      if (this.detectors[detectorName]) {
        let lookup = this.detectors[detectorName].lookup(this.options);
        if (lookup && typeof lookup === "string") lookup = [lookup];
        if (lookup) detected = detected.concat(lookup);
      }
    });
    detected = detected.map((d) => this.options.convertDetectedLanguage(d));
    if (this.services.languageUtils.getBestMatchFromCodes) return detected;
    return detected.length > 0 ? detected[0] : null;
  }
  cacheUserLanguage(lng, caches) {
    if (!caches) caches = this.options.caches;
    if (!caches) return;
    if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;
    caches.forEach((cacheName) => {
      if (this.detectors[cacheName]) this.detectors[cacheName].cacheUserLanguage(lng, this.options);
    });
  }
};
Browser.type = "languageDetector";

// node_modules/@howso/react-tailwind-flowbite-components/lib/index.esm.js
import { jsx as jsx113, jsxs as jsxs48, Fragment as Fragment19 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Accordion/Accordion.mjs
import { jsx as jsx4 } from "react/jsx-runtime";
import { useState as useState3, useMemo as useMemo2, Children as Children2, cloneElement as cloneElement2 } from "react";

// node_modules/react-icons/lib/iconBase.mjs
import React2 from "react";

// node_modules/react-icons/lib/iconContext.mjs
import React from "react";
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = React.createContext && /* @__PURE__ */ React.createContext(DefaultContext);

// node_modules/react-icons/lib/iconBase.mjs
var _excluded = ["attr", "size", "title"];
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key = sourceSymbolKeys[i2];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  for (var key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function ownKeys(e3, r2) {
  var t3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e3);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t3.push.apply(t3, o);
  }
  return t3;
}
function _objectSpread(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t3 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t3), true).forEach(function(r3) {
      _defineProperty(e3, r3, t3[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t3)) : ownKeys(Object(t3)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t3, r3));
    });
  }
  return e3;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(t3) {
  var i2 = _toPrimitive(t3, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _toPrimitive(t3, r2) {
  if ("object" != typeof t3 || !t3) return t3;
  var e3 = t3[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t3, r2 || "default");
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t3);
}
function Tree2Element(tree) {
  return tree && tree.map((node, i2) => /* @__PURE__ */ React2.createElement(node.tag, _objectSpread({
    key: i2
  }, node.attr), Tree2Element(node.child)));
}
function GenIcon(data) {
  return (props) => /* @__PURE__ */ React2.createElement(IconBase, _extends({
    attr: _objectSpread({}, data.attr)
  }, props), Tree2Element(data.child));
}
function IconBase(props) {
  var elem = (conf) => {
    var {
      attr: attr2,
      size: size4,
      title
    } = props, svgProps = _objectWithoutProperties(props, _excluded);
    var computedSize = size4 || conf.size || "1em";
    var className;
    if (conf.className) className = conf.className;
    if (props.className) className = (className ? className + " " : "") + props.className;
    return /* @__PURE__ */ React2.createElement("svg", _extends({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr2, svgProps, {
      className,
      style: _objectSpread(_objectSpread({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && /* @__PURE__ */ React2.createElement("title", null, title), props.children);
  };
  return IconContext !== void 0 ? /* @__PURE__ */ React2.createElement(IconContext.Consumer, null, (conf) => elem(conf)) : elem(DefaultContext);
}

// node_modules/react-icons/hi/index.mjs
function HiArrowLeft(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiArrowRight(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiCalendar(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiChevronDown(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiChevronLeft(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiChevronRight(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiExclamation(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiExternalLink(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "d": "M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" }, "child": [] }, { "tag": "path", "attr": { "d": "M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" }, "child": [] }] })(props);
}
function HiMap(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiMoon(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "d": "M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" }, "child": [] }] })(props);
}
function HiRefresh(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiStar(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "d": "M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" }, "child": [] }] })(props);
}
function HiSun(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiX(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z", "clipRule": "evenodd" }, "child": [] }] })(props);
}
function HiOutlineChevronDown(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "none", "viewBox": "0 0 24 24", "strokeWidth": "2", "stroke": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "strokeLinecap": "round", "strokeLinejoin": "round", "d": "M19 9l-7 7-7-7" }, "child": [] }] })(props);
}
function HiOutlineChevronLeft(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "none", "viewBox": "0 0 24 24", "strokeWidth": "2", "stroke": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "strokeLinecap": "round", "strokeLinejoin": "round", "d": "M15 19l-7-7 7-7" }, "child": [] }] })(props);
}
function HiOutlineChevronRight(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "none", "viewBox": "0 0 24 24", "strokeWidth": "2", "stroke": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "strokeLinecap": "round", "strokeLinejoin": "round", "d": "M9 5l7 7-7 7" }, "child": [] }] })(props);
}
function HiOutlineChevronUp(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "none", "viewBox": "0 0 24 24", "strokeWidth": "2", "stroke": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "strokeLinecap": "round", "strokeLinejoin": "round", "d": "M5 15l7-7 7 7" }, "child": [] }] })(props);
}
function HiOutlineX(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "none", "viewBox": "0 0 24 24", "strokeWidth": "2", "stroke": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "strokeLinecap": "round", "strokeLinejoin": "round", "d": "M6 18L18 6M6 6l12 12" }, "child": [] }] })(props);
}

// node_modules/tailwind-merge/dist/bundle-mjs.mjs
var CLASS_PART_SEPARATOR = "-";
function createClassUtils(config) {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  function getClassGroupId(className) {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return classPartObject.validators.find(({
    validator
  }) => validator(classRest))?.classGroupId;
}
var arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap(config) {
  const {
    theme: theme4,
    prefix
  } = config;
  const classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme4);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme4) {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme4), classPartObject, classGroupId, theme4);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup2]) => {
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme4);
    });
  });
}
function getPart(classPartObject, path2) {
  let currentClassPartObject = classPartObject;
  path2.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map((classDefinition) => {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: () => void 0,
      set: () => {
      }
    };
  }
  let cacheSize = 0;
  let cache = /* @__PURE__ */ new Map();
  let previousCache = /* @__PURE__ */ new Map();
  function update(key, value) {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  }
  return {
    get(key) {
      let value = cache.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
}
var IMPORTANT_MODIFIER = "!";
function createSplitModifiers(config) {
  const separator = config.separator;
  const isSeparatorSingleCharacter = separator.length === 1;
  const firstSeparatorCharacter = separator[0];
  const separatorLength = separator.length;
  return function splitModifiers(className) {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index3 = 0; index3 < className.length; index3++) {
      let currentCharacter = className[index3];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index3, index3 + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index3));
          modifierStart = index3 + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index3;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
function sortModifiers(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach((modifier) => {
    const isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
}
function createConfigUtils(config) {
  return {
    cache: createLruCache(config.cacheSize),
    splitModifiers: createSplitModifiers(config),
    ...createClassUtils(config)
  };
}
var SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
  const {
    splitModifiers,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  const classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map((originalClassName) => {
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = splitModifiers(originalClassName);
    let classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter((parsed) => {
    if (!parsed.isTailwindClass) {
      return true;
    }
    const {
      modifierId,
      classGroupId,
      hasPostfixModifier
    } = parsed;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach((group) => classGroupsInConflict.add(modifierId + group));
    return true;
  }).reverse().map((parsed) => parsed.originalClassName).join(" ");
}
function twJoin() {
  let index3 = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index3 < arguments.length) {
    if (argument = arguments[index3++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if (resolvedValue = toValue(mix[k])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
function fromTheme(key) {
  const themeGetter = (theme4) => theme4[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
}
var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
var shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
function isLength(value) {
  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, "length", isLengthOnly);
}
function isNumber(value) {
  return Boolean(value) && !Number.isNaN(Number(value));
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, "number", isNumber);
}
function isInteger(value) {
  return Boolean(value) && Number.isInteger(Number(value));
}
function isPercent(value) {
  return value.endsWith("%") && isNumber(value.slice(0, -1));
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
var sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, sizeLabels, isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, "position", isNever);
}
var imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
function isArbitraryImage(value) {
  return getIsArbitraryValue(value, imageLabels, isImage);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, "", isShadow);
}
function isAny() {
  return true;
}
function getIsArbitraryValue(value, label, testValue) {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === "string" ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  return lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
}
function isNever() {
  return false;
}
function isShadow(value) {
  return shadowRegex.test(value);
}
function isImage(value) {
  return imageRegex.test(value);
}
function getDefaultConfig() {
  const colors = fromTheme("colors");
  const spacing = fromTheme("spacing");
  const blur = fromTheme("blur");
  const brightness = fromTheme("brightness");
  const borderColor = fromTheme("borderColor");
  const borderRadius = fromTheme("borderRadius");
  const borderSpacing = fromTheme("borderSpacing");
  const borderWidth = fromTheme("borderWidth");
  const contrast = fromTheme("contrast");
  const grayscale = fromTheme("grayscale");
  const hueRotate = fromTheme("hueRotate");
  const invert = fromTheme("invert");
  const gap = fromTheme("gap");
  const gradientColorStops = fromTheme("gradientColorStops");
  const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  const inset = fromTheme("inset");
  const margin = fromTheme("margin");
  const opacity = fromTheme("opacity");
  const padding = fromTheme("padding");
  const saturate = fromTheme("saturate");
  const scale = fromTheme("scale");
  const sepia = fromTheme("sepia");
  const skew = fromTheme("skew");
  const space = fromTheme("space");
  const translate = fromTheme("translate");
  const getOverscroll = () => ["auto", "contain", "none"];
  const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
  const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
  const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
  const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
  const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  const getNumber = () => [isNumber, isArbitraryNumber];
  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [isAny],
      spacing: [isLength, isArbitraryLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...getAlign(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...getAlign(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...getLineStyles(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isLength, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...getLineStyles(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isLength, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}
var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);

// node_modules/flowbite-react/dist/esm/helpers/is-object.mjs
function isObject(item) {
  return item !== null && typeof item === "object" && item.constructor === Object;
}

// node_modules/flowbite-react/dist/esm/helpers/clone-deep.mjs
function cloneDeep(source) {
  if (!isObject(source)) {
    return source;
  }
  const output = {};
  for (const key in source) {
    output[key] = cloneDeep(source[key]);
  }
  return output;
}

// node_modules/flowbite-react/dist/esm/helpers/merge-deep.mjs
function mergeDeep(target, source) {
  if (isObject(source) && Object.keys(source).length === 0) {
    return cloneDeep({ ...target, ...source });
  }
  const output = { ...target, ...source };
  if (isObject(source) && isObject(target)) {
    for (const key in source) {
      if (isObject(source[key]) && key in target && isObject(target[key])) {
        output[key] = mergeDeep(target[key], source[key]);
      } else {
        output[key] = isObject(source[key]) ? cloneDeep(source[key]) : source[key];
      }
    }
  }
  return output;
}

// node_modules/flowbite-react/dist/esm/helpers/create-theme.mjs
function createTheme(input) {
  return input;
}

// node_modules/flowbite-react/dist/esm/components/Accordion/theme.mjs
var accordionTheme = createTheme({
  root: {
    base: "divide-y divide-gray-200 border-gray-200 dark:divide-gray-700 dark:border-gray-700",
    flush: {
      off: "rounded-lg border",
      on: "border-b"
    }
  },
  content: {
    base: "p-5 first:rounded-t-lg last:rounded-b-lg dark:bg-gray-900"
  },
  title: {
    arrow: {
      base: "h-6 w-6 shrink-0",
      open: {
        off: "",
        on: "rotate-180"
      }
    },
    base: "flex w-full items-center justify-between p-5 text-left font-medium text-gray-500 first:rounded-t-lg last:rounded-b-lg dark:text-gray-400",
    flush: {
      off: "hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:hover:bg-gray-800 dark:focus:ring-gray-800",
      on: "bg-transparent dark:bg-transparent"
    },
    heading: "",
    open: {
      off: "",
      on: "bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-white"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Alert/theme.mjs
var alertTheme = createTheme({
  base: "flex flex-col gap-2 p-4 text-sm",
  borderAccent: "border-t-4",
  closeButton: {
    base: "-m-1.5 ml-auto inline-flex h-8 w-8 rounded-lg p-1.5 focus:ring-2",
    icon: "h-5 w-5",
    color: {
      info: "bg-cyan-100 text-cyan-500 hover:bg-cyan-200 focus:ring-cyan-400 dark:bg-cyan-200 dark:text-cyan-600 dark:hover:bg-cyan-300",
      gray: "bg-gray-100 text-gray-500 hover:bg-gray-200 focus:ring-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white",
      failure: "bg-red-100 text-red-500 hover:bg-red-200 focus:ring-red-400 dark:bg-red-200 dark:text-red-600 dark:hover:bg-red-300",
      success: "bg-green-100 text-green-500 hover:bg-green-200 focus:ring-green-400 dark:bg-green-200 dark:text-green-600 dark:hover:bg-green-300",
      warning: "bg-yellow-100 text-yellow-500 hover:bg-yellow-200 focus:ring-yellow-400 dark:bg-yellow-200 dark:text-yellow-600 dark:hover:bg-yellow-300",
      red: "bg-red-100 text-red-500 hover:bg-red-200 focus:ring-red-400 dark:bg-red-200 dark:text-red-600 dark:hover:bg-red-300",
      green: "bg-green-100 text-green-500 hover:bg-green-200 focus:ring-green-400 dark:bg-green-200 dark:text-green-600 dark:hover:bg-green-300",
      yellow: "bg-yellow-100 text-yellow-500 hover:bg-yellow-200 focus:ring-yellow-400 dark:bg-yellow-200 dark:text-yellow-600 dark:hover:bg-yellow-300",
      blue: "bg-blue-100 text-blue-500 hover:bg-blue-200 focus:ring-blue-400 dark:bg-blue-200 dark:text-blue-600 dark:hover:bg-blue-300",
      cyan: "bg-cyan-100 text-cyan-500 hover:bg-cyan-200 focus:ring-cyan-400 dark:bg-cyan-200 dark:text-cyan-600 dark:hover:bg-cyan-300",
      pink: "bg-pink-100 text-pink-500 hover:bg-pink-200 focus:ring-pink-400 dark:bg-pink-200 dark:text-pink-600 dark:hover:bg-pink-300",
      lime: "bg-lime-100 text-lime-500 hover:bg-lime-200 focus:ring-lime-400 dark:bg-lime-200 dark:text-lime-600 dark:hover:bg-lime-300",
      dark: "bg-gray-100 text-gray-500 hover:bg-gray-200 focus:ring-gray-400 dark:bg-gray-200 dark:text-gray-600 dark:hover:bg-gray-300",
      indigo: "bg-indigo-100 text-indigo-500 hover:bg-indigo-200 focus:ring-indigo-400 dark:bg-indigo-200 dark:text-indigo-600 dark:hover:bg-indigo-300",
      purple: "bg-purple-100 text-purple-500 hover:bg-purple-200 focus:ring-purple-400 dark:bg-purple-200 dark:text-purple-600 dark:hover:bg-purple-300",
      teal: "bg-teal-100 text-teal-500 hover:bg-teal-200 focus:ring-teal-400 dark:bg-teal-200 dark:text-teal-600 dark:hover:bg-teal-300",
      light: "bg-gray-50 text-gray-500 hover:bg-gray-100 focus:ring-gray-200 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-700 dark:hover:text-white"
    }
  },
  color: {
    info: "border-cyan-500 bg-cyan-100 text-cyan-700 dark:bg-cyan-200 dark:text-cyan-800",
    gray: "border-gray-500 bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300",
    failure: "border-red-500 bg-red-100 text-red-700 dark:bg-red-200 dark:text-red-800",
    success: "border-green-500 bg-green-100 text-green-700 dark:bg-green-200 dark:text-green-800",
    warning: "border-yellow-500 bg-yellow-100 text-yellow-700 dark:bg-yellow-200 dark:text-yellow-800",
    red: "border-red-500 bg-red-100 text-red-700 dark:bg-red-200 dark:text-red-800",
    green: "border-green-500 bg-green-100 text-green-700 dark:bg-green-200 dark:text-green-800",
    yellow: "border-yellow-500 bg-yellow-100 text-yellow-700 dark:bg-yellow-200 dark:text-yellow-800",
    blue: "border-blue-500 bg-blue-100 text-blue-700 dark:bg-blue-200 dark:text-blue-800",
    cyan: "border-cyan-500 bg-cyan-100 text-cyan-700 dark:bg-cyan-200 dark:text-cyan-800",
    pink: "border-pink-500 bg-pink-100 text-pink-700 dark:bg-pink-200 dark:text-pink-800",
    lime: "border-lime-500 bg-lime-100 text-lime-700 dark:bg-lime-200 dark:text-lime-800",
    dark: "border-gray-600 bg-gray-800 text-gray-200 dark:bg-gray-900 dark:text-gray-300",
    indigo: "border-indigo-500 bg-indigo-100 text-indigo-700 dark:bg-indigo-200 dark:text-indigo-800",
    purple: "border-purple-500 bg-purple-100 text-purple-700 dark:bg-purple-200 dark:text-purple-800",
    teal: "border-teal-500 bg-teal-100 text-teal-700 dark:bg-teal-200 dark:text-teal-800",
    light: "border-gray-400 bg-gray-50 text-gray-600 dark:bg-gray-500 dark:text-gray-200"
  },
  icon: "mr-3 inline h-5 w-5 flex-shrink-0",
  rounded: "rounded-lg",
  wrapper: "flex items-center"
});

// node_modules/flowbite-react/dist/esm/components/Avatar/theme.mjs
var avatarTheme = createTheme({
  root: {
    base: "flex items-center justify-center space-x-4 rounded",
    bordered: "p-1 ring-2",
    rounded: "rounded-full",
    color: {
      dark: "ring-gray-800 dark:ring-gray-800",
      failure: "ring-red-500 dark:ring-red-700",
      gray: "ring-gray-500 dark:ring-gray-400",
      info: "ring-cyan-400 dark:ring-cyan-800",
      light: "ring-gray-300 dark:ring-gray-500",
      purple: "ring-purple-500 dark:ring-purple-600",
      success: "ring-green-500 dark:ring-green-500",
      warning: "ring-yellow-300 dark:ring-yellow-500",
      pink: "ring-pink-500 dark:ring-pink-500"
    },
    img: {
      base: "rounded",
      off: "relative overflow-hidden bg-gray-100 dark:bg-gray-600",
      on: "",
      placeholder: "absolute -bottom-1 h-auto w-auto text-gray-400"
    },
    size: {
      xs: "h-6 w-6",
      sm: "h-8 w-8",
      md: "h-10 w-10",
      lg: "h-20 w-20",
      xl: "h-36 w-36"
    },
    stacked: "ring-2 ring-gray-300 dark:ring-gray-500",
    statusPosition: {
      "bottom-left": "-bottom-1 -left-1",
      "bottom-center": "-bottom-1",
      "bottom-right": "-bottom-1 -right-1",
      "top-left": "-left-1 -top-1",
      "top-center": "-top-1",
      "top-right": "-right-1 -top-1",
      "center-right": "-right-1",
      center: "",
      "center-left": "-left-1"
    },
    status: {
      away: "bg-yellow-400",
      base: "absolute h-3.5 w-3.5 rounded-full border-2 border-white dark:border-gray-800",
      busy: "bg-red-400",
      offline: "bg-gray-400",
      online: "bg-green-400"
    },
    initials: {
      text: "font-medium text-gray-600 dark:text-gray-300",
      base: "relative inline-flex items-center justify-center overflow-hidden bg-gray-100 dark:bg-gray-600"
    }
  },
  group: {
    base: "flex -space-x-4"
  },
  groupCounter: {
    base: "relative flex h-10 w-10 items-center justify-center rounded-full bg-gray-700 text-xs font-medium text-white ring-2 ring-gray-300 hover:bg-gray-600 dark:ring-gray-500"
  }
});

// node_modules/flowbite-react/dist/esm/components/Badge/theme.mjs
var badgeTheme = createTheme({
  root: {
    base: "flex h-fit items-center gap-1 font-semibold",
    color: {
      info: "bg-cyan-100 text-cyan-800 group-hover:bg-cyan-200 dark:bg-cyan-200 dark:text-cyan-800 dark:group-hover:bg-cyan-300",
      gray: "bg-gray-100 text-gray-800 group-hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:group-hover:bg-gray-600",
      failure: "bg-red-100 text-red-800 group-hover:bg-red-200 dark:bg-red-200 dark:text-red-900 dark:group-hover:bg-red-300",
      success: "bg-green-100 text-green-800 group-hover:bg-green-200 dark:bg-green-200 dark:text-green-900 dark:group-hover:bg-green-300",
      warning: "bg-yellow-100 text-yellow-800 group-hover:bg-yellow-200 dark:bg-yellow-200 dark:text-yellow-900 dark:group-hover:bg-yellow-300",
      indigo: "bg-indigo-100 text-indigo-800 group-hover:bg-indigo-200 dark:bg-indigo-200 dark:text-indigo-900 dark:group-hover:bg-indigo-300",
      purple: "bg-purple-100 text-purple-800 group-hover:bg-purple-200 dark:bg-purple-200 dark:text-purple-900 dark:group-hover:bg-purple-300",
      pink: "bg-pink-100 text-pink-800 group-hover:bg-pink-200 dark:bg-pink-200 dark:text-pink-900 dark:group-hover:bg-pink-300",
      blue: "bg-blue-100 text-blue-800 group-hover:bg-blue-200 dark:bg-blue-200 dark:text-blue-900 dark:group-hover:bg-blue-300",
      cyan: "bg-cyan-100 text-cyan-800 group-hover:bg-cyan-200 dark:bg-cyan-200 dark:text-cyan-900 dark:group-hover:bg-cyan-300",
      dark: "bg-gray-600 text-gray-100 group-hover:bg-gray-500 dark:bg-gray-900 dark:text-gray-200 dark:group-hover:bg-gray-700",
      light: "bg-gray-200 text-gray-800 group-hover:bg-gray-300 dark:bg-gray-400 dark:text-gray-900 dark:group-hover:bg-gray-500",
      green: "bg-green-100 text-green-800 group-hover:bg-green-200 dark:bg-green-200 dark:text-green-900 dark:group-hover:bg-green-300",
      lime: "bg-lime-100 text-lime-800 group-hover:bg-lime-200 dark:bg-lime-200 dark:text-lime-900 dark:group-hover:bg-lime-300",
      red: "bg-red-100 text-red-800 group-hover:bg-red-200 dark:bg-red-200 dark:text-red-900 dark:group-hover:bg-red-300",
      teal: "bg-teal-100 text-teal-800 group-hover:bg-teal-200 dark:bg-teal-200 dark:text-teal-900 dark:group-hover:bg-teal-300",
      yellow: "bg-yellow-100 text-yellow-800 group-hover:bg-yellow-200 dark:bg-yellow-200 dark:text-yellow-900 dark:group-hover:bg-yellow-300"
    },
    href: "group",
    size: {
      xs: "p-1 text-xs",
      sm: "p-1.5 text-sm"
    }
  },
  icon: {
    off: "rounded px-2 py-0.5",
    on: "rounded-full p-1.5",
    size: {
      xs: "h-3 w-3",
      sm: "h-3.5 w-3.5"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Blockquote/theme.mjs
var blockquoteTheme = createTheme({
  root: {
    base: "text-xl font-semibold italic text-gray-900 dark:text-white"
  }
});

// node_modules/flowbite-react/dist/esm/components/Breadcrumb/theme.mjs
var breadcrumbTheme = createTheme({
  root: {
    base: "",
    list: "flex items-center"
  },
  item: {
    base: "group flex items-center",
    chevron: "mx-1 h-4 w-4 text-gray-400 group-first:hidden md:mx-2",
    href: {
      off: "flex items-center text-sm font-medium text-gray-500 dark:text-gray-400",
      on: "flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
    },
    icon: "mr-2 h-4 w-4"
  }
});

// node_modules/flowbite-react/dist/esm/components/Button/theme.mjs
var buttonTheme = createTheme({
  base: "group relative flex items-stretch justify-center p-0.5 text-center font-medium transition-[color,background-color,border-color,text-decoration-color,fill,stroke,box-shadow] focus:z-10 focus:outline-none",
  fullSized: "w-full",
  color: {
    dark: "border border-transparent bg-gray-800 text-white focus:ring-4 focus:ring-gray-300 enabled:hover:bg-gray-900 dark:border-gray-700 dark:bg-gray-800 dark:focus:ring-gray-800 dark:enabled:hover:bg-gray-700",
    failure: "border border-transparent bg-red-700 text-white focus:ring-4 focus:ring-red-300 enabled:hover:bg-red-800 dark:bg-red-600 dark:focus:ring-red-900 dark:enabled:hover:bg-red-700",
    gray: ":ring-cyan-700 border border-gray-200 bg-white text-gray-900 focus:text-cyan-700 focus:ring-4 enabled:hover:bg-gray-100 enabled:hover:text-cyan-700 dark:border-gray-600 dark:bg-transparent dark:text-gray-400 dark:enabled:hover:bg-gray-700 dark:enabled:hover:text-white",
    info: "border border-transparent bg-cyan-700 text-white focus:ring-4 focus:ring-cyan-300 enabled:hover:bg-cyan-800 dark:bg-cyan-600 dark:focus:ring-cyan-800 dark:enabled:hover:bg-cyan-700",
    light: "border border-gray-300 bg-white text-gray-900 focus:ring-4 focus:ring-cyan-300 enabled:hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-600 dark:text-white dark:focus:ring-gray-700 dark:enabled:hover:border-gray-700 dark:enabled:hover:bg-gray-700",
    purple: "border border-transparent bg-purple-700 text-white focus:ring-4 focus:ring-purple-300 enabled:hover:bg-purple-800 dark:bg-purple-600 dark:focus:ring-purple-900 dark:enabled:hover:bg-purple-700",
    success: "border border-transparent bg-green-700 text-white focus:ring-4 focus:ring-green-300 enabled:hover:bg-green-800 dark:bg-green-600 dark:focus:ring-green-800 dark:enabled:hover:bg-green-700",
    warning: "border border-transparent bg-yellow-400 text-white focus:ring-4 focus:ring-yellow-300 enabled:hover:bg-yellow-500 dark:focus:ring-yellow-900",
    blue: "border border-transparent bg-blue-700 text-white focus:ring-4 focus:ring-blue-300 enabled:hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800",
    cyan: "border border-cyan-300 bg-white text-cyan-900 focus:ring-4 focus:ring-cyan-300 enabled:hover:bg-cyan-100 dark:border-cyan-600 dark:bg-cyan-600 dark:text-white dark:focus:ring-cyan-700 dark:enabled:hover:border-cyan-700 dark:enabled:hover:bg-cyan-700",
    green: "border border-green-300 bg-white text-green-900 focus:ring-4 focus:ring-green-300 enabled:hover:bg-green-100 dark:border-green-600 dark:bg-green-600 dark:text-white dark:focus:ring-green-700 dark:enabled:hover:border-green-700 dark:enabled:hover:bg-green-700",
    indigo: "border border-indigo-300 bg-white text-indigo-900 focus:ring-4 focus:ring-indigo-300 enabled:hover:bg-indigo-100 dark:border-indigo-600 dark:bg-indigo-600 dark:text-white dark:focus:ring-indigo-700 dark:enabled:hover:border-indigo-700 dark:enabled:hover:bg-indigo-700",
    lime: "border border-lime-300 bg-white text-lime-900 focus:ring-4 focus:ring-lime-300 enabled:hover:bg-lime-100 dark:border-lime-600 dark:bg-lime-600 dark:text-white dark:focus:ring-lime-700 dark:enabled:hover:border-lime-700 dark:enabled:hover:bg-lime-700",
    pink: "border border-pink-300 bg-white text-pink-900 focus:ring-4 focus:ring-pink-300 enabled:hover:bg-pink-100 dark:border-pink-600 dark:bg-pink-600 dark:text-white dark:focus:ring-pink-700 dark:enabled:hover:border-pink-700 dark:enabled:hover:bg-pink-700",
    red: "border border-red-300 bg-white text-red-900 focus:ring-4 focus:ring-red-300 enabled:hover:bg-red-100 dark:border-red-600 dark:bg-red-600 dark:text-white dark:focus:ring-red-700 dark:enabled:hover:border-red-700 dark:enabled:hover:bg-red-700",
    teal: "border border-teal-300 bg-white text-teal-900 focus:ring-4 focus:ring-teal-300 enabled:hover:bg-teal-100 dark:border-teal-600 dark:bg-teal-600 dark:text-white dark:focus:ring-teal-700 dark:enabled:hover:border-teal-700 dark:enabled:hover:bg-teal-700",
    yellow: "border border-yellow-300 bg-white text-yellow-900 focus:ring-4 focus:ring-yellow-300 enabled:hover:bg-yellow-100 dark:border-yellow-600 dark:bg-yellow-600 dark:text-white dark:focus:ring-yellow-700 dark:enabled:hover:border-yellow-700 dark:enabled:hover:bg-yellow-700"
  },
  disabled: "cursor-not-allowed opacity-50",
  isProcessing: "cursor-wait",
  spinnerSlot: "absolute top-0 flex h-full items-center",
  spinnerLeftPosition: {
    xs: "left-2",
    sm: "left-3",
    md: "left-4",
    lg: "left-5",
    xl: "left-6"
  },
  gradient: {
    cyan: "bg-gradient-to-r from-cyan-400 via-cyan-500 to-cyan-600 text-white focus:ring-4 focus:ring-cyan-300 enabled:hover:bg-gradient-to-br dark:focus:ring-cyan-800",
    failure: "bg-gradient-to-r from-red-400 via-red-500 to-red-600 text-white focus:ring-4 focus:ring-red-300 enabled:hover:bg-gradient-to-br dark:focus:ring-red-800",
    info: "bg-gradient-to-r from-cyan-500 via-cyan-600 to-cyan-700 text-white focus:ring-4 focus:ring-cyan-300 enabled:hover:bg-gradient-to-br dark:focus:ring-cyan-800",
    lime: "bg-gradient-to-r from-lime-200 via-lime-400 to-lime-500 text-gray-900 focus:ring-4 focus:ring-lime-300 enabled:hover:bg-gradient-to-br dark:focus:ring-lime-800",
    pink: "bg-gradient-to-r from-pink-400 via-pink-500 to-pink-600 text-white focus:ring-4 focus:ring-pink-300 enabled:hover:bg-gradient-to-br dark:focus:ring-pink-800",
    purple: "bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 text-white focus:ring-4 focus:ring-purple-300 enabled:hover:bg-gradient-to-br dark:focus:ring-purple-800",
    success: "bg-gradient-to-r from-green-400 via-green-500 to-green-600 text-white focus:ring-4 focus:ring-green-300 enabled:hover:bg-gradient-to-br dark:focus:ring-green-800",
    teal: "bg-gradient-to-r from-teal-400 via-teal-500 to-teal-600 text-white focus:ring-4 focus:ring-teal-300 enabled:hover:bg-gradient-to-br dark:focus:ring-teal-800"
  },
  gradientDuoTone: {
    cyanToBlue: "bg-gradient-to-r from-cyan-500 to-cyan-500 text-white focus:ring-4 focus:ring-cyan-300 enabled:hover:bg-gradient-to-bl dark:focus:ring-cyan-800",
    greenToBlue: "bg-gradient-to-br from-green-400 to-cyan-600 text-white focus:ring-4 focus:ring-green-200 enabled:hover:bg-gradient-to-bl dark:focus:ring-green-800",
    pinkToOrange: "bg-gradient-to-br from-pink-500 to-orange-400 text-white focus:ring-4 focus:ring-pink-200 enabled:hover:bg-gradient-to-bl dark:focus:ring-pink-800",
    purpleToBlue: "bg-gradient-to-br from-purple-600 to-cyan-500 text-white focus:ring-4 focus:ring-cyan-300 enabled:hover:bg-gradient-to-bl dark:focus:ring-cyan-800",
    purpleToPink: "bg-gradient-to-r from-purple-500 to-pink-500 text-white focus:ring-4 focus:ring-purple-200 enabled:hover:bg-gradient-to-l dark:focus:ring-purple-800",
    redToYellow: "bg-gradient-to-r from-red-200 via-red-300 to-yellow-200 text-gray-900 focus:ring-4 focus:ring-red-100 enabled:hover:bg-gradient-to-bl dark:focus:ring-red-400",
    tealToLime: "bg-gradient-to-r from-teal-200 to-lime-200 text-gray-900 focus:ring-4 focus:ring-lime-200 enabled:hover:bg-gradient-to-l enabled:hover:from-teal-200 enabled:hover:to-lime-200 enabled:hover:text-gray-900 dark:focus:ring-teal-700"
  },
  inner: {
    base: "flex items-stretch transition-all duration-200",
    position: {
      none: "",
      start: "rounded-r-none",
      middle: "rounded-none",
      end: "rounded-l-none"
    },
    outline: "border border-transparent",
    isProcessingPadding: {
      xs: "pl-8",
      sm: "pl-10",
      md: "pl-12",
      lg: "pl-16",
      xl: "pl-20"
    }
  },
  label: "ml-2 inline-flex h-4 w-4 items-center justify-center rounded-full bg-cyan-200 text-xs font-semibold text-cyan-800",
  outline: {
    color: {
      gray: "border border-gray-900 dark:border-white",
      default: "border-0",
      light: ""
    },
    off: "",
    on: "flex w-full justify-center bg-white text-gray-900 transition-all duration-75 ease-in group-enabled:group-hover:bg-opacity-0 group-enabled:group-hover:text-inherit dark:bg-gray-900 dark:text-white",
    pill: {
      off: "rounded-md",
      on: "rounded-full"
    }
  },
  pill: {
    off: "rounded-lg",
    on: "rounded-full"
  },
  size: {
    xs: "px-2 py-1 text-xs",
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2 text-sm",
    lg: "px-5 py-2.5 text-base",
    xl: "px-6 py-3 text-base"
  }
});
var buttonGroupTheme = createTheme({
  base: "inline-flex",
  position: {
    none: "",
    start: "rounded-r-none focus:ring-2",
    middle: "rounded-none border-l-0 pl-0 focus:ring-2",
    end: "rounded-l-none border-l-0 pl-0 focus:ring-2"
  }
});

// node_modules/flowbite-react/dist/esm/components/Card/theme.mjs
var cardTheme = createTheme({
  root: {
    base: "flex rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800",
    children: "flex h-full flex-col justify-center gap-4 p-6",
    horizontal: {
      off: "flex-col",
      on: "flex-col md:max-w-xl md:flex-row"
    },
    href: "hover:bg-gray-100 dark:hover:bg-gray-700"
  },
  img: {
    base: "",
    horizontal: {
      off: "rounded-t-lg",
      on: "h-96 w-full rounded-t-lg object-cover md:h-auto md:w-48 md:rounded-none md:rounded-l-lg"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Carousel/theme.mjs
var carouselTheme = createTheme({
  root: {
    base: "relative h-full w-full",
    leftControl: "absolute left-0 top-0 flex h-full items-center justify-center px-4 focus:outline-none",
    rightControl: "absolute right-0 top-0 flex h-full items-center justify-center px-4 focus:outline-none"
  },
  indicators: {
    active: {
      off: "bg-white/50 hover:bg-white dark:bg-gray-800/50 dark:hover:bg-gray-800",
      on: "bg-white dark:bg-gray-800"
    },
    base: "h-3 w-3 rounded-full",
    wrapper: "absolute bottom-5 left-1/2 flex -translate-x-1/2 space-x-3"
  },
  item: {
    base: "absolute left-1/2 top-1/2 block w-full -translate-x-1/2 -translate-y-1/2",
    wrapper: {
      off: "w-full flex-shrink-0 transform cursor-default snap-center",
      on: "w-full flex-shrink-0 transform cursor-grab snap-center"
    }
  },
  control: {
    base: "inline-flex h-8 w-8 items-center justify-center rounded-full bg-white/30 group-hover:bg-white/50 group-focus:outline-none group-focus:ring-4 group-focus:ring-white dark:bg-gray-800/30 dark:group-hover:bg-gray-800/60 dark:group-focus:ring-gray-800/70 sm:h-10 sm:w-10",
    icon: "h-5 w-5 text-white dark:text-gray-800 sm:h-6 sm:w-6"
  },
  scrollContainer: {
    base: "flex h-full snap-mandatory overflow-y-hidden overflow-x-scroll scroll-smooth rounded-lg",
    snap: "snap-x"
  }
});

// node_modules/flowbite-react/dist/esm/components/Checkbox/theme.mjs
var checkboxTheme = createTheme({
  root: {
    base: "h-4 w-4 rounded border border-gray-300 bg-gray-100 focus:ring-2 dark:border-gray-600 dark:bg-gray-700",
    color: {
      default: "text-cyan-600 focus:ring-cyan-600 dark:ring-offset-gray-800 dark:focus:ring-cyan-600",
      dark: "text-gray-800 focus:ring-gray-800 dark:ring-offset-gray-800 dark:focus:ring-gray-800",
      failure: "text-red-900 focus:ring-red-900 dark:ring-offset-red-900 dark:focus:ring-red-900",
      gray: "text-gray-900 focus:ring-gray-900 dark:ring-offset-gray-900 dark:focus:ring-gray-900",
      info: "text-cyan-800 focus:ring-cyan-800 dark:ring-offset-gray-800 dark:focus:ring-cyan-800",
      light: "text-gray-900 focus:ring-gray-900 dark:ring-offset-gray-900 dark:focus:ring-gray-900",
      purple: "text-purple-600 focus:ring-purple-600 dark:ring-offset-purple-600 dark:focus:ring-purple-600",
      success: "text-green-800 focus:ring-green-800 dark:ring-offset-green-800 dark:focus:ring-green-800",
      warning: "text-yellow-400 focus:ring-yellow-400 dark:ring-offset-yellow-400 dark:focus:ring-yellow-400",
      blue: "text-blue-700 focus:ring-blue-600 dark:ring-offset-blue-700 dark:focus:ring-blue-700",
      cyan: "text-cyan-600 focus:ring-cyan-600 dark:ring-offset-cyan-600 dark:focus:ring-cyan-600",
      green: "text-green-600 focus:ring-green-600 dark:ring-offset-green-600 dark:focus:ring-green-600",
      indigo: "text-indigo-700 focus:ring-indigo-700 dark:ring-offset-indigo-700 dark:focus:ring-indigo-700",
      lime: "text-lime-700 focus:ring-lime-700 dark:ring-offset-lime-700 dark:focus:ring-lime-700",
      pink: "text-pink-600 focus:ring-pink-600 dark:ring-offset-pink-600 dark:focus:ring-pink-600",
      red: "text-red-600 focus:ring-red-600 dark:ring-offset-red-600 dark:focus:ring-red-600",
      teal: "text-teal-600 focus:ring-teal-600 dark:ring-offset-teal-600 dark:focus:ring-teal-600",
      yellow: "text-yellow-400 focus:ring-yellow-400 dark:ring-offset-yellow-400 dark:focus:ring-yellow-400"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Clipboard/theme.mjs
var clipboardTheme = createTheme({
  button: {
    base: "inline-flex w-full items-center justify-center rounded-lg bg-blue-700 px-5 py-3 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800",
    label: "text-center text-sm font-medium text-white sm:w-auto"
  },
  withIcon: {
    base: "absolute end-2 top-1/2 inline-flex -translate-y-1/2 items-center justify-center rounded-lg p-2 text-gray-500 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800",
    icon: {
      defaultIcon: "h-4 w-4",
      successIcon: "h-4 w-4 text-blue-700 dark:text-blue-500"
    }
  },
  withIconText: {
    base: "absolute end-2.5 top-1/2 inline-flex -translate-y-1/2 items-center justify-center rounded-lg border border-gray-200 bg-white px-2.5 py-2 text-gray-900 hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700",
    icon: {
      defaultIcon: "me-1.5 h-3 w-3",
      successIcon: "me-1.5 h-3 w-3 text-blue-700 dark:text-blue-500"
    },
    label: {
      base: "inline-flex items-center",
      defaultText: "text-xs font-semibold",
      successText: "text-xs font-semibold text-blue-700 dark:text-blue-500"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/DarkThemeToggle/theme.mjs
var darkThemeToggleTheme = createTheme({
  root: {
    base: "rounded-lg p-2.5 text-sm text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700",
    icon: "h-5 w-5"
  }
});

// node_modules/flowbite-react/dist/esm/components/Datepicker/theme.mjs
var datePickerTheme = createTheme({
  root: {
    base: "relative"
  },
  popup: {
    root: {
      base: "absolute top-10 z-50 block pt-2",
      inline: "relative top-0 z-auto",
      inner: "inline-block rounded-lg bg-white p-4 shadow-lg dark:bg-gray-700"
    },
    header: {
      base: "",
      title: "px-2 py-3 text-center font-semibold text-gray-900 dark:text-white",
      selectors: {
        base: "mb-2 flex justify-between",
        button: {
          base: "rounded-lg bg-white px-5 py-2.5 text-sm font-semibold text-gray-900 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600",
          prev: "",
          next: "",
          view: ""
        }
      }
    },
    view: {
      base: "p-1"
    },
    footer: {
      base: "mt-2 flex space-x-2",
      button: {
        base: "w-full rounded-lg px-5 py-2 text-center text-sm font-medium focus:ring-4 focus:ring-cyan-300",
        today: "bg-cyan-700 text-white hover:bg-cyan-800 dark:bg-cyan-600 dark:hover:bg-cyan-700",
        clear: "border border-gray-300 bg-white text-gray-900 hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600"
      }
    }
  },
  views: {
    days: {
      header: {
        base: "mb-1 grid grid-cols-7",
        title: "h-6 text-center text-sm font-medium leading-6 text-gray-500 dark:text-gray-400"
      },
      items: {
        base: "grid w-64 grid-cols-7",
        item: {
          base: "block flex-1 cursor-pointer rounded-lg border-0 text-center text-sm font-semibold leading-9 text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-600",
          selected: "bg-cyan-700 text-white hover:bg-cyan-600",
          disabled: "text-gray-500"
        }
      }
    },
    months: {
      items: {
        base: "grid w-64 grid-cols-4",
        item: {
          base: "block flex-1 cursor-pointer rounded-lg border-0 text-center text-sm font-semibold leading-9 text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-600",
          selected: "bg-cyan-700 text-white hover:bg-cyan-600",
          disabled: "text-gray-500"
        }
      }
    },
    years: {
      items: {
        base: "grid w-64 grid-cols-4",
        item: {
          base: "block flex-1 cursor-pointer rounded-lg border-0 text-center text-sm font-semibold leading-9 text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-600",
          selected: "bg-cyan-700 text-white hover:bg-cyan-600",
          disabled: "text-gray-500"
        }
      }
    },
    decades: {
      items: {
        base: "grid w-64 grid-cols-4",
        item: {
          base: "block flex-1 cursor-pointer rounded-lg border-0 text-center text-sm font-semibold leading-9 text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-600",
          selected: "bg-cyan-700 text-white hover:bg-cyan-600",
          disabled: "text-gray-500"
        }
      }
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Drawer/theme.mjs
var drawerTheme = createTheme({
  root: {
    base: "fixed z-40 overflow-y-auto bg-white p-4 transition-transform dark:bg-gray-800",
    backdrop: "fixed inset-0 z-30 bg-gray-900/50 dark:bg-gray-900/80",
    edge: "bottom-16",
    position: {
      top: {
        on: "left-0 right-0 top-0 w-full transform-none",
        off: "left-0 right-0 top-0 w-full -translate-y-full"
      },
      right: {
        on: "right-0 top-0 h-screen w-80 transform-none",
        off: "right-0 top-0 h-screen w-80 translate-x-full"
      },
      bottom: {
        on: "bottom-0 left-0 right-0 w-full transform-none",
        off: "bottom-0 left-0 right-0 w-full translate-y-full"
      },
      left: {
        on: "left-0 top-0 h-screen w-80 transform-none",
        off: "left-0 top-0 h-screen w-80 -translate-x-full"
      }
    }
  },
  header: {
    inner: {
      closeButton: "absolute end-2.5 top-2.5 flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white",
      closeIcon: "h-4 w-4",
      titleIcon: "me-2.5 h-4 w-4",
      titleText: "mb-4 inline-flex items-center text-base font-semibold text-gray-500 dark:text-gray-400"
    },
    collapsed: {
      on: "hidden",
      off: "block"
    }
  },
  items: {
    base: ""
  }
});

// node_modules/flowbite-react/dist/esm/components/Dropdown/theme.mjs
var dropdownTheme = createTheme({
  arrowIcon: "ml-2 h-4 w-4",
  content: "py-1 focus:outline-none",
  floating: {
    animation: "transition-opacity",
    arrow: {
      base: "absolute z-10 h-2 w-2 rotate-45",
      style: {
        dark: "bg-gray-900 dark:bg-gray-700",
        light: "bg-white",
        auto: "bg-white dark:bg-gray-700"
      },
      placement: "-4px"
    },
    base: "z-10 w-fit divide-y divide-gray-100 rounded shadow focus:outline-none",
    content: "py-1 text-sm text-gray-700 dark:text-gray-200",
    divider: "my-1 h-px bg-gray-100 dark:bg-gray-600",
    header: "block px-4 py-2 text-sm text-gray-700 dark:text-gray-200",
    hidden: "invisible opacity-0",
    item: {
      container: "",
      base: "flex w-full cursor-pointer items-center justify-start px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none dark:text-gray-200 dark:hover:bg-gray-600 dark:hover:text-white dark:focus:bg-gray-600 dark:focus:text-white",
      icon: "mr-2 h-4 w-4"
    },
    style: {
      dark: "bg-gray-900 text-white dark:bg-gray-700",
      light: "border border-gray-200 bg-white text-gray-900",
      auto: "border border-gray-200 bg-white text-gray-900 dark:border-none dark:bg-gray-700 dark:text-white"
    },
    target: "w-fit"
  },
  inlineWrapper: "flex items-center"
});

// node_modules/flowbite-react/dist/esm/components/FileInput/theme.mjs
var fileInputTheme = createTheme({
  root: {
    base: "flex"
  },
  field: {
    base: "relative w-full",
    input: {
      base: "block w-full overflow-hidden rounded-lg border disabled:cursor-not-allowed disabled:opacity-50",
      sizes: {
        sm: "sm:text-xs",
        md: "text-sm",
        lg: "sm:text-base"
      },
      colors: {
        gray: "border-gray-300 bg-gray-50 text-gray-900 focus:border-cyan-500 focus:ring-cyan-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
        info: "border-cyan-500 bg-cyan-50 text-cyan-900 placeholder-cyan-700 focus:border-cyan-500 focus:ring-cyan-500 dark:border-cyan-400 dark:bg-cyan-100 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
        failure: "border-red-500 bg-red-50 text-red-900 placeholder-red-700 focus:border-red-500 focus:ring-red-500 dark:border-red-400 dark:bg-red-100 dark:focus:border-red-500 dark:focus:ring-red-500",
        warning: "border-yellow-500 bg-yellow-50 text-yellow-900 placeholder-yellow-700 focus:border-yellow-500 focus:ring-yellow-500 dark:border-yellow-400 dark:bg-yellow-100 dark:focus:border-yellow-500 dark:focus:ring-yellow-500",
        success: "border-green-500 bg-green-50 text-green-900 placeholder-green-700 focus:border-green-500 focus:ring-green-500 dark:border-green-400 dark:bg-green-100 dark:focus:border-green-500 dark:focus:ring-green-500"
      }
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/FloatingLabel/theme.mjs
var floatingLabelTheme = createTheme({
  input: {
    default: {
      filled: {
        sm: "peer block w-full appearance-none rounded-t-lg border-0 border-b-2 border-gray-300 bg-gray-50 px-2.5 pb-2.5 pt-5 text-xs text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-500",
        md: "peer block w-full appearance-none rounded-t-lg border-0 border-b-2 border-gray-300 bg-gray-50 px-2.5 pb-2.5 pt-5 text-sm text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-500"
      },
      outlined: {
        sm: "peer block w-full appearance-none rounded-lg border border-gray-300 bg-transparent px-2.5 pb-2.5 pt-4 text-xs text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0 dark:border-gray-600 dark:text-white dark:focus:border-blue-500",
        md: "peer block w-full appearance-none rounded-lg border border-gray-300 bg-transparent px-2.5 pb-2.5 pt-4 text-sm text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0 dark:border-gray-600 dark:text-white dark:focus:border-blue-500"
      },
      standard: {
        sm: "peer block w-full appearance-none border-0 border-b-2 border-gray-300 bg-transparent px-0 py-2.5 text-xs text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0 dark:border-gray-600 dark:text-white dark:focus:border-blue-500",
        md: "peer block w-full appearance-none border-0 border-b-2 border-gray-300 bg-transparent px-0 py-2.5 text-sm text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0 dark:border-gray-600 dark:text-white dark:focus:border-blue-500"
      }
    },
    success: {
      filled: {
        sm: "peer block w-full appearance-none rounded-t-lg border-0 border-b-2 border-green-600 bg-gray-50 px-2.5 pb-2.5 pt-5 text-xs text-gray-900 focus:border-green-600 focus:outline-none focus:ring-0 dark:border-green-500 dark:bg-gray-700 dark:text-white dark:focus:border-green-500",
        md: "peer block w-full appearance-none rounded-t-lg border-0 border-b-2 border-green-600 bg-gray-50 px-2.5 pb-2.5 pt-5 text-sm text-gray-900 focus:border-green-600 focus:outline-none focus:ring-0 dark:border-green-500 dark:bg-gray-700 dark:text-white dark:focus:border-green-500"
      },
      outlined: {
        sm: "peer block w-full appearance-none rounded-lg border border-green-600 bg-transparent px-2.5 pb-2.5 pt-4 text-xs text-gray-900 focus:border-green-600 focus:outline-none focus:ring-0 dark:border-green-500 dark:text-white dark:focus:border-green-500",
        md: "peer block w-full appearance-none rounded-lg border border-green-600 bg-transparent px-2.5 pb-2.5 pt-4 text-sm text-gray-900 focus:border-green-600 focus:outline-none focus:ring-0 dark:border-green-500 dark:text-white dark:focus:border-green-500"
      },
      standard: {
        sm: "peer block w-full appearance-none border-0 border-b-2 border-green-600 bg-transparent px-0 py-2.5 text-xs text-gray-900 focus:border-green-600 focus:outline-none focus:ring-0 dark:border-green-500 dark:text-white dark:focus:border-green-500",
        md: "peer block w-full appearance-none border-0 border-b-2 border-green-600 bg-transparent px-0 py-2.5 text-sm text-gray-900 focus:border-green-600 focus:outline-none focus:ring-0 dark:border-green-500 dark:text-white dark:focus:border-green-500"
      }
    },
    error: {
      filled: {
        sm: "peer block w-full appearance-none rounded-t-lg border-0 border-b-2 border-red-600 bg-gray-50 px-2.5 pb-2.5 pt-5 text-xs text-gray-900 focus:border-red-600 focus:outline-none focus:ring-0 dark:border-red-500 dark:bg-gray-700 dark:text-white dark:focus:border-red-500",
        md: "peer block w-full appearance-none rounded-t-lg border-0 border-b-2 border-red-600 bg-gray-50 px-2.5 pb-2.5 pt-5 text-sm text-gray-900 focus:border-red-600 focus:outline-none focus:ring-0 dark:border-red-500 dark:bg-gray-700 dark:text-white dark:focus:border-red-500"
      },
      outlined: {
        sm: "peer block w-full appearance-none rounded-lg border border-red-600 bg-transparent px-2.5 pb-2.5 pt-4 text-xs text-gray-900 focus:border-red-600 focus:outline-none focus:ring-0 dark:border-red-500 dark:text-white dark:focus:border-red-500",
        md: "peer block w-full appearance-none rounded-lg border border-red-600 bg-transparent px-2.5 pb-2.5 pt-4 text-sm text-gray-900 focus:border-red-600 focus:outline-none focus:ring-0 dark:border-red-500 dark:text-white dark:focus:border-red-500"
      },
      standard: {
        sm: "peer block w-full appearance-none border-0 border-b-2 border-red-600 bg-transparent px-0 py-2.5 text-xs text-gray-900 focus:border-red-600 focus:outline-none focus:ring-0 dark:border-red-500 dark:text-white dark:focus:border-red-500",
        md: "peer block w-full appearance-none border-0 border-b-2 border-red-600 bg-transparent px-0 py-2.5 text-sm text-gray-900 focus:border-red-600 focus:outline-none focus:ring-0 dark:border-red-500 dark:text-white dark:focus:border-red-500"
      }
    }
  },
  label: {
    default: {
      filled: {
        sm: "absolute left-2.5 top-4 z-10 origin-[0] -translate-y-4 scale-75 text-xs text-gray-500 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:text-blue-600 dark:text-gray-400 peer-focus:dark:text-blue-500",
        md: "absolute left-2.5 top-4 z-10 origin-[0] -translate-y-4 scale-75 text-sm text-gray-500 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:text-blue-600 dark:text-gray-400 peer-focus:dark:text-blue-500"
      },
      outlined: {
        sm: "absolute left-1 top-2 z-10 origin-[0] -translate-y-4 scale-75 bg-white px-2 text-xs text-gray-500 transition-transform duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 peer-focus:text-blue-600 dark:bg-gray-900 dark:text-gray-400 peer-focus:dark:text-blue-500",
        md: "absolute left-1 top-2 z-10 origin-[0] -translate-y-4 scale-75 bg-white px-2 text-sm text-gray-500 transition-transform duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 peer-focus:text-blue-600 dark:bg-gray-900 dark:text-gray-400 peer-focus:dark:text-blue-500"
      },
      standard: {
        sm: "absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 text-xs text-gray-500 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-blue-600 dark:text-gray-400 peer-focus:dark:text-blue-500",
        md: "absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 text-sm text-gray-500 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-blue-600 dark:text-gray-400 peer-focus:dark:text-blue-500"
      }
    },
    success: {
      filled: {
        sm: "absolute left-2.5 top-4 z-10 origin-[0] -translate-y-4 scale-75 text-sm text-green-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:-translate-y-4 peer-focus:scale-75 dark:text-green-500",
        md: "absolute left-2.5 top-4 z-10 origin-[0] -translate-y-4 scale-75 text-sm text-green-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:-translate-y-4 peer-focus:scale-75 dark:text-green-500"
      },
      outlined: {
        sm: "absolute left-1 top-2 z-10 origin-[0] -translate-y-4 scale-75 bg-white px-2 text-sm text-green-600 transition-transform duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 dark:bg-gray-900 dark:text-green-500",
        md: "absolute left-1 top-2 z-10 origin-[0] -translate-y-4 scale-75 bg-white px-2 text-sm text-green-600 transition-transform duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 dark:bg-gray-900 dark:text-green-500"
      },
      standard: {
        sm: "absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 text-xs text-green-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 dark:text-green-500",
        md: "absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 text-sm text-green-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 dark:text-green-500"
      }
    },
    error: {
      filled: {
        sm: "absolute left-2.5 top-4 z-10 origin-[0] -translate-y-4 scale-75 text-xs text-red-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:-translate-y-4 peer-focus:scale-75 dark:text-red-500",
        md: "absolute left-2.5 top-4 z-10 origin-[0] -translate-y-4 scale-75 text-xs text-red-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:-translate-y-4 peer-focus:scale-75 dark:text-red-500"
      },
      outlined: {
        sm: "absolute left-1 top-2 z-10 origin-[0] -translate-y-4 scale-75 bg-white px-2 text-xs text-red-600 transition-transform duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 dark:bg-gray-900 dark:text-red-500",
        md: "absolute left-1 top-2 z-10 origin-[0] -translate-y-4 scale-75 bg-white px-2 text-xs text-red-600 transition-transform duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 dark:bg-gray-900 dark:text-red-500"
      },
      standard: {
        sm: "absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 text-xs text-red-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 dark:text-red-500",
        md: "absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 text-sm text-red-600 transition-transform duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 dark:text-red-500"
      }
    }
  },
  helperText: {
    default: "mt-2 text-xs text-gray-600 dark:text-gray-400",
    success: "mt-2 text-xs text-green-600 dark:text-green-400",
    error: "mt-2 text-xs text-red-600 dark:text-red-400"
  }
});

// node_modules/flowbite-react/dist/esm/components/Footer/theme.mjs
var footerTheme = createTheme({
  root: {
    base: "w-full rounded-lg bg-white shadow dark:bg-gray-800 md:flex md:items-center md:justify-between",
    container: "w-full p-6",
    bgDark: "bg-gray-800"
  },
  groupLink: {
    base: "flex flex-wrap text-sm text-gray-500 dark:text-white",
    link: {
      base: "me-4 last:mr-0 md:mr-6",
      href: "hover:underline"
    },
    col: "flex-col space-y-4"
  },
  icon: {
    base: "text-gray-500 dark:hover:text-white",
    size: "h-5 w-5"
  },
  title: {
    base: "mb-6 text-sm font-semibold uppercase text-gray-500 dark:text-white"
  },
  divider: {
    base: "my-6 w-full border-gray-200 dark:border-gray-700 sm:mx-auto lg:my-8"
  },
  copyright: {
    base: "text-sm text-gray-500 dark:text-gray-400 sm:text-center",
    href: "ml-1 hover:underline",
    span: "ml-1"
  },
  brand: {
    base: "mb-4 flex items-center sm:mb-0",
    img: "mr-3 h-8",
    span: "self-center whitespace-nowrap text-2xl font-semibold text-gray-800 dark:text-white"
  }
});

// node_modules/flowbite-react/dist/esm/components/HelperText/theme.mjs
var helperTextTheme = createTheme({
  root: {
    base: "mt-2 text-sm",
    colors: {
      gray: "text-gray-500 dark:text-gray-400",
      info: "text-cyan-700 dark:text-cyan-800",
      success: "text-green-600 dark:text-green-500",
      failure: "text-red-600 dark:text-red-500",
      warning: "text-yellow-500 dark:text-yellow-600"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/HR/theme.mjs
var hrTheme = createTheme({
  root: {
    base: "my-8 h-px border-0 bg-gray-200 dark:bg-gray-700"
  },
  trimmed: {
    base: "mx-auto my-4 h-1 w-48 rounded border-0 bg-gray-100 dark:bg-gray-700 md:my-10"
  },
  icon: {
    base: "inline-flex w-full items-center justify-center",
    hrLine: "my-8 h-1 w-64 rounded border-0 bg-gray-200 dark:bg-gray-700",
    icon: {
      base: "absolute left-1/2 -translate-x-1/2 bg-white px-4 dark:bg-gray-900",
      icon: "h-4 w-4 text-gray-700 dark:text-gray-300"
    }
  },
  text: {
    base: "inline-flex w-full items-center justify-center",
    hrLine: "my-8 h-px w-64 border-0 bg-gray-200 dark:bg-gray-700",
    text: "absolute left-1/2 -translate-x-1/2 bg-white px-3 font-medium text-gray-900 dark:bg-gray-900 dark:text-white"
  },
  square: {
    base: "mx-auto my-8 h-8 w-8 rounded border-0 bg-gray-200 dark:bg-gray-700 md:my-12"
  }
});

// node_modules/flowbite-react/dist/esm/components/Kbd/theme.mjs
var kbdTheme = createTheme({
  root: {
    base: "rounded-lg border border-gray-200 bg-gray-100 px-2 py-1.5 text-xs font-semibold text-gray-800 dark:border-gray-500 dark:bg-gray-600 dark:text-gray-100",
    icon: "inline-block"
  }
});

// node_modules/flowbite-react/dist/esm/components/Label/theme.mjs
var labelTheme = createTheme({
  root: {
    base: "text-sm font-medium",
    disabled: "opacity-50",
    colors: {
      default: "text-gray-900 dark:text-white",
      info: "text-cyan-500 dark:text-cyan-600",
      failure: "text-red-700 dark:text-red-500",
      warning: "text-yellow-500 dark:text-yellow-600",
      success: "text-green-700 dark:text-green-500"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/List/theme.mjs
var listTheme = createTheme({
  root: {
    base: "list-inside space-y-1 text-gray-500 dark:text-gray-400",
    ordered: {
      off: "list-disc",
      on: "list-decimal"
    },
    horizontal: "flex list-none flex-wrap items-center justify-center space-x-4 space-y-0",
    unstyled: "list-none",
    nested: "mt-2 ps-5"
  },
  item: {
    withIcon: {
      off: "",
      on: "flex items-center"
    },
    icon: "me-2 h-3.5 w-3.5 flex-shrink-0"
  }
});

// node_modules/flowbite-react/dist/esm/components/ListGroup/theme.mjs
var listGroupTheme = createTheme({
  root: {
    base: "list-none rounded-lg border border-gray-200 bg-white text-left text-sm font-medium text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
  },
  item: {
    base: "[&>*]:first:rounded-t-lg [&>*]:last:rounded-b-lg [&>*]:last:border-b-0",
    link: {
      base: "flex w-full items-center border-b border-gray-200 px-4 py-2 dark:border-gray-600",
      active: {
        off: "hover:bg-gray-100 hover:text-cyan-700 focus:text-cyan-700 focus:outline-none focus:ring-2 focus:ring-cyan-700 dark:border-gray-600 dark:hover:bg-gray-600 dark:hover:text-white dark:focus:text-white dark:focus:ring-gray-500",
        on: "bg-cyan-700 text-white dark:bg-gray-800"
      },
      disabled: {
        off: "",
        on: "cursor-not-allowed bg-gray-100 text-gray-900 hover:bg-gray-100 hover:text-gray-900 focus:text-gray-900"
      },
      href: {
        off: "",
        on: ""
      },
      icon: "mr-2 h-4 w-4 fill-current"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Navbar/theme.mjs
var navbarTheme = createTheme({
  root: {
    base: "bg-white px-2 py-2.5 dark:border-gray-700 dark:bg-gray-800 sm:px-4",
    rounded: {
      on: "rounded",
      off: ""
    },
    bordered: {
      on: "border",
      off: ""
    },
    inner: {
      base: "mx-auto flex flex-wrap items-center justify-between",
      fluid: {
        on: "",
        off: "container"
      }
    }
  },
  brand: {
    base: "flex items-center"
  },
  collapse: {
    base: "w-full md:block md:w-auto",
    list: "mt-4 flex flex-col md:mt-0 md:flex-row md:space-x-8 md:text-sm md:font-medium",
    hidden: {
      on: "hidden",
      off: ""
    }
  },
  link: {
    base: "block py-2 pl-3 pr-4 md:p-0",
    active: {
      on: "bg-cyan-700 text-white dark:text-white md:bg-transparent md:text-cyan-700",
      off: "border-b border-gray-100 text-gray-700 hover:bg-gray-50 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white md:border-0 md:hover:bg-transparent md:hover:text-cyan-700 md:dark:hover:bg-transparent md:dark:hover:text-white"
    },
    disabled: {
      on: "text-gray-400 hover:cursor-not-allowed dark:text-gray-600",
      off: ""
    }
  },
  toggle: {
    base: "inline-flex items-center rounded-lg p-2 text-sm text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600 md:hidden",
    icon: "h-6 w-6 shrink-0"
  }
});

// node_modules/flowbite-react/dist/esm/components/MegaMenu/theme.mjs
var megaMenuTheme = createTheme({
  ...navbarTheme,
  dropdown: {
    base: "",
    toggle: {
      ...dropdownTheme,
      floating: {
        ...dropdownTheme.floating,
        base: twMerge(dropdownTheme.floating.base, "mt-2 block"),
        content: twMerge(dropdownTheme.floating.content, "text-gray-500 dark:text-gray-400"),
        style: {
          ...dropdownTheme.floating.style,
          auto: twMerge(dropdownTheme.floating.style.auto, "text-gray-500 dark:text-gray-400")
        }
      },
      inlineWrapper: twMerge(dropdownTheme.inlineWrapper, "flex w-full items-center justify-between")
    }
  },
  dropdownToggle: {
    base: twMerge(navbarTheme.link.base, navbarTheme.link.active.off, "flex w-full items-center justify-between")
  }
});

// node_modules/flowbite-react/dist/esm/components/Modal/theme.mjs
var modalTheme = createTheme({
  root: {
    base: "fixed inset-x-0 top-0 z-50 h-screen overflow-y-auto overflow-x-hidden md:inset-0 md:h-full",
    show: {
      on: "flex bg-gray-900 bg-opacity-50 dark:bg-opacity-80",
      off: "hidden"
    },
    sizes: {
      sm: "max-w-sm",
      md: "max-w-md",
      lg: "max-w-lg",
      xl: "max-w-xl",
      "2xl": "max-w-2xl",
      "3xl": "max-w-3xl",
      "4xl": "max-w-4xl",
      "5xl": "max-w-5xl",
      "6xl": "max-w-6xl",
      "7xl": "max-w-7xl"
    },
    positions: {
      "top-left": "items-start justify-start",
      "top-center": "items-start justify-center",
      "top-right": "items-start justify-end",
      "center-left": "items-center justify-start",
      center: "items-center justify-center",
      "center-right": "items-center justify-end",
      "bottom-right": "items-end justify-end",
      "bottom-center": "items-end justify-center",
      "bottom-left": "items-end justify-start"
    }
  },
  content: {
    base: "relative h-full w-full p-4 md:h-auto",
    inner: "relative flex max-h-[90dvh] flex-col rounded-lg bg-white shadow dark:bg-gray-700"
  },
  body: {
    base: "flex-1 overflow-auto p-6",
    popup: "pt-0"
  },
  header: {
    base: "flex items-start justify-between rounded-t border-b p-5 dark:border-gray-600",
    popup: "border-b-0 p-2",
    title: "text-xl font-medium text-gray-900 dark:text-white",
    close: {
      base: "ml-auto inline-flex items-center rounded-lg bg-transparent p-1.5 text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white",
      icon: "h-5 w-5"
    }
  },
  footer: {
    base: "flex items-center space-x-2 rounded-b border-gray-200 p-6 dark:border-gray-600",
    popup: "border-t"
  }
});

// node_modules/flowbite-react/dist/esm/components/Pagination/theme.mjs
var paginationTheme = createTheme({
  base: "",
  layout: {
    table: {
      base: "text-sm text-gray-700 dark:text-gray-400",
      span: "font-semibold text-gray-900 dark:text-white"
    }
  },
  pages: {
    base: "xs:mt-0 mt-2 inline-flex items-center -space-x-px",
    showIcon: "inline-flex",
    previous: {
      base: "ml-0 rounded-l-lg border border-gray-300 bg-white px-3 py-2 leading-tight text-gray-500 enabled:hover:bg-gray-100 enabled:hover:text-gray-700 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 enabled:dark:hover:bg-gray-700 enabled:dark:hover:text-white",
      icon: "h-5 w-5"
    },
    next: {
      base: "rounded-r-lg border border-gray-300 bg-white px-3 py-2 leading-tight text-gray-500 enabled:hover:bg-gray-100 enabled:hover:text-gray-700 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 enabled:dark:hover:bg-gray-700 enabled:dark:hover:text-white",
      icon: "h-5 w-5"
    },
    selector: {
      base: "w-12 border border-gray-300 bg-white py-2 leading-tight text-gray-500 enabled:hover:bg-gray-100 enabled:hover:text-gray-700 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 enabled:dark:hover:bg-gray-700 enabled:dark:hover:text-white",
      active: "bg-cyan-50 text-cyan-600 hover:bg-cyan-100 hover:text-cyan-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white",
      disabled: "cursor-not-allowed opacity-50"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Popover/theme.mjs
var popoverTheme = {
  base: "absolute z-20 inline-block w-max max-w-[100vw] bg-white outline-none border border-gray-200 rounded-lg shadow-sm dark:border-gray-600 dark:bg-gray-800",
  content: "z-10 overflow-hidden rounded-[7px]",
  arrow: {
    base: "absolute h-2 w-2 z-0 rotate-45 mix-blend-lighten bg-white border border-gray-200 dark:border-gray-600 dark:bg-gray-800 dark:mix-blend-color",
    placement: "-4px"
  }
};

// node_modules/flowbite-react/dist/esm/components/Progress/theme.mjs
var progressTheme = createTheme({
  base: "w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-700",
  label: "mb-1 flex justify-between font-medium dark:text-white",
  bar: "space-x-2 rounded-full text-center font-medium leading-none text-cyan-300 dark:text-cyan-100",
  color: {
    dark: "bg-gray-600 dark:bg-gray-300",
    blue: "bg-blue-600",
    red: "bg-red-600 dark:bg-red-500",
    green: "bg-green-600 dark:bg-green-500",
    yellow: "bg-yellow-400",
    indigo: "bg-indigo-600 dark:bg-indigo-500",
    purple: "bg-purple-600 dark:bg-purple-500",
    cyan: "bg-cyan-600",
    gray: "bg-gray-500",
    lime: "bg-lime-600",
    pink: "bg-pink-500",
    teal: "bg-teal-600"
  },
  size: {
    sm: "h-1.5",
    md: "h-2.5",
    lg: "h-4",
    xl: "h-6"
  }
});

// node_modules/flowbite-react/dist/esm/components/Radio/theme.mjs
var radioTheme = createTheme({
  root: {
    base: "h-4 w-4 border border-gray-300 text-cyan-600 focus:ring-2 focus:ring-cyan-500 dark:border-gray-600 dark:bg-gray-700 dark:focus:bg-cyan-600 dark:focus:ring-cyan-600"
  }
});

// node_modules/flowbite-react/dist/esm/components/RangeSlider/theme.mjs
var rangeSliderTheme = createTheme({
  root: {
    base: "flex"
  },
  field: {
    base: "relative w-full",
    input: {
      base: "w-full cursor-pointer appearance-none rounded-lg bg-gray-200 dark:bg-gray-700",
      sizes: {
        sm: "h-1",
        md: "h-2",
        lg: "h-3"
      }
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Rating/theme.mjs
var ratingTheme = createTheme({
  root: {
    base: "flex items-center"
  },
  star: {
    empty: "text-gray-300 dark:text-gray-500",
    filled: "text-yellow-400",
    sizes: {
      sm: "h-5 w-5",
      md: "h-7 w-7",
      lg: "h-10 w-10"
    }
  }
});
var ratingAdvancedTheme = createTheme({
  base: "flex items-center",
  label: "text-sm font-medium text-cyan-600 dark:text-cyan-500",
  progress: {
    base: "mx-4 h-5 w-2/4 rounded bg-gray-200 dark:bg-gray-700",
    fill: "h-5 rounded bg-yellow-400",
    label: "text-sm font-medium text-cyan-600 dark:text-cyan-500"
  }
});

// node_modules/flowbite-react/dist/esm/components/Select/theme.mjs
var selectTheme = createTheme({
  base: "flex",
  addon: "inline-flex items-center rounded-l-md border border-r-0 border-gray-300 bg-gray-200 px-3 text-sm text-gray-900 dark:border-gray-600 dark:bg-gray-600 dark:text-gray-400",
  field: {
    base: "relative w-full",
    icon: {
      base: "pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3",
      svg: "h-5 w-5 text-gray-500 dark:text-gray-400"
    },
    select: {
      base: "block w-full border disabled:cursor-not-allowed disabled:opacity-50",
      withIcon: {
        on: "pl-10",
        off: ""
      },
      withAddon: {
        on: "rounded-r-lg",
        off: "rounded-lg"
      },
      withShadow: {
        on: "shadow-sm dark:shadow-sm-light",
        off: ""
      },
      sizes: {
        sm: "p-2 sm:text-xs",
        md: "p-2.5 text-sm",
        lg: "p-4 sm:text-base"
      },
      colors: {
        gray: "border-gray-300 bg-gray-50 text-gray-900 focus:border-cyan-500 focus:ring-cyan-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
        info: "border-cyan-500 bg-cyan-50 text-cyan-900 placeholder-cyan-700 focus:border-cyan-500 focus:ring-cyan-500 dark:border-cyan-400 dark:bg-cyan-100 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
        failure: "border-red-500 bg-red-50 text-red-900 placeholder-red-700 focus:border-red-500 focus:ring-red-500 dark:border-red-400 dark:bg-red-100 dark:focus:border-red-500 dark:focus:ring-red-500",
        warning: "border-yellow-500 bg-yellow-50 text-yellow-900 placeholder-yellow-700 focus:border-yellow-500 focus:ring-yellow-500 dark:border-yellow-400 dark:bg-yellow-100 dark:focus:border-yellow-500 dark:focus:ring-yellow-500",
        success: "border-green-500 bg-green-50 text-green-900 placeholder-green-700 focus:border-green-500 focus:ring-green-500 dark:border-green-400 dark:bg-green-100 dark:focus:border-green-500 dark:focus:ring-green-500"
      }
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Sidebar/theme.mjs
var sidebarTheme = createTheme({
  root: {
    base: "h-full",
    collapsed: {
      on: "w-16",
      off: "w-64"
    },
    inner: "h-full overflow-y-auto overflow-x-hidden rounded bg-gray-50 px-3 py-4 dark:bg-gray-800"
  },
  collapse: {
    button: "group flex w-full items-center rounded-lg p-2 text-base font-normal text-gray-900 transition duration-75 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700",
    icon: {
      base: "h-6 w-6 text-gray-500 transition duration-75 group-hover:text-gray-900 dark:text-gray-400 dark:group-hover:text-white",
      open: {
        off: "",
        on: "text-gray-900"
      }
    },
    label: {
      base: "ml-3 flex-1 whitespace-nowrap text-left",
      icon: {
        base: "h-6 w-6 transition delay-0 ease-in-out",
        open: {
          on: "rotate-180",
          off: ""
        }
      }
    },
    list: "space-y-2 py-2"
  },
  cta: {
    base: "mt-6 rounded-lg bg-gray-100 p-4 dark:bg-gray-700",
    color: {
      blue: "bg-cyan-50 dark:bg-cyan-900",
      dark: "bg-dark-50 dark:bg-dark-900",
      failure: "bg-red-50 dark:bg-red-900",
      gray: "bg-alternative-50 dark:bg-alternative-900",
      green: "bg-green-50 dark:bg-green-900",
      light: "bg-light-50 dark:bg-light-900",
      red: "bg-red-50 dark:bg-red-900",
      purple: "bg-purple-50 dark:bg-purple-900",
      success: "bg-green-50 dark:bg-green-900",
      yellow: "bg-yellow-50 dark:bg-yellow-900",
      warning: "bg-yellow-50 dark:bg-yellow-900"
    }
  },
  item: {
    base: "flex items-center justify-center rounded-lg p-2 text-base font-normal text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700",
    active: "bg-gray-100 dark:bg-gray-700",
    collapsed: {
      insideCollapse: "group w-full pl-8 transition duration-75",
      noIcon: "font-bold"
    },
    content: {
      base: "flex-1 whitespace-nowrap px-3"
    },
    icon: {
      base: "h-6 w-6 flex-shrink-0 text-gray-500 transition duration-75 group-hover:text-gray-900 dark:text-gray-400 dark:group-hover:text-white",
      active: "text-gray-700 dark:text-gray-100"
    },
    label: "",
    listItem: ""
  },
  items: {
    base: ""
  },
  itemGroup: {
    base: "mt-4 space-y-2 border-t border-gray-200 pt-4 first:mt-0 first:border-t-0 first:pt-0 dark:border-gray-700"
  },
  logo: {
    base: "mb-5 flex items-center pl-2.5",
    collapsed: {
      on: "hidden",
      off: "self-center whitespace-nowrap text-xl font-semibold dark:text-white"
    },
    img: "mr-3 h-6 sm:h-7"
  }
});

// node_modules/flowbite-react/dist/esm/components/Spinner/theme.mjs
var spinnerTheme = createTheme({
  base: "inline animate-spin text-gray-200",
  color: {
    failure: "fill-red-600",
    gray: "fill-gray-600",
    info: "fill-cyan-600",
    pink: "fill-pink-600",
    purple: "fill-purple-600",
    success: "fill-green-500",
    warning: "fill-yellow-400"
  },
  light: {
    off: {
      base: "dark:text-gray-600",
      color: {
        failure: "",
        gray: "dark:fill-gray-300",
        info: "",
        pink: "",
        purple: "",
        success: "",
        warning: ""
      }
    },
    on: {
      base: "",
      color: {
        failure: "",
        gray: "",
        info: "",
        pink: "",
        purple: "",
        success: "",
        warning: ""
      }
    }
  },
  size: {
    xs: "h-3 w-3",
    sm: "h-4 w-4",
    md: "h-6 w-6",
    lg: "h-8 w-8",
    xl: "h-10 w-10"
  }
});

// node_modules/flowbite-react/dist/esm/components/Table/theme.mjs
var tableTheme = createTheme({
  root: {
    base: "w-full text-left text-sm text-gray-500 dark:text-gray-400",
    shadow: "absolute left-0 top-0 -z-10 h-full w-full rounded-lg bg-white drop-shadow-md dark:bg-black",
    wrapper: "relative"
  },
  body: {
    base: "group/body",
    cell: {
      base: "px-6 py-4 group-first/body:group-first/row:first:rounded-tl-lg group-first/body:group-first/row:last:rounded-tr-lg group-last/body:group-last/row:first:rounded-bl-lg group-last/body:group-last/row:last:rounded-br-lg"
    }
  },
  head: {
    base: "group/head text-xs uppercase text-gray-700 dark:text-gray-400",
    cell: {
      base: "bg-gray-50 px-6 py-3 group-first/head:first:rounded-tl-lg group-first/head:last:rounded-tr-lg dark:bg-gray-700"
    }
  },
  row: {
    base: "group/row",
    hovered: "hover:bg-gray-50 dark:hover:bg-gray-600",
    striped: "odd:bg-white even:bg-gray-50 odd:dark:bg-gray-800 even:dark:bg-gray-700"
  }
});

// node_modules/flowbite-react/dist/esm/components/Tabs/theme.mjs
var tabTheme = createTheme({
  base: "flex flex-col gap-2",
  tablist: {
    base: "flex text-center",
    variant: {
      default: "flex-wrap border-b border-gray-200 dark:border-gray-700",
      underline: "-mb-px flex-wrap border-b border-gray-200 dark:border-gray-700",
      pills: "flex-wrap space-x-2 text-sm font-medium text-gray-500 dark:text-gray-400",
      fullWidth: "grid w-full grid-flow-col divide-x divide-gray-200 rounded-none text-sm font-medium shadow dark:divide-gray-700 dark:text-gray-400"
    },
    tabitem: {
      base: "flex items-center justify-center rounded-t-lg p-4 text-sm font-medium first:ml-0 focus:outline-none focus:ring-4 focus:ring-cyan-300 disabled:cursor-not-allowed disabled:text-gray-400 disabled:dark:text-gray-500",
      variant: {
        default: {
          base: "rounded-t-lg",
          active: {
            on: "bg-gray-100 text-cyan-600 dark:bg-gray-800 dark:text-cyan-500",
            off: "text-gray-500 hover:bg-gray-50 hover:text-gray-600 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-300"
          }
        },
        underline: {
          base: "rounded-t-lg",
          active: {
            on: "active rounded-t-lg border-b-2 border-cyan-600 text-cyan-600 dark:border-cyan-500 dark:text-cyan-500",
            off: "border-b-2 border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-300"
          }
        },
        pills: {
          base: "",
          active: {
            on: "rounded-lg bg-cyan-600 text-white",
            off: "rounded-lg hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-gray-800 dark:hover:text-white"
          }
        },
        fullWidth: {
          base: "ml-0 flex w-full rounded-none first:ml-0",
          active: {
            on: "active rounded-none bg-gray-100 p-4 text-gray-900 dark:bg-gray-700 dark:text-white",
            off: "rounded-none bg-white hover:bg-gray-50 hover:text-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:text-white"
          }
        }
      },
      icon: "mr-2 h-5 w-5"
    }
  },
  tabitemcontainer: {
    base: "",
    variant: {
      default: "",
      underline: "",
      pills: "",
      fullWidth: ""
    }
  },
  tabpanel: "py-3"
});

// node_modules/flowbite-react/dist/esm/components/Textarea/theme.mjs
var textareaTheme = createTheme({
  base: "block w-full rounded-lg border text-sm disabled:cursor-not-allowed disabled:opacity-50",
  colors: {
    gray: "border-gray-300 bg-gray-50 text-gray-900 focus:border-cyan-500 focus:ring-cyan-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
    info: "border-cyan-500 bg-cyan-50 text-cyan-900 placeholder-cyan-700 focus:border-cyan-500 focus:ring-cyan-500 dark:border-cyan-400 dark:bg-cyan-100 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
    failure: "border-red-500 bg-red-50 text-red-900 placeholder-red-700 focus:border-red-500 focus:ring-red-500 dark:border-red-400 dark:bg-red-100 dark:focus:border-red-500 dark:focus:ring-red-500",
    warning: "border-yellow-500 bg-yellow-50 text-yellow-900 placeholder-yellow-700 focus:border-yellow-500 focus:ring-yellow-500 dark:border-yellow-400 dark:bg-yellow-100 dark:focus:border-yellow-500 dark:focus:ring-yellow-500",
    success: "border-green-500 bg-green-50 text-green-900 placeholder-green-700 focus:border-green-500 focus:ring-green-500 dark:border-green-400 dark:bg-green-100 dark:focus:border-green-500 dark:focus:ring-green-500"
  },
  withShadow: {
    on: "shadow-sm dark:shadow-sm-light",
    off: ""
  }
});

// node_modules/flowbite-react/dist/esm/components/TextInput/theme.mjs
var textInputTheme = createTheme({
  base: "flex",
  addon: "inline-flex items-center rounded-l-md border border-r-0 border-gray-300 bg-gray-200 px-3 text-sm text-gray-900 dark:border-gray-600 dark:bg-gray-600 dark:text-gray-400",
  field: {
    base: "relative w-full",
    icon: {
      base: "pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3",
      svg: "h-5 w-5 text-gray-500 dark:text-gray-400"
    },
    rightIcon: {
      base: "pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3",
      svg: "h-5 w-5 text-gray-500 dark:text-gray-400"
    },
    input: {
      base: "block w-full border disabled:cursor-not-allowed disabled:opacity-50",
      sizes: {
        sm: "p-2 sm:text-xs",
        md: "p-2.5 text-sm",
        lg: "p-4 sm:text-base"
      },
      colors: {
        gray: "border-gray-300 bg-gray-50 text-gray-900 focus:border-cyan-500 focus:ring-cyan-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
        info: "border-cyan-500 bg-cyan-50 text-cyan-900 placeholder-cyan-700 focus:border-cyan-500 focus:ring-cyan-500 dark:border-cyan-400 dark:bg-cyan-100 dark:focus:border-cyan-500 dark:focus:ring-cyan-500",
        failure: "border-red-500 bg-red-50 text-red-900 placeholder-red-700 focus:border-red-500 focus:ring-red-500 dark:border-red-400 dark:bg-red-100 dark:focus:border-red-500 dark:focus:ring-red-500",
        warning: "border-yellow-500 bg-yellow-50 text-yellow-900 placeholder-yellow-700 focus:border-yellow-500 focus:ring-yellow-500 dark:border-yellow-400 dark:bg-yellow-100 dark:focus:border-yellow-500 dark:focus:ring-yellow-500",
        success: "border-green-500 bg-green-50 text-green-900 placeholder-green-700 focus:border-green-500 focus:ring-green-500 dark:border-green-400 dark:bg-green-100 dark:focus:border-green-500 dark:focus:ring-green-500"
      },
      withRightIcon: {
        on: "pr-10",
        off: ""
      },
      withIcon: {
        on: "pl-10",
        off: ""
      },
      withAddon: {
        on: "rounded-r-lg",
        off: "rounded-lg"
      },
      withShadow: {
        on: "shadow-sm dark:shadow-sm-light",
        off: ""
      }
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Timeline/theme.mjs
var timelineTheme = createTheme({
  root: {
    direction: {
      horizontal: "sm:flex",
      vertical: "relative border-l border-gray-200 dark:border-gray-700"
    }
  },
  item: {
    root: {
      horizontal: "relative mb-6 sm:mb-0",
      vertical: "mb-10 ml-6"
    },
    content: {
      root: {
        base: "",
        horizontal: "mt-3 sm:pr-8",
        vertical: ""
      },
      body: {
        base: "mb-4 text-base font-normal text-gray-500 dark:text-gray-400"
      },
      time: {
        base: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500"
      },
      title: {
        base: "text-lg font-semibold text-gray-900 dark:text-white"
      }
    },
    point: {
      horizontal: "flex items-center",
      line: "hidden h-0.5 w-full bg-gray-200 dark:bg-gray-700 sm:flex",
      marker: {
        base: {
          horizontal: "absolute -left-1.5 h-3 w-3 rounded-full border border-white bg-gray-200 dark:border-gray-900 dark:bg-gray-700",
          vertical: "absolute -left-1.5 mt-1.5 h-3 w-3 rounded-full border border-white bg-gray-200 dark:border-gray-900 dark:bg-gray-700"
        },
        icon: {
          base: "h-3 w-3 text-cyan-600 dark:text-cyan-300",
          wrapper: "absolute -left-3 flex h-6 w-6 items-center justify-center rounded-full bg-cyan-200 ring-8 ring-white dark:bg-cyan-900 dark:ring-gray-900"
        }
      },
      vertical: ""
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Toast/theme.mjs
var toastTheme = createTheme({
  root: {
    base: "flex w-full max-w-xs items-center rounded-lg bg-white p-4 text-gray-500 shadow dark:bg-gray-800 dark:text-gray-400",
    closed: "opacity-0 ease-out"
  },
  toggle: {
    base: "-m-1.5 ml-auto inline-flex h-8 w-8 rounded-lg bg-white p-1.5 text-gray-400 hover:bg-gray-100 hover:text-gray-900 focus:ring-2 focus:ring-gray-300 dark:bg-gray-800 dark:text-gray-500 dark:hover:bg-gray-700 dark:hover:text-white",
    icon: "h-5 w-5 shrink-0"
  }
});

// node_modules/flowbite-react/dist/esm/components/ToggleSwitch/theme.mjs
var toggleSwitchTheme = createTheme({
  root: {
    base: "group flex rounded-lg focus:outline-none",
    active: {
      on: "cursor-pointer",
      off: "cursor-not-allowed opacity-50"
    },
    label: "ms-3 mt-0.5 text-start text-sm font-medium text-gray-900 dark:text-gray-300"
  },
  toggle: {
    base: "relative rounded-full border after:absolute after:rounded-full after:bg-white after:transition-all group-focus:ring-4 group-focus:ring-cyan-500/25",
    checked: {
      on: "after:translate-x-full after:border-white rtl:after:-translate-x-full",
      off: "border-gray-200 bg-gray-200 dark:border-gray-600 dark:bg-gray-700",
      color: {
        blue: "border-cyan-700 bg-cyan-700",
        dark: "bg-dark-700 border-dark-900",
        failure: "border-red-900 bg-red-700",
        gray: "border-gray-600 bg-gray-500",
        green: "border-green-700 bg-green-600",
        light: "bg-light-700 border-light-900",
        red: "border-red-900 bg-red-700",
        purple: "border-purple-900 bg-purple-700",
        success: "border-green-500 bg-green-500",
        yellow: "border-yellow-400 bg-yellow-400",
        warning: "border-yellow-600 bg-yellow-600",
        cyan: "border-cyan-500 bg-cyan-500",
        lime: "border-lime-400 bg-lime-400",
        indigo: "border-indigo-400 bg-indigo-400",
        teal: "bg-gradient-to-r from-teal-400 via-teal-500 to-teal-600 hover:bg-gradient-to-br focus:ring-4",
        info: "border-cyan-600 bg-cyan-600",
        pink: "border-pink-600 bg-pink-600"
      }
    },
    sizes: {
      sm: "h-5 w-9 min-w-9 after:left-px after:top-px after:h-4 after:w-4 rtl:after:right-px",
      md: "h-6 w-11 min-w-11 after:left-px after:top-px after:h-5 after:w-5 rtl:after:right-px",
      lg: "h-7 w-14 min-w-14 after:left-1 after:top-0.5 after:h-6 after:w-6 rtl:after:right-1"
    }
  }
});

// node_modules/flowbite-react/dist/esm/components/Tooltip/theme.mjs
var tooltipTheme = createTheme({
  target: "w-fit",
  animation: "transition-opacity",
  arrow: {
    base: "absolute z-10 h-2 w-2 rotate-45",
    style: {
      dark: "bg-gray-900 dark:bg-gray-700",
      light: "bg-white",
      auto: "bg-white dark:bg-gray-700"
    },
    placement: "-4px"
  },
  base: "absolute z-10 inline-block rounded-lg px-3 py-2 text-sm font-medium shadow-sm",
  hidden: "invisible opacity-0",
  style: {
    dark: "bg-gray-900 text-white dark:bg-gray-700",
    light: "border border-gray-200 bg-white text-gray-900",
    auto: "border border-gray-200 bg-white text-gray-900 dark:border-none dark:bg-gray-700 dark:text-white"
  },
  content: "relative z-20"
});

// node_modules/flowbite-react/dist/esm/theme.mjs
var theme = {
  accordion: accordionTheme,
  alert: alertTheme,
  avatar: avatarTheme,
  badge: badgeTheme,
  blockquote: blockquoteTheme,
  breadcrumb: breadcrumbTheme,
  button: buttonTheme,
  buttonGroup: buttonGroupTheme,
  card: cardTheme,
  carousel: carouselTheme,
  checkbox: checkboxTheme,
  clipboard: clipboardTheme,
  datepicker: datePickerTheme,
  darkThemeToggle: darkThemeToggleTheme,
  drawer: drawerTheme,
  dropdown: dropdownTheme,
  fileInput: fileInputTheme,
  floatingLabel: floatingLabelTheme,
  footer: footerTheme,
  helperText: helperTextTheme,
  hr: hrTheme,
  kbd: kbdTheme,
  label: labelTheme,
  listGroup: listGroupTheme,
  list: listTheme,
  megaMenu: megaMenuTheme,
  modal: modalTheme,
  navbar: navbarTheme,
  pagination: paginationTheme,
  popover: popoverTheme,
  progress: progressTheme,
  radio: radioTheme,
  rangeSlider: rangeSliderTheme,
  rating: ratingTheme,
  ratingAdvanced: ratingAdvancedTheme,
  select: selectTheme,
  textInput: textInputTheme,
  textarea: textareaTheme,
  toggleSwitch: toggleSwitchTheme,
  sidebar: sidebarTheme,
  spinner: spinnerTheme,
  table: tableTheme,
  tabs: tabTheme,
  timeline: timelineTheme,
  toast: toastTheme,
  tooltip: tooltipTheme
};

// node_modules/flowbite-react/dist/esm/theme-store/index.mjs
var store = {
  theme: cloneDeep(theme)
};
function setThemeMode(mode) {
  store.mode = mode;
}
function getThemeMode() {
  return store.mode;
}
function setTheme(theme$1) {
  if (theme$1) store.theme = mergeDeep(theme, theme$1);
}
function getTheme() {
  return cloneDeep(store.theme);
}

// node_modules/flowbite-react/dist/esm/components/Accordion/AccordionContent.mjs
import { jsx } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Accordion/AccordionPanelContext.mjs
import { createContext as createContext2, useContext as useContext4 } from "react";
var AccordionPanelContext = createContext2(void 0);
function useAccordionContext() {
  const context = useContext4(AccordionPanelContext);
  if (!context) {
    throw new Error("useAccordionContext should be used within the AccordionPanelContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Accordion/AccordionContent.mjs
var AccordionContent = ({
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { isOpen } = useAccordionContext();
  const theme4 = mergeDeep(getTheme().accordion.content, customTheme);
  return /* @__PURE__ */ jsx(
    "div",
    {
      className: twMerge(theme4.base, className),
      "data-testid": "flowbite-accordion-content",
      hidden: !isOpen,
      ...props,
      children
    }
  );
};

// node_modules/flowbite-react/dist/esm/components/Accordion/AccordionPanel.mjs
import { jsx as jsx2 } from "react/jsx-runtime";
import { useState as useState2 } from "react";
var AccordionPanel = ({ children, ...props }) => {
  const { alwaysOpen } = props;
  const [isOpen, setOpen] = useState2(props.isOpen);
  const provider = alwaysOpen ? {
    ...props,
    isOpen,
    setOpen: () => setOpen(!isOpen)
  } : props;
  return /* @__PURE__ */ jsx2(AccordionPanelContext.Provider, { value: provider, children });
};

// node_modules/flowbite-react/dist/esm/components/Accordion/AccordionTitle.mjs
import { jsxs, jsx as jsx3 } from "react/jsx-runtime";
var AccordionTitle = ({
  as: Heading = "h2",
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { arrowIcon: ArrowIcon, flush, isOpen, setOpen } = useAccordionContext();
  const onClick = () => typeof setOpen !== "undefined" && setOpen();
  const theme4 = mergeDeep(getTheme().accordion.title, customTheme);
  return /* @__PURE__ */ jsxs(
    "button",
    {
      className: twMerge(theme4.base, theme4.flush[flush ? "on" : "off"], theme4.open[isOpen ? "on" : "off"], className),
      onClick,
      type: "button",
      ...props,
      children: [
        /* @__PURE__ */ jsx3(Heading, { className: theme4.heading, "data-testid": "flowbite-accordion-heading", children }),
        ArrowIcon && /* @__PURE__ */ jsx3(
          ArrowIcon,
          {
            "aria-hidden": true,
            className: twMerge(theme4.arrow.base, theme4.arrow.open[isOpen ? "on" : "off"]),
            "data-testid": "flowbite-accordion-arrow"
          }
        )
      ]
    }
  );
};

// node_modules/flowbite-react/dist/esm/components/Accordion/Accordion.mjs
var AccordionComponent = ({
  alwaysOpen = false,
  arrowIcon = HiChevronDown,
  children,
  flush = false,
  collapseAll = false,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const [isOpen, setOpen] = useState3(collapseAll ? -1 : 0);
  const panels = useMemo2(
    () => Children2.map(
      children,
      (child, i2) => cloneElement2(child, {
        alwaysOpen,
        arrowIcon,
        flush,
        isOpen: isOpen === i2,
        setOpen: () => setOpen(isOpen === i2 ? -1 : i2)
      })
    ),
    [alwaysOpen, arrowIcon, children, flush, isOpen]
  );
  const theme4 = mergeDeep(getTheme().accordion.root, customTheme);
  return /* @__PURE__ */ jsx4(
    "div",
    {
      className: twMerge(theme4.base, theme4.flush[flush ? "on" : "off"], className),
      "data-testid": "flowbite-accordion",
      ...props,
      children: panels
    }
  );
};
AccordionComponent.displayName = "Accordion";
AccordionPanel.displayName = "Accordion.Panel";
AccordionTitle.displayName = "Accordion.Title";
AccordionContent.displayName = "Accordion.Content";
var Accordion = Object.assign(AccordionComponent, {
  Panel: AccordionPanel,
  Title: AccordionTitle,
  Content: AccordionContent
});

// node_modules/flowbite-react/dist/esm/components/Alert/Alert.mjs
import { jsxs as jsxs2, jsx as jsx5 } from "react/jsx-runtime";
var Alert = ({
  additionalContent,
  children,
  className,
  color = "info",
  icon: Icon,
  onDismiss,
  rounded = true,
  theme: customTheme = {},
  withBorderAccent,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().alert, customTheme);
  return /* @__PURE__ */ jsxs2(
    "div",
    {
      className: twMerge(
        theme4.base,
        theme4.color[color],
        rounded && theme4.rounded,
        withBorderAccent && theme4.borderAccent,
        className
      ),
      role: "alert",
      ...props,
      children: [
        /* @__PURE__ */ jsxs2("div", { className: theme4.wrapper, "data-testid": "flowbite-alert-wrapper", children: [
          Icon && /* @__PURE__ */ jsx5(Icon, { className: theme4.icon, "data-testid": "flowbite-alert-icon" }),
          /* @__PURE__ */ jsx5("div", { children }),
          typeof onDismiss === "function" && /* @__PURE__ */ jsx5(
            "button",
            {
              "aria-label": "Dismiss",
              className: twMerge(theme4.closeButton.base, theme4.closeButton.color[color]),
              onClick: onDismiss,
              type: "button",
              children: /* @__PURE__ */ jsx5(HiX, { "aria-hidden": true, className: theme4.closeButton.icon })
            }
          )
        ] }),
        additionalContent && /* @__PURE__ */ jsx5("div", { children: additionalContent })
      ]
    }
  );
};
Alert.displayName = "Alert";

// node_modules/flowbite-react/dist/esm/components/Avatar/Avatar.mjs
import { jsxs as jsxs4, jsx as jsx7 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Avatar/AvatarGroup.mjs
import { jsx as jsx6 } from "react/jsx-runtime";
var AvatarGroup = ({ children, className, theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().avatar.group, customTheme);
  return /* @__PURE__ */ jsx6("div", { "data-testid": "avatar-group-element", className: twMerge(theme4.base, className), ...props, children });
};
AvatarGroup.displayName = "Avatar.Group";

// node_modules/flowbite-react/dist/esm/components/Avatar/AvatarGroupCounter.mjs
import { jsxs as jsxs3 } from "react/jsx-runtime";
var AvatarGroupCounter = ({
  className,
  href,
  theme: customTheme = {},
  total,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().avatar.groupCounter, customTheme);
  return /* @__PURE__ */ jsxs3("a", { href, className: twMerge(theme4.base, className), ...props, children: [
    "+",
    total
  ] });
};
AvatarGroupCounter.displayName = "Avatar.GroupCounter";

// node_modules/flowbite-react/dist/esm/components/Avatar/Avatar.mjs
var AvatarComponent = ({
  alt = "",
  bordered = false,
  children,
  className,
  color = "light",
  img,
  placeholderInitials = "",
  rounded = false,
  size: size4 = "md",
  stacked = false,
  status,
  statusPosition = "top-left",
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().avatar, customTheme);
  const imgClassName = twMerge(
    theme4.root.img.base,
    bordered && theme4.root.bordered,
    bordered && theme4.root.color[color],
    rounded && theme4.root.rounded,
    stacked && theme4.root.stacked,
    theme4.root.img.on,
    theme4.root.size[size4]
  );
  const imgProps = {
    className: twMerge(imgClassName, theme4.root.img.on),
    "data-testid": "flowbite-avatar-img"
  };
  return /* @__PURE__ */ jsxs4("div", { className: twMerge(theme4.root.base, className), "data-testid": "flowbite-avatar", ...props, children: [
    /* @__PURE__ */ jsxs4("div", { className: "relative", children: [
      img ? typeof img === "string" ? /* @__PURE__ */ jsx7("img", { alt, src: img, ...imgProps }) : img({ alt, ...imgProps }) : placeholderInitials ? /* @__PURE__ */ jsx7(
        "div",
        {
          className: twMerge(
            theme4.root.img.off,
            theme4.root.initials.base,
            stacked && theme4.root.stacked,
            bordered && theme4.root.bordered,
            bordered && theme4.root.color[color],
            theme4.root.size[size4],
            rounded && theme4.root.rounded
          ),
          "data-testid": "flowbite-avatar-initials-placeholder",
          children: /* @__PURE__ */ jsx7("span", { className: twMerge(theme4.root.initials.text), "data-testid": "flowbite-avatar-initials-placeholder-text", children: placeholderInitials })
        }
      ) : /* @__PURE__ */ jsx7("div", { className: twMerge(imgClassName, theme4.root.img.off), "data-testid": "flowbite-avatar-img", children: /* @__PURE__ */ jsx7(
        "svg",
        {
          className: theme4.root.img.placeholder,
          fill: "currentColor",
          viewBox: "0 0 20 20",
          xmlns: "http://www.w3.org/2000/svg",
          children: /* @__PURE__ */ jsx7("path", { fillRule: "evenodd", d: "M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z", clipRule: "evenodd" })
        }
      ) }),
      status && /* @__PURE__ */ jsx7(
        "span",
        {
          "data-testid": "flowbite-avatar-status",
          className: twMerge(
            theme4.root.status.base,
            theme4.root.status[status],
            theme4.root.statusPosition[statusPosition]
          )
        }
      )
    ] }),
    children && /* @__PURE__ */ jsx7("div", { children })
  ] });
};
AvatarComponent.displayName = "Avatar";
var Avatar = Object.assign(AvatarComponent, {
  Group: AvatarGroup,
  Counter: AvatarGroupCounter
});

// node_modules/flowbite-react/dist/esm/components/Badge/Badge.mjs
import { jsx as jsx8, jsxs as jsxs5 } from "react/jsx-runtime";
var Badge = ({
  children,
  color = "info",
  href,
  icon: Icon,
  size: size4 = "xs",
  className,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().badge, customTheme);
  const Content = () => /* @__PURE__ */ jsxs5(
    "span",
    {
      className: twMerge(
        theme4.root.base,
        theme4.root.color[color],
        theme4.root.size[size4],
        theme4.icon[Icon ? "on" : "off"],
        className
      ),
      "data-testid": "flowbite-badge",
      ...props,
      children: [
        Icon && /* @__PURE__ */ jsx8(Icon, { "aria-hidden": true, className: theme4.icon.size[size4], "data-testid": "flowbite-badge-icon" }),
        children && /* @__PURE__ */ jsx8("span", { children })
      ]
    }
  );
  return href ? /* @__PURE__ */ jsx8("a", { className: theme4.root.href, href, children: /* @__PURE__ */ jsx8(Content, {}) }) : /* @__PURE__ */ jsx8(Content, {});
};
Badge.displayName = "Badge";

// node_modules/flowbite-react/dist/esm/components/Banner/Banner.mjs
import { jsx as jsx13 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Banner/BannerCollapseButton.mjs
import { jsx as jsx12 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Button/Button.mjs
import { jsx as jsx11, jsxs as jsxs7, Fragment as Fragment2 } from "react/jsx-runtime";
import { forwardRef as forwardRef2 } from "react";

// node_modules/flowbite-react/dist/esm/components/Spinner/Spinner.mjs
import { jsx as jsx9, jsxs as jsxs6 } from "react/jsx-runtime";
var Spinner = ({
  className,
  color = "info",
  light,
  size: size4 = "md",
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().spinner, customTheme);
  return /* @__PURE__ */ jsx9("span", { role: "status", ...props, children: /* @__PURE__ */ jsxs6(
    "svg",
    {
      fill: "none",
      viewBox: "0 0 100 101",
      className: twMerge(
        theme4.base,
        theme4.color[color],
        theme4.light[light ? "on" : "off"].base,
        theme4.light[light ? "on" : "off"].color[color],
        theme4.size[size4],
        className
      ),
      children: [
        /* @__PURE__ */ jsx9(
          "path",
          {
            d: "M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z",
            fill: "currentColor"
          }
        ),
        /* @__PURE__ */ jsx9(
          "path",
          {
            d: "M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z",
            fill: "currentFill"
          }
        )
      ]
    }
  ) });
};
Spinner.displayName = "Spinner";

// node_modules/flowbite-react/dist/esm/components/Button/ButtonBase.mjs
import { forwardRef, createElement as createElement5 } from "react";
var ButtonBase = forwardRef(
  ({ children, as: Component2, href, type = "button", ...props }, ref) => {
    const BaseComponent = Component2 || (href ? "a" : "button");
    return createElement5(BaseComponent, { ref, href, type, ...props }, children);
  }
);
ButtonBase.displayName = "ButtonBaseComponent";

// node_modules/flowbite-react/dist/esm/components/Button/ButtonGroup.mjs
import { jsx as jsx10 } from "react/jsx-runtime";
import { useMemo as useMemo3, Children as Children3, isValidElement as isValidElement2, cloneElement as cloneElement3 } from "react";
var processChildren = (children, outline, pill) => {
  return Children3.map(children, (child, index3) => {
    if (isValidElement2(child)) {
      const positionInGroupProp = child.type == Button ? { positionInGroup: determinePosition(index3, Children3.count(children)) } : {};
      if (child.props.children) {
        return cloneElement3(child, {
          ...child.props,
          children: processChildren(child.props.children, outline, pill),
          ...positionInGroupProp
        });
      } else {
        return cloneElement3(child, {
          outline,
          pill,
          ...positionInGroupProp
        });
      }
    }
    return child;
  });
};
var determinePosition = (index3, totalChildren) => {
  return index3 === 0 ? "start" : index3 === totalChildren - 1 ? "end" : "middle";
};
var ButtonGroup = ({
  children,
  className,
  outline,
  pill,
  theme: customTheme = {},
  ...props
}) => {
  const items = useMemo3(() => processChildren(children, outline, pill), [children, outline, pill]);
  const theme4 = mergeDeep(getTheme().buttonGroup, customTheme);
  return /* @__PURE__ */ jsx10("div", { className: twMerge(theme4.base, className), role: "group", ...props, children: items });
};
ButtonGroup.displayName = "Button.Group";

// node_modules/flowbite-react/dist/esm/components/Button/Button.mjs
var ButtonComponent = forwardRef2(
  ({
    children,
    className,
    color = "info",
    disabled,
    fullSized,
    isProcessing = false,
    processingLabel = "Loading...",
    processingSpinner,
    gradientDuoTone,
    gradientMonochrome,
    label,
    outline = false,
    pill = false,
    positionInGroup = "none",
    size: size4 = "md",
    theme: customTheme = {},
    ...props
  }, ref) => {
    const { buttonGroup: groupTheme, button: buttonTheme2 } = getTheme();
    const theme4 = mergeDeep(buttonTheme2, customTheme);
    const theirProps = props;
    return /* @__PURE__ */ jsx11(
      ButtonBase,
      {
        ref,
        disabled,
        className: twMerge(
          theme4.base,
          disabled && theme4.disabled,
          !gradientDuoTone && !gradientMonochrome && theme4.color[color],
          gradientDuoTone && !gradientMonochrome && theme4.gradientDuoTone[gradientDuoTone],
          !gradientDuoTone && gradientMonochrome && theme4.gradient[gradientMonochrome],
          outline && (theme4.outline.color[color] ?? theme4.outline.color.default),
          theme4.pill[pill ? "on" : "off"],
          fullSized && theme4.fullSized,
          groupTheme.position[positionInGroup],
          className
        ),
        ...theirProps,
        children: /* @__PURE__ */ jsx11(
          "span",
          {
            className: twMerge(
              theme4.inner.base,
              theme4.outline[outline ? "on" : "off"],
              theme4.outline.pill[outline && pill ? "on" : "off"],
              theme4.size[size4],
              outline && !theme4.outline.color[color] && theme4.inner.outline,
              isProcessing && theme4.isProcessing,
              isProcessing && theme4.inner.isProcessingPadding[size4],
              theme4.inner.position[positionInGroup]
            ),
            children: /* @__PURE__ */ jsxs7(Fragment2, { children: [
              isProcessing && /* @__PURE__ */ jsx11("span", { className: twMerge(theme4.spinnerSlot, theme4.spinnerLeftPosition[size4]), children: processingSpinner || /* @__PURE__ */ jsx11(Spinner, { size: size4 }) }),
              typeof children !== "undefined" ? children : /* @__PURE__ */ jsx11("span", { "data-testid": "flowbite-button-label", className: twMerge(theme4.label), children: isProcessing ? processingLabel : label })
            ] })
          }
        )
      }
    );
  }
);
ButtonComponent.displayName = "Button";
var Button = Object.assign(ButtonComponent, {
  Group: ButtonGroup
});

// node_modules/flowbite-react/dist/esm/components/Banner/BannerCollapseButton.mjs
var BannerCollapseButton = ({ children, ...props }) => {
  const onClick = (event) => {
    const collapseButton = event.target;
    const parentBanner = collapseButton.closest('[role="banner"]');
    parentBanner?.remove();
  };
  return /* @__PURE__ */ jsx12(Button, { onClick, ...props, children });
};
BannerCollapseButton.displayName = "Banner.CollapseButton";

// node_modules/flowbite-react/dist/esm/components/Banner/Banner.mjs
var BannerComponent = ({ children, ...props }) => {
  return /* @__PURE__ */ jsx13("div", { "data-testid": "flowbite-banner", role: "banner", tabIndex: -1, ...props, children });
};
BannerComponent.displayName = "Banner";
var Banner = Object.assign(BannerComponent, {
  CollapseButton: BannerCollapseButton
});

// node_modules/flowbite-react/dist/esm/components/Blockquote/Blockquote.mjs
import { jsx as jsx14 } from "react/jsx-runtime";
var Blockquote = ({ children, className, theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().blockquote, customTheme);
  return /* @__PURE__ */ jsx14("blockquote", { className: twMerge(theme4.root.base, className), "data-testid": "flowbite-blockquote", ...props, children });
};
Blockquote.displayName = "Blockquote";

// node_modules/flowbite-react/dist/esm/components/Breadcrumb/Breadcrumb.mjs
import { jsx as jsx16 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Breadcrumb/BreadcrumbItem.mjs
import { jsxs as jsxs8, jsx as jsx15 } from "react/jsx-runtime";
import { forwardRef as forwardRef3 } from "react";
var BreadcrumbItem = forwardRef3(
  ({ children, className, href, icon: Icon, theme: customTheme = {}, ...props }, ref) => {
    const isLink = typeof href !== "undefined";
    const Component2 = isLink ? "a" : "span";
    const theme4 = mergeDeep(getTheme().breadcrumb.item, customTheme);
    return /* @__PURE__ */ jsxs8("li", { className: twMerge(theme4.base, className), ...props, children: [
      /* @__PURE__ */ jsx15(HiOutlineChevronRight, { "aria-hidden": true, className: theme4.chevron, "data-testid": "flowbite-breadcrumb-separator" }),
      /* @__PURE__ */ jsxs8(
        Component2,
        {
          ref,
          className: theme4.href[isLink ? "on" : "off"],
          "data-testid": "flowbite-breadcrumb-item",
          href,
          children: [
            Icon && /* @__PURE__ */ jsx15(Icon, { "aria-hidden": true, className: theme4.icon }),
            children
          ]
        }
      )
    ] });
  }
);
BreadcrumbItem.displayName = "Breadcrumb.Item";

// node_modules/flowbite-react/dist/esm/components/Breadcrumb/Breadcrumb.mjs
var BreadcrumbComponent = ({
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().breadcrumb.root, customTheme);
  return /* @__PURE__ */ jsx16("nav", { "aria-label": "Breadcrumb", className: twMerge(theme4.base, className), ...props, children: /* @__PURE__ */ jsx16("ol", { className: theme4.list, children }) });
};
BreadcrumbComponent.displayName = "Breadcrumb";
var Breadcrumb = Object.assign(BreadcrumbComponent, {
  Item: BreadcrumbItem
});

// node_modules/flowbite-react/dist/esm/components/Card/Card.mjs
import { jsxs as jsxs9, jsx as jsx17 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/helpers/omit.mjs
var omit = (keys) => (obj) => {
  const result = {};
  for (const key in obj) {
    if (keys.includes(key)) {
      continue;
    }
    result[key] = obj[key];
  }
  return result;
};

// node_modules/flowbite-react/dist/esm/components/Card/Card.mjs
var removeCustomProps = omit([
  "renderImage",
  "imgSrc",
  "imgAlt",
  "children",
  "className",
  "horizontal",
  "href",
  "theme"
]);

// node_modules/flowbite-react/dist/esm/components/Carousel/Carousel.mjs
import { jsxs as jsxs10, jsx as jsx19, Fragment as Fragment3 } from "react/jsx-runtime";
import { useRef as useRef2, useState as useState4, useMemo as useMemo4, Children as Children4, cloneElement as cloneElement4, useCallback as useCallback2, useEffect as useEffect2 } from "react";

// node_modules/flowbite-react/dist/esm/helpers/drag-scroll/index.mjs
var import_classnames = __toESM(require_classnames(), 1);
var import_debounce = __toESM(require_debounce(), 1);
import { jsx as jsx18 } from "react/jsx-runtime";
import React3, { PureComponent } from "react";
var __defProp2 = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var SCROLL_END_DEBOUNCE = 300;
var LEFT_BUTTON = 0;
var ScrollContainer = class extends PureComponent {
  constructor(props) {
    super(props);
    __publicField(this, "container");
    __publicField(this, "scrolling");
    __publicField(this, "started");
    __publicField(this, "pressed");
    __publicField(this, "isMobile", false);
    __publicField(this, "internal");
    __publicField(this, "scrollLeft");
    __publicField(this, "scrollTop");
    __publicField(this, "clientX");
    __publicField(this, "clientY");
    __publicField(this, "onEndScroll", () => {
      this.scrolling = false;
      if (!this.pressed && this.started) {
        this.processEnd();
      }
    });
    __publicField(this, "onScroll", () => {
      const container = this.container.current;
      if (container.scrollLeft !== this.scrollLeft || container.scrollTop !== this.scrollTop) {
        this.scrolling = true;
        this.processScroll();
        this.onEndScroll();
      }
    });
    __publicField(this, "onTouchStart", (e3) => {
      const { nativeMobileScroll } = this.props;
      if (this.isDraggable(e3.target)) {
        this.internal = true;
        if (nativeMobileScroll && this.scrolling) {
          this.pressed = true;
        } else {
          const touch = e3.touches[0];
          this.processClick(touch.clientX, touch.clientY);
          if (!nativeMobileScroll && this.props.stopPropagation) {
            e3.stopPropagation();
          }
        }
      }
    });
    __publicField(this, "onTouchEnd", () => {
      const { nativeMobileScroll } = this.props;
      if (this.pressed) {
        if (this.started && (!this.scrolling || !nativeMobileScroll)) {
          this.processEnd();
        } else {
          this.pressed = false;
        }
        this.forceUpdate();
      }
    });
    __publicField(this, "onTouchMove", (e3) => {
      const { nativeMobileScroll } = this.props;
      if (this.pressed && (!nativeMobileScroll || !this.isMobile)) {
        const touch = e3.touches[0];
        if (touch) {
          this.processMove(touch.clientX, touch.clientY);
        }
        e3.preventDefault();
        if (this.props.stopPropagation) {
          e3.stopPropagation();
        }
      }
    });
    __publicField(this, "onMouseDown", (e3) => {
      if (this.isDraggable(e3.target) && this.isScrollable()) {
        this.internal = true;
        if (this.props?.buttons?.indexOf(e3.button) !== -1) {
          this.processClick(e3.clientX, e3.clientY);
          e3.preventDefault();
          if (this.props.stopPropagation) {
            e3.stopPropagation();
          }
        }
      }
    });
    __publicField(this, "onMouseMove", (e3) => {
      if (this.pressed) {
        this.processMove(e3.clientX, e3.clientY);
        e3.preventDefault();
        if (this.props.stopPropagation) {
          e3.stopPropagation();
        }
      }
    });
    __publicField(this, "onMouseUp", (e3) => {
      if (this.pressed) {
        if (this.started) {
          this.processEnd();
        } else {
          this.internal = false;
          this.pressed = false;
          this.forceUpdate();
          if (this.props.onClick) {
            this.props.onClick(e3);
          }
        }
        e3.preventDefault();
        if (this.props.stopPropagation) {
          e3.stopPropagation();
        }
      }
    });
    this.container = React3.createRef();
    this.onEndScroll = (0, import_debounce.default)(this.onEndScroll, SCROLL_END_DEBOUNCE);
    this.scrolling = false;
    this.started = false;
    this.pressed = false;
    this.internal = false;
    this.getRef = this.getRef.bind(this);
  }
  componentDidMount() {
    const { nativeMobileScroll } = this.props;
    const container = this.container.current;
    window.addEventListener("mouseup", this.onMouseUp);
    window.addEventListener("mousemove", this.onMouseMove);
    window.addEventListener("touchmove", this.onTouchMove, { passive: false });
    window.addEventListener("touchend", this.onTouchEnd);
    container.addEventListener("touchstart", this.onTouchStart, {
      passive: false
    });
    container.addEventListener("mousedown", this.onMouseDown, {
      passive: false
    });
    if (nativeMobileScroll) {
      this.isMobile = this.isMobileDevice();
      if (this.isMobile) {
        this.forceUpdate();
      }
    }
  }
  componentWillUnmount() {
    window.removeEventListener("mouseup", this.onMouseUp);
    window.removeEventListener("mousemove", this.onMouseMove);
    window.removeEventListener("touchmove", this.onTouchMove);
    window.removeEventListener("touchend", this.onTouchEnd);
  }
  getElement() {
    return this.container.current;
  }
  isMobileDevice() {
    return typeof window.orientation !== "undefined" || navigator.userAgent.indexOf("IEMobile") !== -1;
  }
  isDraggable(target) {
    const ignoreElements = this.props.ignoreElements;
    if (ignoreElements) {
      const closest = target.closest(ignoreElements);
      return closest === null || closest.contains(this.getElement());
    } else {
      return true;
    }
  }
  isScrollable() {
    const container = this.container.current;
    return container && (container.scrollWidth > container.clientWidth || container.scrollHeight > container.clientHeight);
  }
  processClick(clientX, clientY) {
    const container = this.container.current;
    this.scrollLeft = container?.scrollLeft;
    this.scrollTop = container?.scrollTop;
    this.clientX = clientX;
    this.clientY = clientY;
    this.pressed = true;
  }
  processStart(changeCursor = true) {
    const { onStartScroll } = this.props;
    this.started = true;
    if (changeCursor) {
      document.body.classList.add("cursor-grab");
    }
    if (onStartScroll) {
      onStartScroll({
        external: !this.internal
      });
    }
    this.forceUpdate();
  }
  // Process native scroll (scrollbar, mobile scroll)
  processScroll() {
    if (this.started) {
      const { onScroll } = this.props;
      if (onScroll) {
        onScroll({
          external: !this.internal
        });
      }
    } else {
      this.processStart(false);
    }
  }
  // Process non-native scroll
  processMove(newClientX, newClientY) {
    const { horizontal, vertical, activationDistance, onScroll } = this.props;
    const container = this.container.current;
    if (!this.started) {
      if (horizontal && Math.abs(newClientX - this.clientX) > activationDistance || vertical && Math.abs(newClientY - this.clientY) > activationDistance) {
        this.clientX = newClientX;
        this.clientY = newClientY;
        this.processStart();
      }
    } else {
      if (horizontal) {
        container.scrollLeft -= newClientX - this.clientX;
      }
      if (vertical) {
        container.scrollTop -= newClientY - this.clientY;
      }
      if (onScroll) {
        onScroll({ external: !this.internal });
      }
      this.clientX = newClientX;
      this.clientY = newClientY;
      this.scrollLeft = container.scrollLeft;
      this.scrollTop = container.scrollTop;
    }
  }
  processEnd() {
    const { onEndScroll } = this.props;
    const container = this.container.current;
    if (container && onEndScroll) {
      onEndScroll({
        external: !this.internal
      });
    }
    this.pressed = false;
    this.started = false;
    this.scrolling = false;
    this.internal = false;
    document.body.classList.remove("cursor-grab");
    this.forceUpdate();
  }
  getRef(el) {
    [this.container, this.props.innerRef].forEach((ref) => {
      if (ref) {
        if (typeof ref === "function") {
          ref(el);
        } else {
          ref.current = el;
        }
      }
    });
  }
  render() {
    const { children, draggingClassName, className, style, hideScrollbars } = this.props;
    return /* @__PURE__ */ jsx18(
      "div",
      {
        className: (0, import_classnames.default)(className, this.pressed && draggingClassName, {
          "!scroll-auto [&>*]:pointer-events-none [&>*]:cursor-grab": this.pressed,
          "overflow-auto": this.isMobile,
          "overflow-hidden !overflow-x-hidden [overflow:-moz-scrollbars-none] [scrollbar-width:none]": hideScrollbars,
          "[&::-webkit-scrollbar]:[-webkit-appearance:none !important] [&::-webkit-scrollbar]:!hidden [&::-webkit-scrollbar]:!h-0 [&::-webkit-scrollbar]:!w-0 [&::-webkit-scrollbar]:!bg-transparent": hideScrollbars
        }),
        style,
        ref: this.getRef,
        onScroll: this.onScroll,
        children
      }
    );
  }
};
__publicField(ScrollContainer, "defaultProps", {
  nativeMobileScroll: true,
  hideScrollbars: true,
  activationDistance: 10,
  vertical: true,
  horizontal: true,
  stopPropagation: false,
  style: {},
  buttons: [LEFT_BUTTON]
});

// node_modules/flowbite-react/dist/esm/helpers/is-client.mjs
var isClient = () => {
  return typeof window !== "undefined";
};

// node_modules/flowbite-react/dist/esm/components/Carousel/Carousel.mjs
var Carousel = ({
  children,
  indicators = true,
  leftControl,
  rightControl,
  slide = true,
  draggable = true,
  slideInterval,
  className,
  theme: customTheme = {},
  onSlideChange = null,
  pauseOnHover = false,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().carousel, customTheme);
  const isDeviceMobile = isClient() && navigator.userAgent.indexOf("IEMobile") !== -1;
  const carouselContainer = useRef2(null);
  const [activeItem, setActiveItem] = useState4(0);
  const [isDragging, setIsDragging] = useState4(false);
  const [isHovering, setIsHovering] = useState4(false);
  const didMountRef = useRef2(false);
  const items = useMemo4(
    () => Children4.map(
      children,
      (child) => cloneElement4(child, {
        className: twMerge(theme4.item.base, child.props.className)
      })
    ),
    [children, theme4.item.base]
  );
  const navigateTo = useCallback2(
    (item) => () => {
      if (!items) return;
      item = (item + items.length) % items.length;
      if (carouselContainer.current) {
        carouselContainer.current.scrollLeft = carouselContainer.current.clientWidth * item;
      }
      setActiveItem(item);
    },
    [items]
  );
  useEffect2(() => {
    if (carouselContainer.current && !isDragging && carouselContainer.current.scrollLeft !== 0) {
      setActiveItem(Math.round(carouselContainer.current.scrollLeft / carouselContainer.current.clientWidth));
    }
  }, [isDragging]);
  useEffect2(() => {
    if (slide && !(pauseOnHover && isHovering)) {
      const intervalId = setInterval(() => !isDragging && navigateTo(activeItem + 1)(), slideInterval ?? 3e3);
      return () => clearInterval(intervalId);
    }
  }, [activeItem, isDragging, navigateTo, slide, slideInterval, pauseOnHover, isHovering]);
  useEffect2(() => {
    if (didMountRef.current) {
      onSlideChange && onSlideChange(activeItem);
    } else {
      didMountRef.current = true;
    }
  }, [onSlideChange, activeItem]);
  const handleDragging = (dragging) => () => setIsDragging(dragging);
  const setHoveringTrue = useCallback2(() => setIsHovering(true), [setIsHovering]);
  const setHoveringFalse = useCallback2(() => setIsHovering(false), [setIsHovering]);
  return /* @__PURE__ */ jsxs10(
    "div",
    {
      className: twMerge(theme4.root.base, className),
      "data-testid": "carousel",
      onMouseEnter: setHoveringTrue,
      onMouseLeave: setHoveringFalse,
      onTouchStart: setHoveringTrue,
      onTouchEnd: setHoveringFalse,
      ...props,
      children: [
        /* @__PURE__ */ jsx19(
          ScrollContainer,
          {
            className: twMerge(theme4.scrollContainer.base, (isDeviceMobile || !isDragging) && theme4.scrollContainer.snap),
            draggingClassName: "cursor-grab",
            innerRef: carouselContainer,
            onEndScroll: handleDragging(false),
            onStartScroll: handleDragging(draggable),
            vertical: false,
            horizontal: draggable,
            children: items?.map((item, index3) => /* @__PURE__ */ jsx19(
              "div",
              {
                className: theme4.item.wrapper[draggable ? "on" : "off"],
                "data-active": activeItem === index3,
                "data-testid": "carousel-item",
                children: item
              },
              index3
            ))
          }
        ),
        indicators && /* @__PURE__ */ jsx19("div", { className: theme4.indicators.wrapper, children: items?.map((_, index3) => /* @__PURE__ */ jsx19(
          "button",
          {
            className: twMerge(theme4.indicators.base, theme4.indicators.active[index3 === activeItem ? "on" : "off"]),
            onClick: navigateTo(index3),
            "data-testid": "carousel-indicator",
            "aria-label": `Slide ${index3 + 1}`
          },
          index3
        )) }),
        items && /* @__PURE__ */ jsxs10(Fragment3, { children: [
          /* @__PURE__ */ jsx19("div", { className: theme4.root.leftControl, children: /* @__PURE__ */ jsx19(
            "button",
            {
              className: "group",
              "data-testid": "carousel-left-control",
              onClick: navigateTo(activeItem - 1),
              type: "button",
              "aria-label": "Previous slide",
              children: leftControl ? leftControl : /* @__PURE__ */ jsx19(DefaultLeftControl, { theme: customTheme })
            }
          ) }),
          /* @__PURE__ */ jsx19("div", { className: theme4.root.rightControl, children: /* @__PURE__ */ jsx19(
            "button",
            {
              className: "group",
              "data-testid": "carousel-right-control",
              onClick: navigateTo(activeItem + 1),
              type: "button",
              "aria-label": "Next slide",
              children: rightControl ? rightControl : /* @__PURE__ */ jsx19(DefaultRightControl, { theme: customTheme })
            }
          ) })
        ] })
      ]
    }
  );
};
var DefaultLeftControl = ({ theme: customTheme = {} }) => {
  const theme4 = mergeDeep(getTheme().carousel, customTheme);
  return /* @__PURE__ */ jsx19("span", { className: theme4.control.base, children: /* @__PURE__ */ jsx19(HiOutlineChevronLeft, { className: theme4.control.icon }) });
};
var DefaultRightControl = ({ theme: customTheme = {} }) => {
  const theme4 = mergeDeep(getTheme().carousel, customTheme);
  return /* @__PURE__ */ jsx19("span", { className: theme4.control.base, children: /* @__PURE__ */ jsx19(HiOutlineChevronRight, { className: theme4.control.icon }) });
};
Carousel.displayName = "Carousel";

// node_modules/flowbite-react/dist/esm/components/Checkbox/Checkbox.mjs
import { jsx as jsx20 } from "react/jsx-runtime";
import { forwardRef as forwardRef4 } from "react";
var Checkbox = forwardRef4(
  ({ className, color = "default", theme: customTheme = {}, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().checkbox, customTheme);
    return /* @__PURE__ */ jsx20(
      "input",
      {
        ref,
        type: "checkbox",
        className: twMerge(theme4.root.base, theme4.root.color[color], className),
        ...props
      }
    );
  }
);
Checkbox.displayName = "Checkbox";

// node_modules/flowbite-react/dist/esm/components/Clipboard/Clipboard.mjs
import { jsx as jsx25 } from "react/jsx-runtime";
import { forwardRef as forwardRef8, useState as useState10 } from "react";

// node_modules/flowbite-react/dist/esm/components/Tooltip/Tooltip.mjs
import { jsx as jsx22 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Floating/Floating.mjs
import { jsxs as jsxs11, Fragment as Fragment5, jsx as jsx21 } from "react/jsx-runtime";

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
import * as React5 from "react";
import { useLayoutEffect as useLayoutEffect2, useEffect as useEffect5, useRef as useRef5 } from "react";

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e3) {
      return false;
    }
  });
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isTopLayer(currentNode)) {
      return null;
    }
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs
function activeElement(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {
    var _activeElement;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot(rootNode)) {
    let next = child;
    while (next) {
      if (parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    }
  }
  return false;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  if (isAndroid() && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  if (isJSDOM()) return false;
  return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "touch";
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isAndroid() {
  const re = /android/i;
  return re.test(getPlatform()) || re.test(getUserAgent());
}
function isMac() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isJSDOM() {
  return getUserAgent().includes("jsdom/");
}
function isMouseLikePointerType(pointerType, strict) {
  const values = ["mouse", "pen"];
  if (!strict) {
    values.push("", void 0);
  }
  return values.includes(pointerType);
}
function isReactEvent(event) {
  return "nativeEvent" in event;
}
function isRootElement(element) {
  return element.matches("html,body");
}
function getDocument(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
function isEventTargetWithin(event, node) {
  if (node == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node);
  }
  const e3 = event;
  return e3.target != null && node.contains(e3.target);
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
var TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}
function isTypeableCombobox(element) {
  if (!element) return false;
  return element.getAttribute("role") === "combobox" && isTypeableElement(element);
}

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = /* @__PURE__ */ sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i2 = 0; i2 < validMiddleware.length; i2++) {
    const {
      name,
      fn
    } = validMiddleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i2 = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options2) {
  var _await$platform$isEle;
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options2, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options2) => ({
  name: "arrow",
  options: options2,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options2, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset4 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset4,
        centerOffset: center - offset4 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
var autoPlacement = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "autoPlacement",
    options: options2,
    async fn(state) {
      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
      const {
        rects,
        middlewareData,
        placement,
        platform: platform2,
        elements
      } = state;
      const {
        crossAxis = false,
        alignment,
        allowedPlacements = placements,
        autoAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options2, state);
      const placements$1 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
      const currentPlacement = placements$1[currentIndex];
      if (currentPlacement == null) {
        return {};
      }
      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
      if (placement !== currentPlacement) {
        return {
          reset: {
            placement: placements$1[0]
          }
        };
      }
      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
      const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements$1[currentIndex + 1];
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByMostSpace = allOverflows.map((d) => {
        const alignment2 = getAlignment(d.placement);
        return [d.placement, alignment2 && crossAxis ? (
          // Check along the mainAxis and main crossAxis side.
          d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0)
        ) : (
          // Check only the mainAxis.
          d.overflows[0]
        ), d.overflows];
      }).sort((a2, b) => a2[1] - b[1]);
      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d) => d[2].slice(
        0,
        // Aligned placements should not check their opposite crossAxis
        // side.
        getAlignment(d[0]) ? 2 : 3
      ).every((v) => v <= 0));
      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
      if (resetPlacement !== placement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};
var flip = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "flip",
    options: options2,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options2, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a2, b) => a2.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b) => a2[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options2) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options2, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options2) {
  if (options2 === void 0) {
    options2 = 0;
  }
  return {
    name: "offset",
    options: options2,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options2);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "shift",
    options: options2,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options2, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId2;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId2);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options2 = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId2 = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options2,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e3) {
      io = new IntersectionObserver(handleObserve, options2);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options2;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var autoPlacement2 = autoPlacement;
var shift2 = shift;
var flip2 = flip;
var arrow2 = arrow;
var computePosition2 = (reference, floating, options2) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options2
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
import * as React4 from "react";
import { useLayoutEffect, useEffect as useEffect3 } from "react";
import * as ReactDOM from "react-dom";
var index = typeof document !== "undefined" ? useLayoutEffect : useEffect3;
function deepEqual(a2, b) {
  if (a2 === b) {
    return true;
  }
  if (typeof a2 !== typeof b) {
    return false;
  }
  if (typeof a2 === "function" && a2.toString() === b.toString()) {
    return true;
  }
  let length;
  let i2;
  let keys;
  if (a2 && b && typeof a2 === "object") {
    if (Array.isArray(a2)) {
      length = a2.length;
      if (length !== b.length) return false;
      for (i2 = length; i2-- !== 0; ) {
        if (!deepEqual(a2[i2], b[i2])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a2);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i2 = length; i2-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i2])) {
        return false;
      }
    }
    for (i2 = length; i2-- !== 0; ) {
      const key = keys[i2];
      if (key === "_owner" && a2.$$typeof) {
        continue;
      }
      if (!deepEqual(a2[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a2 !== a2 && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React4.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options2;
  const [data, setData] = React4.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React4.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React4.useState(null);
  const [_floating, _setFloating] = React4.useState(null);
  const setReference = React4.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React4.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React4.useRef(null);
  const floatingRef = React4.useRef(null);
  const dataRef = React4.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const update = React4.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React4.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React4.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React4.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React4.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React4.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var arrow$1 = (options2) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options: options2,
    fn(state) {
      const {
        element,
        padding
      } = typeof options2 === "function" ? options2(state) : options2;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options2, deps) => ({
  ...offset2(options2),
  options: [options2, deps]
});
var shift3 = (options2, deps) => ({
  ...shift2(options2),
  options: [options2, deps]
});
var flip3 = (options2, deps) => ({
  ...flip2(options2),
  options: [options2, deps]
});
var autoPlacement3 = (options2, deps) => ({
  ...autoPlacement2(options2),
  options: [options2, deps]
});
var arrow3 = (options2, deps) => ({
  ...arrow$1(options2),
  options: [options2, deps]
});

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = /* @__PURE__ */ candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options2) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options2);
      if (options2.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options2.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options2.getShadowRoot === "function" && options2.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options2.shadowRootFilter || options2.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options2);
        if (options2.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a2, b) {
  return a2.tabIndex === b.tabIndex ? a2.documentOrder - b.documentOrder : a2.tabIndex - b.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r2 = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r2;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i2 = 0; i2 < nodes.length; i2++) {
    if (nodes[i2].checked && nodes[i2].form === form) {
      return nodes[i2];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i2 = 0; i2 < parentNode.children.length; i2++) {
          var child = parentNode.children.item(i2);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options2, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden(node, options2) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options2, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options2, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i2) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i2,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options2) {
  options2 = options2 || {};
  var candidates;
  if (options2.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options2.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options2),
      flatten: false,
      getShadowRoot: options2.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options2.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options2));
  }
  return sortByOrder(candidates);
};
var isTabbable = function isTabbable2(node, options2) {
  options2 = options2 || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, candidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorTabbable(options2, node);
};

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
import { createPortal, flushSync as flushSync2 } from "react-dom";
function useMergeRefs(refs) {
  return React5.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }, refs);
}
var SafeReact = {
  ...React5
};
var useInsertionEffect = SafeReact.useInsertionEffect;
var useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
function useEffectEvent(callback) {
  const ref = React5.useRef(() => {
    if (true) {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React5.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}
var ARROW_UP = "ArrowUp";
var ARROW_DOWN = "ArrowDown";
var ARROW_LEFT = "ArrowLeft";
var ARROW_RIGHT = "ArrowRight";
function isDifferentRow(index3, cols, prevRow) {
  return Math.floor(index3 / cols) !== prevRow;
}
function isIndexOutOfBounds(listRef, index3) {
  return index3 < 0 || index3 >= listRef.current.length;
}
function getMinIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    disabledIndices
  });
}
function getMaxIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    decrement: true,
    startingIndex: listRef.current.length,
    disabledIndices
  });
}
function findNonDisabledIndex(listRef, _temp) {
  let {
    startingIndex = -1,
    decrement = false,
    disabledIndices,
    amount = 1
  } = _temp === void 0 ? {} : _temp;
  const list = listRef.current;
  let index3 = startingIndex;
  do {
    index3 += decrement ? -amount : amount;
  } while (index3 >= 0 && index3 <= list.length - 1 && isDisabled(list, index3, disabledIndices));
  return index3;
}
function getGridNavigatedIndex(elementsRef, _ref) {
  let {
    event,
    orientation,
    loop,
    cols,
    disabledIndices,
    minIndex,
    maxIndex,
    prevIndex,
    stopEvent: stop = false
  } = _ref;
  let nextIndex = prevIndex;
  if (event.key === ARROW_UP) {
    stop && stopEvent(event);
    if (prevIndex === -1) {
      nextIndex = maxIndex;
    } else {
      nextIndex = findNonDisabledIndex(elementsRef, {
        startingIndex: nextIndex,
        amount: cols,
        decrement: true,
        disabledIndices
      });
      if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {
        const col = prevIndex % cols;
        const maxCol = maxIndex % cols;
        const offset4 = maxIndex - (maxCol - col);
        if (maxCol === col) {
          nextIndex = maxIndex;
        } else {
          nextIndex = maxCol > col ? offset4 : offset4 - cols;
        }
      }
    }
    if (isIndexOutOfBounds(elementsRef, nextIndex)) {
      nextIndex = prevIndex;
    }
  }
  if (event.key === ARROW_DOWN) {
    stop && stopEvent(event);
    if (prevIndex === -1) {
      nextIndex = minIndex;
    } else {
      nextIndex = findNonDisabledIndex(elementsRef, {
        startingIndex: prevIndex,
        amount: cols,
        disabledIndices
      });
      if (loop && prevIndex + cols > maxIndex) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex % cols - cols,
          amount: cols,
          disabledIndices
        });
      }
    }
    if (isIndexOutOfBounds(elementsRef, nextIndex)) {
      nextIndex = prevIndex;
    }
  }
  if (orientation === "both") {
    const prevRow = floor(prevIndex / cols);
    if (event.key === ARROW_RIGHT) {
      stop && stopEvent(event);
      if (prevIndex % cols !== cols - 1) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex,
          disabledIndices
        });
        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
          nextIndex = findNonDisabledIndex(elementsRef, {
            startingIndex: prevIndex - prevIndex % cols - 1,
            disabledIndices
          });
        }
      } else if (loop) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex - prevIndex % cols - 1,
          disabledIndices
        });
      }
      if (isDifferentRow(nextIndex, cols, prevRow)) {
        nextIndex = prevIndex;
      }
    }
    if (event.key === ARROW_LEFT) {
      stop && stopEvent(event);
      if (prevIndex % cols !== 0) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex,
          decrement: true,
          disabledIndices
        });
        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
          nextIndex = findNonDisabledIndex(elementsRef, {
            startingIndex: prevIndex + (cols - prevIndex % cols),
            decrement: true,
            disabledIndices
          });
        }
      } else if (loop) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex + (cols - prevIndex % cols),
          decrement: true,
          disabledIndices
        });
      }
      if (isDifferentRow(nextIndex, cols, prevRow)) {
        nextIndex = prevIndex;
      }
    }
    const lastRow = floor(maxIndex / cols) === prevRow;
    if (isIndexOutOfBounds(elementsRef, nextIndex)) {
      if (loop && lastRow) {
        nextIndex = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex - prevIndex % cols - 1,
          disabledIndices
        });
      } else {
        nextIndex = prevIndex;
      }
    }
  }
  return nextIndex;
}
function buildCellMap(sizes, cols, dense) {
  const cellMap = [];
  let startIndex = 0;
  sizes.forEach((_ref2, index3) => {
    let {
      width,
      height
    } = _ref2;
    if (width > cols) {
      if (true) {
        throw new Error("[Floating UI]: Invalid grid - item width at index " + index3 + " is greater than grid columns");
      }
    }
    let itemPlaced = false;
    if (dense) {
      startIndex = 0;
    }
    while (!itemPlaced) {
      const targetCells = [];
      for (let i2 = 0; i2 < width; i2++) {
        for (let j = 0; j < height; j++) {
          targetCells.push(startIndex + i2 + j * cols);
        }
      }
      if (startIndex % cols + width <= cols && targetCells.every((cell) => cellMap[cell] == null)) {
        targetCells.forEach((cell) => {
          cellMap[cell] = index3;
        });
        itemPlaced = true;
      } else {
        startIndex++;
      }
    }
  });
  return [...cellMap];
}
function getCellIndexOfCorner(index3, sizes, cellMap, cols, corner) {
  if (index3 === -1) return -1;
  const firstCellIndex = cellMap.indexOf(index3);
  const sizeItem = sizes[index3];
  switch (corner) {
    case "tl":
      return firstCellIndex;
    case "tr":
      if (!sizeItem) {
        return firstCellIndex;
      }
      return firstCellIndex + sizeItem.width - 1;
    case "bl":
      if (!sizeItem) {
        return firstCellIndex;
      }
      return firstCellIndex + (sizeItem.height - 1) * cols;
    case "br":
      return cellMap.lastIndexOf(index3);
  }
}
function getCellIndices(indices, cellMap) {
  return cellMap.flatMap((index3, cellIndex) => indices.includes(index3) ? [cellIndex] : []);
}
function isDisabled(list, index3, disabledIndices) {
  if (disabledIndices) {
    return disabledIndices.includes(index3);
  }
  const element = list[index3];
  return element == null || element.hasAttribute("disabled") || element.getAttribute("aria-disabled") === "true";
}
var rafId = 0;
function enqueueFocus(el, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    preventScroll = false,
    cancelPrevious = true,
    sync = false
  } = options2;
  cancelPrevious && cancelAnimationFrame(rafId);
  const exec = () => el == null ? void 0 : el.focus({
    preventScroll
  });
  if (sync) {
    exec();
  } else {
    rafId = requestAnimationFrame(exec);
  }
}
var index2 = typeof document !== "undefined" ? useLayoutEffect2 : useEffect5;
function sortByDocumentPosition(a2, b) {
  const position = a2.compareDocumentPosition(b);
  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    return -1;
  }
  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {
    return 1;
  }
  return 0;
}
function areMapsEqual(map1, map2) {
  if (map1.size !== map2.size) {
    return false;
  }
  for (const [key, value] of map1.entries()) {
    if (value !== map2.get(key)) {
      return false;
    }
  }
  return true;
}
var FloatingListContext = /* @__PURE__ */ React5.createContext({
  register: () => {
  },
  unregister: () => {
  },
  map: /* @__PURE__ */ new Map(),
  elementsRef: {
    current: []
  }
});
function FloatingList(props) {
  const {
    children,
    elementsRef,
    labelsRef
  } = props;
  const [map, setMap] = React5.useState(() => /* @__PURE__ */ new Map());
  const register = React5.useCallback((node) => {
    setMap((prevMap) => new Map(prevMap).set(node, null));
  }, []);
  const unregister = React5.useCallback((node) => {
    setMap((prevMap) => {
      const map2 = new Map(prevMap);
      map2.delete(node);
      return map2;
    });
  }, []);
  index2(() => {
    const newMap = new Map(map);
    const nodes = Array.from(newMap.keys()).sort(sortByDocumentPosition);
    nodes.forEach((node, index3) => {
      newMap.set(node, index3);
    });
    if (!areMapsEqual(map, newMap)) {
      setMap(newMap);
    }
  }, [map]);
  return /* @__PURE__ */ React5.createElement(FloatingListContext.Provider, {
    value: React5.useMemo(() => ({
      register,
      unregister,
      map,
      elementsRef,
      labelsRef
    }), [register, unregister, map, elementsRef, labelsRef])
  }, children);
}
function useListItem(props) {
  if (props === void 0) {
    props = {};
  }
  const {
    label
  } = props;
  const {
    register,
    unregister,
    map,
    elementsRef,
    labelsRef
  } = React5.useContext(FloatingListContext);
  const [index$1, setIndex] = React5.useState(null);
  const componentRef = React5.useRef(null);
  const ref = React5.useCallback((node) => {
    componentRef.current = node;
    if (index$1 !== null) {
      elementsRef.current[index$1] = node;
      if (labelsRef) {
        var _node$textContent;
        const isLabelDefined = label !== void 0;
        labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;
      }
    }
  }, [index$1, elementsRef, labelsRef, label]);
  index2(() => {
    const node = componentRef.current;
    if (node) {
      register(node);
      return () => {
        unregister(node);
      };
    }
  }, [register, unregister]);
  index2(() => {
    const index3 = componentRef.current ? map.get(componentRef.current) : null;
    if (index3 != null) {
      setIndex(index3);
    }
  }, [map]);
  return React5.useMemo(() => ({
    ref,
    index: index$1 == null ? -1 : index$1
  }), [index$1, ref]);
}
var horizontalKeys = [ARROW_LEFT, ARROW_RIGHT];
var verticalKeys = [ARROW_UP, ARROW_DOWN];
var allKeys = [...horizontalKeys, ...verticalKeys];
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var serverHandoffComplete = false;
var count = 0;
var genId = () => (
  // Ensure the id is unique with multiple independent versions of Floating UI
  // on <React 18
  "floating-ui-" + Math.random().toString(36).slice(2, 6) + count++
);
function useFloatingId() {
  const [id, setId] = React5.useState(() => serverHandoffComplete ? genId() : void 0);
  index2(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React5.useEffect(() => {
    serverHandoffComplete = true;
  }, []);
  return id;
}
var useReactId = SafeReact.useId;
var useId = useReactId || useFloatingId;
var devMessageSet;
if (true) {
  devMessageSet = /* @__PURE__ */ new Set();
}
function warn2() {
  var _devMessageSet;
  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {
    messages[_key] = arguments[_key];
  }
  const message = "Floating UI: " + messages.join(" ");
  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {
    var _devMessageSet2;
    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);
    console.warn(message);
  }
}
function error() {
  var _devMessageSet3;
  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    messages[_key2] = arguments[_key2];
  }
  const message = "Floating UI: " + messages.join(" ");
  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {
    var _devMessageSet4;
    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);
    console.error(message);
  }
}
function createPubSub() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null || _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map.set(event, [...map.get(event) || [], listener]);
    },
    off(event, listener) {
      var _map$get2;
      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter((l) => l !== listener)) || []);
    }
  };
}
var FloatingNodeContext = /* @__PURE__ */ React5.createContext(null);
var FloatingTreeContext = /* @__PURE__ */ React5.createContext(null);
var useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = React5.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
var useFloatingTree = () => React5.useContext(FloatingTreeContext);
function createAttribute(name) {
  return "data-floating-ui-" + name;
}
function useLatestRef2(value) {
  const ref = useRef5(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
var safePolygonIdentifier = /* @__PURE__ */ createAttribute("safe-polygon");
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
function useHover(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements: {
      domReference,
      floating
    }
  } = context;
  const {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move = true
  } = props;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef2(handleClose);
  const delayRef = useLatestRef2(delay);
  const pointerTypeRef = React5.useRef();
  const timeoutRef = React5.useRef(-1);
  const handlerRef = React5.useRef();
  const restTimeoutRef = React5.useRef(-1);
  const blockMouseMoveRef = React5.useRef(true);
  const performedPointerEventsMutationRef = React5.useRef(false);
  const unbindMouseMoveRef = React5.useRef(() => {
  });
  const isHoverOpen = React5.useCallback(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
    return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
  }, [dataRef]);
  React5.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onOpenChange2(_ref) {
      let {
        open: open2
      } = _ref;
      if (!open2) {
        clearTimeout(timeoutRef.current);
        clearTimeout(restTimeoutRef.current);
        blockMouseMoveRef.current = true;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [enabled, events]);
  React5.useEffect(() => {
    if (!enabled || !handleCloseRef.current || !open) {
      return;
    }
    function onLeave(event) {
      if (isHoverOpen()) {
        onOpenChange(false, event, "hover");
      }
    }
    const html = getDocument(floating).documentElement;
    html.addEventListener("mouseleave", onLeave);
    return () => {
      html.removeEventListener("mouseleave", onLeave);
    };
  }, [floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);
  const closeWithDelay = React5.useCallback(function(event, runElseBranch, reason) {
    if (runElseBranch === void 0) {
      runElseBranch = true;
    }
    if (reason === void 0) {
      reason = "hover";
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);
    } else if (runElseBranch) {
      clearTimeout(timeoutRef.current);
      onOpenChange(false, event, reason);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = useEffectEvent(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = void 0;
  });
  const clearPointerEvents = useEffectEvent(() => {
    if (performedPointerEventsMutationRef.current) {
      const body = getDocument(floating).body;
      body.style.pointerEvents = "";
      body.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  });
  React5.useEffect(() => {
    if (!enabled) {
      return;
    }
    function isClickLikeOpenEvent() {
      return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
    }
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, "open")) {
        return;
      }
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = window.setTimeout(() => {
          onOpenChange(true, event, "hover");
        }, openDelay);
      } else {
        onOpenChange(true, event, "hover");
      }
    }
    function onMouseLeave(event) {
      if (isClickLikeOpenEvent()) return;
      unbindMouseMoveRef.current();
      const doc = getDocument(floating);
      clearTimeout(restTimeoutRef.current);
      if (handleCloseRef.current && dataRef.current.floatingContext) {
        if (!open) {
          clearTimeout(timeoutRef.current);
        }
        handlerRef.current = handleCloseRef.current({
          ...dataRef.current.floatingContext,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            closeWithDelay(event, true, "safe-polygon");
          }
        });
        const handler = handlerRef.current;
        doc.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc.removeEventListener("mousemove", handler);
        };
        return;
      }
      const shouldClose = pointerTypeRef.current === "touch" ? !contains(floating, event.relatedTarget) : true;
      if (shouldClose) {
        closeWithDelay(event);
      }
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent()) return;
      if (!dataRef.current.floatingContext) return;
      handleCloseRef.current == null || handleCloseRef.current({
        ...dataRef.current.floatingContext,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          closeWithDelay(event);
        }
      })(event);
    }
    if (isElement(domReference)) {
      const ref = domReference;
      open && ref.addEventListener("mouseleave", onScrollMouseLeave);
      floating == null || floating.addEventListener("mouseleave", onScrollMouseLeave);
      move && ref.addEventListener("mousemove", onMouseEnter, {
        once: true
      });
      ref.addEventListener("mouseenter", onMouseEnter);
      ref.addEventListener("mouseleave", onMouseLeave);
      return () => {
        open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
        floating == null || floating.removeEventListener("mouseleave", onScrollMouseLeave);
        move && ref.removeEventListener("mousemove", onMouseEnter);
        ref.removeEventListener("mouseenter", onMouseEnter);
        ref.removeEventListener("mouseleave", onMouseLeave);
      };
    }
  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);
  index2(() => {
    var _handleCloseRef$curre;
    if (!enabled) {
      return;
    }
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
      const body = getDocument(floating).body;
      body.setAttribute(safePolygonIdentifier, "");
      body.style.pointerEvents = "none";
      performedPointerEventsMutationRef.current = true;
      if (isElement(domReference) && floating) {
        var _tree$nodesRef$curren;
        const ref = domReference;
        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        ref.style.pointerEvents = "auto";
        floating.style.pointerEvents = "auto";
        return () => {
          ref.style.pointerEvents = "";
          floating.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, isHoverOpen]);
  index2(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  React5.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      clearPointerEvents();
    };
  }, [enabled, domReference, cleanupMouseMoveHandler, clearPointerEvents]);
  return React5.useMemo(() => {
    if (!enabled) {
      return {};
    }
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      reference: {
        onPointerDown: setPointerRef,
        onPointerEnter: setPointerRef,
        onMouseMove(event) {
          const {
            nativeEvent
          } = event;
          function handleMouseMove() {
            if (!blockMouseMoveRef.current) {
              onOpenChange(true, nativeEvent, "hover");
            }
          }
          if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current)) {
            return;
          }
          if (open || restMs === 0) {
            return;
          }
          clearTimeout(restTimeoutRef.current);
          if (pointerTypeRef.current === "touch") {
            handleMouseMove();
          } else {
            restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);
          }
        }
      },
      floating: {
        onMouseEnter() {
          clearTimeout(timeoutRef.current);
        },
        onMouseLeave(event) {
          closeWithDelay(event.nativeEvent, false);
        }
      }
    };
  }, [enabled, mouseOnly, open, restMs, onOpenChange, closeWithDelay]);
}
function getAncestors(nodes, id) {
  var _nodes$find;
  let allAncestors = [];
  let currentParentId = (_nodes$find = nodes.find((node) => node.id === id)) == null ? void 0 : _nodes$find.parentId;
  while (currentParentId) {
    const currentNode = nodes.find((node) => node.id === currentParentId);
    currentParentId = currentNode == null ? void 0 : currentNode.parentId;
    if (currentNode) {
      allAncestors = allAncestors.concat(currentNode);
    }
  }
  return allAncestors;
}
function getChildren2(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n2) => {
        var _node$context2;
        return node.parentId === n2.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getDeepestNode(nodes, id) {
  let deepestNodeId;
  let maxDepth = -1;
  function findDeepest(nodeId, depth) {
    if (depth > maxDepth) {
      deepestNodeId = nodeId;
      maxDepth = depth;
    }
    const children = getChildren2(nodes, nodeId);
    children.forEach((child) => {
      findDeepest(child.id, depth + 1);
    });
  }
  findDeepest(id, 0);
  return nodes.find((node) => node.id === deepestNodeId);
}
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledElementsSet = /* @__PURE__ */ new WeakSet();
var markerMap = {};
var lockCount = 0;
var supportsInert = () => typeof HTMLElement !== "undefined" && "inert" in HTMLElement.prototype;
var unwrapHost = (node) => node && (node.host || unwrapHost(node.parentNode));
var correctElements = (parent, targets) => targets.map((target) => {
  if (parent.contains(target)) {
    return target;
  }
  const correctedTarget = unwrapHost(target);
  if (parent.contains(correctedTarget)) {
    return correctedTarget;
  }
  return null;
}).filter((x) => x != null);
function applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {
  const markerName = "data-floating-ui-inert";
  const controlAttribute = inert ? "inert" : ariaHidden ? "aria-hidden" : null;
  const avoidElements = correctElements(body, uncorrectedAvoidElements);
  const elementsToKeep = /* @__PURE__ */ new Set();
  const elementsToStop = new Set(avoidElements);
  const hiddenElements = [];
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  const markerCounter = markerMap[markerName];
  avoidElements.forEach(keep);
  deep(body);
  elementsToKeep.clear();
  function keep(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    el.parentNode && keep(el.parentNode);
  }
  function deep(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    [].forEach.call(parent.children, (node) => {
      if (getNodeName(node) === "script") return;
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        const attr2 = controlAttribute ? node.getAttribute(controlAttribute) : null;
        const alreadyHidden = attr2 !== null && attr2 !== "false";
        const counterValue = (counterMap.get(node) || 0) + 1;
        const markerValue = (markerCounter.get(node) || 0) + 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        hiddenElements.push(node);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledElementsSet.add(node);
        }
        if (markerValue === 1) {
          node.setAttribute(markerName, "");
        }
        if (!alreadyHidden && controlAttribute) {
          node.setAttribute(controlAttribute, "true");
        }
      }
    });
  }
  lockCount++;
  return () => {
    hiddenElements.forEach((element) => {
      const counterValue = (counterMap.get(element) || 0) - 1;
      const markerValue = (markerCounter.get(element) || 0) - 1;
      counterMap.set(element, counterValue);
      markerCounter.set(element, markerValue);
      if (!counterValue) {
        if (!uncontrolledElementsSet.has(element) && controlAttribute) {
          element.removeAttribute(controlAttribute);
        }
        uncontrolledElementsSet.delete(element);
      }
      if (!markerValue) {
        element.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledElementsSet = /* @__PURE__ */ new WeakSet();
      markerMap = {};
    }
  };
}
function markOthers(avoidElements, ariaHidden, inert) {
  if (ariaHidden === void 0) {
    ariaHidden = false;
  }
  if (inert === void 0) {
    inert = false;
  }
  const body = getDocument(avoidElements[0]).body;
  return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll("[aria-live]"))), body, ariaHidden, inert);
}
var getTabbableOptions = () => ({
  getShadowRoot: true,
  displayCheck: (
    // JSDOM does not support the `tabbable` library. To solve this we can
    // check if `ResizeObserver` is a real function (not polyfilled), which
    // determines if the current environment is JSDOM-like.
    typeof ResizeObserver === "function" && ResizeObserver.toString().includes("[native code]") ? "full" : "none"
  )
});
function getTabbableIn(container, direction) {
  const allTabbable = tabbable(container, getTabbableOptions());
  if (direction === "prev") {
    allTabbable.reverse();
  }
  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));
  const nextTabbableElements = allTabbable.slice(activeIndex + 1);
  return nextTabbableElements[0];
}
function getNextTabbable() {
  return getTabbableIn(document.body, "next");
}
function getPreviousTabbable() {
  return getTabbableIn(document.body, "prev");
}
function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
  const tabbableElements = tabbable(container, getTabbableOptions());
  tabbableElements.forEach((element) => {
    element.dataset.tabindex = element.getAttribute("tabindex") || "";
    element.setAttribute("tabindex", "-1");
  });
}
function enableFocusInside(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  elements.forEach((element) => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  });
}
var HIDDEN_STYLES = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "fixed",
  whiteSpace: "nowrap",
  width: "1px",
  top: 0,
  left: 0
};
var timeoutId;
function setActiveElementOnTab(event) {
  if (event.key === "Tab") {
    event.target;
    clearTimeout(timeoutId);
  }
}
var FocusGuard = /* @__PURE__ */ React5.forwardRef(function FocusGuard2(props, ref) {
  const [role, setRole] = React5.useState();
  index2(() => {
    if (isSafari()) {
      setRole("button");
    }
    document.addEventListener("keydown", setActiveElementOnTab);
    return () => {
      document.removeEventListener("keydown", setActiveElementOnTab);
    };
  }, []);
  const restProps = {
    ref,
    tabIndex: 0,
    // Role is only for VoiceOver
    role,
    "aria-hidden": role ? void 0 : true,
    [createAttribute("focus-guard")]: "",
    style: HIDDEN_STYLES
  };
  return /* @__PURE__ */ React5.createElement("span", _extends2({}, props, restProps));
});
var PortalContext = /* @__PURE__ */ React5.createContext(null);
var attr = /* @__PURE__ */ createAttribute("portal");
function useFloatingPortalNode(props) {
  if (props === void 0) {
    props = {};
  }
  const {
    id,
    root
  } = props;
  const uniqueId = useId();
  const portalContext = usePortalContext();
  const [portalNode, setPortalNode] = React5.useState(null);
  const portalNodeRef = React5.useRef(null);
  index2(() => {
    return () => {
      portalNode == null || portalNode.remove();
      queueMicrotask(() => {
        portalNodeRef.current = null;
      });
    };
  }, [portalNode]);
  index2(() => {
    if (!uniqueId) return;
    if (portalNodeRef.current) return;
    const existingIdRoot = id ? document.getElementById(id) : null;
    if (!existingIdRoot) return;
    const subRoot = document.createElement("div");
    subRoot.id = uniqueId;
    subRoot.setAttribute(attr, "");
    existingIdRoot.appendChild(subRoot);
    portalNodeRef.current = subRoot;
    setPortalNode(subRoot);
  }, [id, uniqueId]);
  index2(() => {
    if (!uniqueId) return;
    if (portalNodeRef.current) return;
    let container = root || (portalContext == null ? void 0 : portalContext.portalNode);
    if (container && !isElement(container)) container = container.current;
    container = container || document.body;
    let idWrapper = null;
    if (id) {
      idWrapper = document.createElement("div");
      idWrapper.id = id;
      container.appendChild(idWrapper);
    }
    const subRoot = document.createElement("div");
    subRoot.id = uniqueId;
    subRoot.setAttribute(attr, "");
    container = idWrapper || container;
    container.appendChild(subRoot);
    portalNodeRef.current = subRoot;
    setPortalNode(subRoot);
  }, [id, root, uniqueId, portalContext]);
  return portalNode;
}
function FloatingPortal(props) {
  const {
    children,
    id,
    root = null,
    preserveTabOrder = true
  } = props;
  const portalNode = useFloatingPortalNode({
    id,
    root
  });
  const [focusManagerState, setFocusManagerState] = React5.useState(null);
  const beforeOutsideRef = React5.useRef(null);
  const afterOutsideRef = React5.useRef(null);
  const beforeInsideRef = React5.useRef(null);
  const afterInsideRef = React5.useRef(null);
  const shouldRenderGuards = (
    // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState && // Guards are only for non-modal focus management.
    !focusManagerState.modal && // Don't render if unmount is transitioning.
    focusManagerState.open && preserveTabOrder && !!(root || portalNode)
  );
  React5.useEffect(() => {
    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
      return;
    }
    function onFocus(event) {
      if (portalNode && isOutsideEvent(event)) {
        const focusing = event.type === "focusin";
        const manageFocus = focusing ? enableFocusInside : disableFocusInside;
        manageFocus(portalNode);
      }
    }
    portalNode.addEventListener("focusin", onFocus, true);
    portalNode.addEventListener("focusout", onFocus, true);
    return () => {
      portalNode.removeEventListener("focusin", onFocus, true);
      portalNode.removeEventListener("focusout", onFocus, true);
    };
  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);
  return /* @__PURE__ */ React5.createElement(PortalContext.Provider, {
    value: React5.useMemo(() => ({
      preserveTabOrder,
      beforeOutsideRef,
      afterOutsideRef,
      beforeInsideRef,
      afterInsideRef,
      portalNode,
      setFocusManagerState
    }), [preserveTabOrder, portalNode])
  }, shouldRenderGuards && portalNode && /* @__PURE__ */ React5.createElement(FocusGuard, {
    "data-type": "outside",
    ref: beforeOutsideRef,
    onFocus: (event) => {
      if (isOutsideEvent(event, portalNode)) {
        var _beforeInsideRef$curr;
        (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();
      } else {
        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        prevTabbable == null || prevTabbable.focus();
      }
    }
  }), shouldRenderGuards && portalNode && /* @__PURE__ */ React5.createElement("span", {
    "aria-owns": portalNode.id,
    style: HIDDEN_STYLES
  }), portalNode && /* @__PURE__ */ createPortal(children, portalNode), shouldRenderGuards && portalNode && /* @__PURE__ */ React5.createElement(FocusGuard, {
    "data-type": "outside",
    ref: afterOutsideRef,
    onFocus: (event) => {
      if (isOutsideEvent(event, portalNode)) {
        var _afterInsideRef$curre;
        (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();
      } else {
        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        nextTabbable == null || nextTabbable.focus();
        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent));
      }
    }
  }));
}
var usePortalContext = () => React5.useContext(PortalContext);
var LIST_LIMIT = 20;
var previouslyFocusedElements = [];
function addPreviouslyFocusedElement(element) {
  previouslyFocusedElements = previouslyFocusedElements.filter((el) => el.isConnected);
  let tabbableEl = element;
  if (!tabbableEl || getNodeName(tabbableEl) === "body") return;
  if (!isTabbable(tabbableEl, getTabbableOptions())) {
    const tabbableChild = tabbable(tabbableEl, getTabbableOptions())[0];
    if (tabbableChild) {
      tabbableEl = tabbableChild;
    }
  }
  previouslyFocusedElements.push(tabbableEl);
  if (previouslyFocusedElements.length > LIST_LIMIT) {
    previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);
  }
}
function getPreviouslyFocusedElement() {
  return previouslyFocusedElements.slice().reverse().find((el) => el.isConnected);
}
var VisuallyHiddenDismiss = /* @__PURE__ */ React5.forwardRef(function VisuallyHiddenDismiss2(props, ref) {
  return /* @__PURE__ */ React5.createElement("button", _extends2({}, props, {
    type: "button",
    ref,
    tabIndex: -1,
    style: HIDDEN_STYLES
  }));
});
function FloatingFocusManager(props) {
  const {
    context,
    children,
    disabled = false,
    order = ["content"],
    guards: _guards = true,
    initialFocus = 0,
    returnFocus = true,
    restoreFocus = false,
    modal = true,
    visuallyHiddenDismiss = false,
    closeOnFocusOut = true
  } = props;
  const {
    open,
    refs,
    nodeId,
    onOpenChange,
    events,
    dataRef,
    floatingId,
    elements: {
      domReference,
      floating
    }
  } = context;
  const ignoreInitialFocus = typeof initialFocus === "number" && initialFocus < 0;
  const isUntrappedTypeableCombobox = isTypeableCombobox(domReference) && ignoreInitialFocus;
  const guards = supportsInert() ? _guards : true;
  const orderRef = useLatestRef2(order);
  const initialFocusRef = useLatestRef2(initialFocus);
  const returnFocusRef = useLatestRef2(returnFocus);
  const tree = useFloatingTree();
  const portalContext = usePortalContext();
  const startDismissButtonRef = React5.useRef(null);
  const endDismissButtonRef = React5.useRef(null);
  const preventReturnFocusRef = React5.useRef(false);
  const isPointerDownRef = React5.useRef(false);
  const tabbableIndexRef = React5.useRef(-1);
  const isInsidePortal = portalContext != null;
  const firstElementChild = floating == null ? void 0 : floating.firstElementChild;
  const floatingFocusNode = (firstElementChild == null ? void 0 : firstElementChild.id) === floatingId ? firstElementChild : floating;
  const getTabbableContent = useEffectEvent(function(container) {
    if (container === void 0) {
      container = floatingFocusNode;
    }
    return container ? tabbable(container, getTabbableOptions()) : [];
  });
  const getTabbableElements = useEffectEvent((container) => {
    const content = getTabbableContent(container);
    return orderRef.current.map((type) => {
      if (domReference && type === "reference") {
        return domReference;
      }
      if (floatingFocusNode && type === "floating") {
        return floatingFocusNode;
      }
      return content;
    }).filter(Boolean).flat();
  });
  React5.useEffect(() => {
    if (disabled) return;
    if (!modal) return;
    function onKeyDown(event) {
      if (event.key === "Tab") {
        if (contains(floatingFocusNode, activeElement(getDocument(floatingFocusNode))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {
          stopEvent(event);
        }
        const els = getTabbableElements();
        const target = getTarget(event);
        if (orderRef.current[0] === "reference" && target === domReference) {
          stopEvent(event);
          if (event.shiftKey) {
            enqueueFocus(els[els.length - 1]);
          } else {
            enqueueFocus(els[1]);
          }
        }
        if (orderRef.current[1] === "floating" && target === floatingFocusNode && event.shiftKey) {
          stopEvent(event);
          enqueueFocus(els[0]);
        }
      }
    }
    const doc = getDocument(floatingFocusNode);
    doc.addEventListener("keydown", onKeyDown);
    return () => {
      doc.removeEventListener("keydown", onKeyDown);
    };
  }, [disabled, domReference, floatingFocusNode, modal, orderRef, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);
  React5.useEffect(() => {
    if (disabled) return;
    if (!floating) return;
    function handleFocusIn(event) {
      const target = getTarget(event);
      const tabbableContent = getTabbableContent();
      const tabbableIndex = tabbableContent.indexOf(target);
      if (tabbableIndex !== -1) {
        tabbableIndexRef.current = tabbableIndex;
      }
    }
    floating.addEventListener("focusin", handleFocusIn);
    return () => {
      floating.removeEventListener("focusin", handleFocusIn);
    };
  }, [disabled, floating, getTabbableContent]);
  React5.useEffect(() => {
    if (disabled) return;
    if (!closeOnFocusOut) return;
    function handlePointerDown() {
      isPointerDownRef.current = true;
      setTimeout(() => {
        isPointerDownRef.current = false;
      });
    }
    function handleFocusOutside(event) {
      const relatedTarget = event.relatedTarget;
      queueMicrotask(() => {
        const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute("focus-guard")) || tree && (getChildren2(tree.nodesRef.current, nodeId).find((node) => {
          var _node$context, _node$context2;
          return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
        }) || getAncestors(tree.nodesRef.current, nodeId).find((node) => {
          var _node$context3, _node$context4;
          return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;
        })));
        if (restoreFocus && movedToUnrelatedNode && activeElement(getDocument(floatingFocusNode)) === getDocument(floatingFocusNode).body) {
          if (isHTMLElement(floatingFocusNode)) {
            floatingFocusNode == null || floatingFocusNode.focus();
          }
          const prevTabbableIndex = tabbableIndexRef.current;
          const tabbableContent = getTabbableContent();
          const nodeToFocus = tabbableContent[prevTabbableIndex] || tabbableContent[tabbableContent.length - 1] || floatingFocusNode;
          if (isHTMLElement(nodeToFocus)) {
            nodeToFocus.focus();
          }
        }
        if (!modal && relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.
        relatedTarget !== getPreviouslyFocusedElement()) {
          preventReturnFocusRef.current = true;
          onOpenChange(false, event);
        }
      });
    }
    if (floating && isHTMLElement(domReference)) {
      domReference.addEventListener("focusout", handleFocusOutside);
      domReference.addEventListener("pointerdown", handlePointerDown);
      floating.addEventListener("focusout", handleFocusOutside);
      return () => {
        domReference.removeEventListener("focusout", handleFocusOutside);
        domReference.removeEventListener("pointerdown", handlePointerDown);
        floating.removeEventListener("focusout", handleFocusOutside);
      };
    }
  }, [disabled, domReference, floating, floatingFocusNode, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut, restoreFocus, getTabbableContent]);
  React5.useEffect(() => {
    var _portalContext$portal;
    if (disabled) return;
    const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[" + createAttribute("portal") + "]")) || []);
    if (floating) {
      const insideElements = [floating, ...portalNodes, startDismissButtonRef.current, endDismissButtonRef.current, orderRef.current.includes("reference") || isUntrappedTypeableCombobox ? domReference : null].filter((x) => x != null);
      const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);
      return () => {
        cleanup();
      };
    }
  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards]);
  index2(() => {
    if (disabled || !isHTMLElement(floatingFocusNode)) return;
    const doc = getDocument(floatingFocusNode);
    const previouslyFocusedElement = activeElement(doc);
    queueMicrotask(() => {
      const focusableElements = getTabbableElements(floatingFocusNode);
      const initialFocusValue = initialFocusRef.current;
      const elToFocus = (typeof initialFocusValue === "number" ? focusableElements[initialFocusValue] : initialFocusValue.current) || floatingFocusNode;
      const focusAlreadyInsideFloatingEl = contains(floatingFocusNode, previouslyFocusedElement);
      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {
        enqueueFocus(elToFocus, {
          preventScroll: elToFocus === floatingFocusNode
        });
      }
    });
  }, [disabled, open, floatingFocusNode, ignoreInitialFocus, getTabbableElements, initialFocusRef]);
  index2(() => {
    if (disabled || !floatingFocusNode) return;
    let preventReturnFocusScroll = false;
    const doc = getDocument(floatingFocusNode);
    const previouslyFocusedElement = activeElement(doc);
    const contextData = dataRef.current;
    let openEvent = contextData.openEvent;
    addPreviouslyFocusedElement(previouslyFocusedElement);
    function onOpenChange2(_ref) {
      let {
        open: open2,
        reason,
        event,
        nested
      } = _ref;
      if (open2) {
        openEvent = event;
      }
      if (reason === "escape-key" && refs.domReference.current) {
        addPreviouslyFocusedElement(refs.domReference.current);
      }
      if (reason === "hover" && event.type === "mouseleave") {
        preventReturnFocusRef.current = true;
      }
      if (reason !== "outside-press") return;
      if (nested) {
        preventReturnFocusRef.current = false;
        preventReturnFocusScroll = true;
      } else {
        preventReturnFocusRef.current = !(isVirtualClick(event) || isVirtualPointerEvent(event));
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
      const activeEl = activeElement(doc);
      const isFocusInsideFloatingTree = contains(floating, activeEl) || tree && getChildren2(tree.nodesRef.current, nodeId).some((node) => {
        var _node$context5;
        return contains((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);
      });
      const shouldFocusReference = isFocusInsideFloatingTree || openEvent && ["click", "mousedown"].includes(openEvent.type);
      if (shouldFocusReference && refs.domReference.current) {
        addPreviouslyFocusedElement(refs.domReference.current);
      }
      const returnElement = getPreviouslyFocusedElement();
      if (
        // eslint-disable-next-line react-hooks/exhaustive-deps
        returnFocusRef.current && !preventReturnFocusRef.current && isHTMLElement(returnElement) && // If the focus moved somewhere else after mount, avoid returning focus
        // since it likely entered a different element which should be
        // respected: https://github.com/floating-ui/floating-ui/issues/2607
        (returnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)
      ) {
        enqueueFocus(returnElement, {
          // When dismissing nested floating elements, by the time the rAF has
          // executed, the menus will all have been unmounted. When they try
          // to get focused, the calls get ignored — leaving the root
          // reference focused as desired.
          cancelPrevious: false,
          preventScroll: preventReturnFocusScroll
        });
      }
    };
  }, [disabled, floating, floatingFocusNode, returnFocusRef, dataRef, refs, events, tree, nodeId]);
  index2(() => {
    if (disabled) return;
    if (!portalContext) return;
    portalContext.setFocusManagerState({
      modal,
      closeOnFocusOut,
      open,
      onOpenChange,
      refs
    });
    return () => {
      portalContext.setFocusManagerState(null);
    };
  }, [disabled, portalContext, modal, open, onOpenChange, refs, closeOnFocusOut]);
  index2(() => {
    if (disabled) return;
    if (!floatingFocusNode) return;
    if (typeof MutationObserver !== "function") return;
    if (ignoreInitialFocus) return;
    const handleMutation = () => {
      const tabIndex = floatingFocusNode.getAttribute("tabindex");
      const tabbableContent = getTabbableContent();
      const activeEl = activeElement(getDocument(floating));
      const tabbableIndex = tabbableContent.indexOf(activeEl);
      if (tabbableIndex !== -1) {
        tabbableIndexRef.current = tabbableIndex;
      }
      if (orderRef.current.includes("floating") || activeEl !== refs.domReference.current && tabbableContent.length === 0) {
        if (tabIndex !== "0") {
          floatingFocusNode.setAttribute("tabindex", "0");
        }
      } else if (tabIndex !== "-1") {
        floatingFocusNode.setAttribute("tabindex", "-1");
      }
    };
    handleMutation();
    const observer = new MutationObserver(handleMutation);
    observer.observe(floatingFocusNode, {
      childList: true,
      subtree: true,
      attributes: true
    });
    return () => {
      observer.disconnect();
    };
  }, [disabled, floating, floatingFocusNode, refs, orderRef, getTabbableContent, ignoreInitialFocus]);
  function renderDismissButton(location) {
    if (disabled || !visuallyHiddenDismiss || !modal) {
      return null;
    }
    return /* @__PURE__ */ React5.createElement(VisuallyHiddenDismiss, {
      ref: location === "start" ? startDismissButtonRef : endDismissButtonRef,
      onClick: (event) => onOpenChange(false, event.nativeEvent)
    }, typeof visuallyHiddenDismiss === "string" ? visuallyHiddenDismiss : "Dismiss");
  }
  const shouldRenderGuards = !disabled && guards && (isInsidePortal || modal);
  return /* @__PURE__ */ React5.createElement(React5.Fragment, null, shouldRenderGuards && /* @__PURE__ */ React5.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,
    onFocus: (event) => {
      if (modal) {
        const els = getTabbableElements();
        enqueueFocus(order[0] === "reference" ? els[0] : els[els.length - 1]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        preventReturnFocusRef.current = false;
        if (isOutsideEvent(event, portalContext.portalNode)) {
          const nextTabbable = getNextTabbable() || domReference;
          nextTabbable == null || nextTabbable.focus();
        } else {
          var _portalContext$before;
          (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();
        }
      }
    }
  }), !isUntrappedTypeableCombobox && renderDismissButton("start"), children, renderDismissButton("end"), shouldRenderGuards && /* @__PURE__ */ React5.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,
    onFocus: (event) => {
      if (modal) {
        enqueueFocus(getTabbableElements()[0]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        if (closeOnFocusOut) {
          preventReturnFocusRef.current = true;
        }
        if (isOutsideEvent(event, portalContext.portalNode)) {
          const prevTabbable = getPreviousTabbable() || domReference;
          prevTabbable == null || prevTabbable.focus();
        } else {
          var _portalContext$afterO;
          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();
        }
      }
    }
  }));
}
var activeLocks = /* @__PURE__ */ new Set();
var FloatingOverlay = /* @__PURE__ */ React5.forwardRef(function FloatingOverlay2(props, ref) {
  const {
    lockScroll = false,
    ...rest
  } = props;
  const lockId = useId();
  index2(() => {
    if (!lockScroll) return;
    activeLocks.add(lockId);
    const isIOS = /iP(hone|ad|od)|iOS/.test(getPlatform());
    const bodyStyle = document.body.style;
    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
    const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
    const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.pageXOffset;
    const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.pageYOffset;
    bodyStyle.overflow = "hidden";
    if (scrollbarWidth) {
      bodyStyle[paddingProp] = scrollbarWidth + "px";
    }
    if (isIOS) {
      var _window$visualViewpor, _window$visualViewpor2;
      const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
      const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
      Object.assign(bodyStyle, {
        position: "fixed",
        top: -(scrollY - Math.floor(offsetTop)) + "px",
        left: -(scrollX - Math.floor(offsetLeft)) + "px",
        right: "0"
      });
    }
    return () => {
      activeLocks.delete(lockId);
      if (activeLocks.size === 0) {
        Object.assign(bodyStyle, {
          overflow: "",
          [paddingProp]: ""
        });
        if (isIOS) {
          Object.assign(bodyStyle, {
            position: "",
            top: "",
            left: "",
            right: ""
          });
          window.scrollTo(scrollX, scrollY);
        }
      }
    };
  }, [lockId, lockScroll]);
  return /* @__PURE__ */ React5.createElement("div", _extends2({
    ref
  }, rest, {
    style: {
      position: "fixed",
      overflow: "auto",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...rest.style
    }
  }));
});
function isButtonTarget(event) {
  return isHTMLElement(event.target) && event.target.tagName === "BUTTON";
}
function isSpaceIgnored(element) {
  return isTypeableElement(element);
}
function useClick(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    elements: {
      domReference
    }
  } = context;
  const {
    enabled = true,
    event: eventOption = "click",
    toggle = true,
    ignoreMouse = false,
    keyboardHandlers = true
  } = props;
  const pointerTypeRef = React5.useRef();
  const didKeyDownRef = React5.useRef(false);
  return React5.useMemo(() => {
    if (!enabled) return {};
    return {
      reference: {
        onPointerDown(event) {
          pointerTypeRef.current = event.pointerType;
        },
        onMouseDown(event) {
          if (event.button !== 0) {
            return;
          }
          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
            return;
          }
          if (eventOption === "click") {
            return;
          }
          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "mousedown" : true)) {
            onOpenChange(false, event.nativeEvent, "click");
          } else {
            event.preventDefault();
            onOpenChange(true, event.nativeEvent, "click");
          }
        },
        onClick(event) {
          if (eventOption === "mousedown" && pointerTypeRef.current) {
            pointerTypeRef.current = void 0;
            return;
          }
          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
            return;
          }
          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "click" : true)) {
            onOpenChange(false, event.nativeEvent, "click");
          } else {
            onOpenChange(true, event.nativeEvent, "click");
          }
        },
        onKeyDown(event) {
          pointerTypeRef.current = void 0;
          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {
            return;
          }
          if (event.key === " " && !isSpaceIgnored(domReference)) {
            event.preventDefault();
            didKeyDownRef.current = true;
          }
          if (event.key === "Enter") {
            if (open && toggle) {
              onOpenChange(false, event.nativeEvent, "click");
            } else {
              onOpenChange(true, event.nativeEvent, "click");
            }
          }
        },
        onKeyUp(event) {
          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {
            return;
          }
          if (event.key === " " && didKeyDownRef.current) {
            didKeyDownRef.current = false;
            if (open && toggle) {
              onOpenChange(false, event.nativeEvent, "click");
            } else {
              onOpenChange(true, event.nativeEvent, "click");
            }
          }
        }
      }
    };
  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);
}
var bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
var captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
var normalizeProp = (normalizable) => {
  var _normalizable$escapeK, _normalizable$outside;
  return {
    escapeKey: typeof normalizable === "boolean" ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,
    outsidePress: typeof normalizable === "boolean" ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true
  };
};
function useDismiss(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    elements: {
      reference,
      domReference,
      floating
    },
    dataRef
  } = context;
  const {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles,
    capture
  } = props;
  const tree = useFloatingTree();
  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const insideReactTreeRef = React5.useRef(false);
  const endedOrStartedInsideRef = React5.useRef(false);
  const {
    escapeKey: escapeKeyBubbles,
    outsidePress: outsidePressBubbles
  } = normalizeProp(bubbles);
  const {
    escapeKey: escapeKeyCapture,
    outsidePress: outsidePressCapture
  } = normalizeProp(capture);
  const closeOnEscapeKeyDown = useEffectEvent((event) => {
    var _dataRef$current$floa;
    if (!open || !enabled || !escapeKey || event.key !== "Escape") {
      return;
    }
    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;
    const children = tree ? getChildren2(tree.nodesRef.current, nodeId) : [];
    if (!escapeKeyBubbles) {
      event.stopPropagation();
      if (children.length > 0) {
        let shouldDismiss = true;
        children.forEach((child) => {
          var _child$context;
          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
    }
    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, "escape-key");
  });
  const closeOnEscapeKeyDownCapture = useEffectEvent((event) => {
    var _getTarget2;
    const callback = () => {
      var _getTarget;
      closeOnEscapeKeyDown(event);
      (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener("keydown", callback);
    };
    (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener("keydown", callback);
  });
  const closeOnPressOutside = useEffectEvent((event) => {
    var _dataRef$current$floa2;
    const insideReactTree = insideReactTreeRef.current;
    insideReactTreeRef.current = false;
    const endedOrStartedInside = endedOrStartedInsideRef.current;
    endedOrStartedInsideRef.current = false;
    if (outsidePressEvent === "click" && endedOrStartedInside) {
      return;
    }
    if (insideReactTree) {
      return;
    }
    if (typeof outsidePress === "function" && !outsidePress(event)) {
      return;
    }
    const target = getTarget(event);
    const inertSelector = "[" + createAttribute("inert") + "]";
    const markers = getDocument(floating).querySelectorAll(inertSelector);
    let targetRootAncestor = isElement(target) ? target : null;
    while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {
      const nextParent = getParentNode(targetRootAncestor);
      if (isLastTraversableNode(nextParent) || !isElement(nextParent)) {
        break;
      }
      targetRootAncestor = nextParent;
    }
    if (markers.length && isElement(target) && !isRootElement(target) && // Clicked on a direct ancestor (e.g. FloatingOverlay).
    !contains(target, floating) && // If the target root element contains none of the markers, then the
    // element was injected after the floating element rendered.
    Array.from(markers).every((marker) => !contains(targetRootAncestor, marker))) {
      return;
    }
    if (isHTMLElement(target) && floating) {
      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
      let xCond = canScrollY && event.offsetX > target.clientWidth;
      if (canScrollY) {
        const isRTL2 = getComputedStyle2(target).direction === "rtl";
        if (isRTL2) {
          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
        }
      }
      if (xCond || canScrollX && event.offsetY > target.clientHeight) {
        return;
      }
    }
    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;
    const targetIsInsideChildren = tree && getChildren2(tree.nodesRef.current, nodeId).some((node) => {
      var _node$context;
      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
    });
    if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
      return;
    }
    const children = tree ? getChildren2(tree.nodesRef.current, nodeId) : [];
    if (children.length > 0) {
      let shouldDismiss = true;
      children.forEach((child) => {
        var _child$context2;
        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
          shouldDismiss = false;
          return;
        }
      });
      if (!shouldDismiss) {
        return;
      }
    }
    onOpenChange(false, event, "outside-press");
  });
  const closeOnPressOutsideCapture = useEffectEvent((event) => {
    var _getTarget4;
    const callback = () => {
      var _getTarget3;
      closeOnPressOutside(event);
      (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);
    };
    (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);
  });
  React5.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    function onScroll(event) {
      onOpenChange(false, event, "ancestor-scroll");
    }
    const doc = getDocument(floating);
    escapeKey && doc.addEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement(domReference)) {
        ancestors = getOverflowAncestors(domReference);
      }
      if (isElement(floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(floating));
      }
      if (!isElement(reference) && reference && reference.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      escapeKey && doc.removeEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
    };
  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);
  React5.useEffect(() => {
    insideReactTreeRef.current = false;
  }, [outsidePress, outsidePressEvent]);
  return React5.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        onKeyDown: closeOnEscapeKeyDown,
        [bubbleHandlerKeys[referencePressEvent]]: (event) => {
          if (referencePress) {
            onOpenChange(false, event.nativeEvent, "reference-press");
          }
        }
      },
      floating: {
        onKeyDown: closeOnEscapeKeyDown,
        onMouseDown() {
          endedOrStartedInsideRef.current = true;
        },
        onMouseUp() {
          endedOrStartedInsideRef.current = true;
        },
        [captureHandlerKeys[outsidePressEvent]]: () => {
          insideReactTreeRef.current = true;
        }
      }
    };
  }, [enabled, referencePress, outsidePressEvent, referencePressEvent, onOpenChange, closeOnEscapeKeyDown]);
}
function useFloatingRootContext(options2) {
  const {
    open = false,
    onOpenChange: onOpenChangeProp,
    elements: elementsProp
  } = options2;
  const floatingId = useId();
  const dataRef = React5.useRef({});
  const [events] = React5.useState(() => createPubSub());
  const nested = useFloatingParentNodeId() != null;
  if (true) {
    const optionDomReference = elementsProp.reference;
    if (optionDomReference && !isElement(optionDomReference)) {
      error("Cannot pass a virtual element to the `elements.reference` option,", "as it must be a real DOM element. Use `refs.setPositionReference()`", "instead.");
    }
  }
  const [positionReference, setPositionReference] = React5.useState(elementsProp.reference);
  const onOpenChange = useEffectEvent((open2, event, reason) => {
    dataRef.current.openEvent = open2 ? event : void 0;
    events.emit("openchange", {
      open: open2,
      event,
      reason,
      nested
    });
    onOpenChangeProp == null || onOpenChangeProp(open2, event, reason);
  });
  const refs = React5.useMemo(() => ({
    setPositionReference
  }), []);
  const elements = React5.useMemo(() => ({
    reference: positionReference || elementsProp.reference || null,
    floating: elementsProp.floating || null,
    domReference: elementsProp.reference
  }), [positionReference, elementsProp.reference, elementsProp.floating]);
  return React5.useMemo(() => ({
    dataRef,
    open,
    onOpenChange,
    elements,
    events,
    floatingId,
    refs
  }), [open, onOpenChange, elements, events, floatingId, refs]);
}
function useFloating2(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    nodeId
  } = options2;
  const internalRootContext = useFloatingRootContext({
    ...options2,
    elements: {
      reference: null,
      floating: null,
      ...options2.elements
    }
  });
  const rootContext = options2.rootContext || internalRootContext;
  const computedElements = rootContext.elements;
  const [_domReference, setDomReference] = React5.useState(null);
  const [positionReference, _setPositionReference] = React5.useState(null);
  const optionDomReference = computedElements == null ? void 0 : computedElements.reference;
  const domReference = optionDomReference || _domReference;
  const domReferenceRef = React5.useRef(null);
  const tree = useFloatingTree();
  index2(() => {
    if (domReference) {
      domReferenceRef.current = domReference;
    }
  }, [domReference]);
  const position = useFloating({
    ...options2,
    elements: {
      ...computedElements,
      ...positionReference && {
        reference: positionReference
      }
    }
  });
  const setPositionReference = React5.useCallback((node) => {
    const computedPositionReference = isElement(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      contextElement: node
    } : node;
    _setPositionReference(computedPositionReference);
    position.refs.setReference(computedPositionReference);
  }, [position.refs]);
  const setReference = React5.useCallback((node) => {
    if (isElement(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }
    if (isElement(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node !== null && !isElement(node)) {
      position.refs.setReference(node);
    }
  }, [position.refs]);
  const refs = React5.useMemo(() => ({
    ...position.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position.refs, setReference, setPositionReference]);
  const elements = React5.useMemo(() => ({
    ...position.elements,
    domReference
  }), [position.elements, domReference]);
  const context = React5.useMemo(() => ({
    ...position,
    ...rootContext,
    refs,
    elements,
    nodeId
  }), [position, refs, elements, nodeId, rootContext]);
  index2(() => {
    rootContext.dataRef.current.floatingContext = context;
    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);
    if (node) {
      node.context = context;
    }
  });
  return React5.useMemo(() => ({
    ...position,
    context,
    refs,
    elements
  }), [position, refs, elements, context]);
}
function useFocus(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    events,
    dataRef,
    elements: {
      domReference
    }
  } = context;
  const {
    enabled = true,
    visibleOnly = true
  } = props;
  const blockFocusRef = React5.useRef(false);
  const timeoutRef = React5.useRef();
  const keyboardModalityRef = React5.useRef(true);
  React5.useEffect(() => {
    if (!enabled) {
      return;
    }
    const win = getWindow(domReference);
    function onBlur() {
      if (!open && isHTMLElement(domReference) && domReference === activeElement(getDocument(domReference))) {
        blockFocusRef.current = true;
      }
    }
    function onKeyDown() {
      keyboardModalityRef.current = true;
    }
    win.addEventListener("blur", onBlur);
    win.addEventListener("keydown", onKeyDown, true);
    return () => {
      win.removeEventListener("blur", onBlur);
      win.removeEventListener("keydown", onKeyDown, true);
    };
  }, [domReference, open, enabled]);
  React5.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onOpenChange2(_ref) {
      let {
        reason
      } = _ref;
      if (reason === "reference-press" || reason === "escape-key") {
        blockFocusRef.current = true;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [events, enabled]);
  React5.useEffect(() => {
    return () => {
      clearTimeout(timeoutRef.current);
    };
  }, []);
  return React5.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        onPointerDown(event) {
          if (isVirtualPointerEvent(event.nativeEvent)) return;
          keyboardModalityRef.current = false;
        },
        onMouseLeave() {
          blockFocusRef.current = false;
        },
        onFocus(event) {
          if (blockFocusRef.current) return;
          const target = getTarget(event.nativeEvent);
          if (visibleOnly && isElement(target)) {
            try {
              if (isSafari() && isMac()) throw Error();
              if (!target.matches(":focus-visible")) return;
            } catch (e3) {
              if (!keyboardModalityRef.current && !isTypeableElement(target)) {
                return;
              }
            }
          }
          onOpenChange(true, event.nativeEvent, "focus");
        },
        onBlur(event) {
          blockFocusRef.current = false;
          const relatedTarget = event.relatedTarget;
          const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute(createAttribute("focus-guard")) && relatedTarget.getAttribute("data-type") === "outside";
          timeoutRef.current = window.setTimeout(() => {
            var _dataRef$current$floa;
            const activeEl = activeElement(domReference ? domReference.ownerDocument : document);
            if (!relatedTarget && activeEl === domReference) return;
            if (contains((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || contains(domReference, activeEl) || movedToFocusGuard) {
              return;
            }
            onOpenChange(false, event.nativeEvent, "focus");
          });
        }
      }
    };
  }, [enabled, visibleOnly, dataRef, domReference, onOpenChange]);
}
var ACTIVE_KEY = "active";
var SELECTED_KEY = "selected";
function mergeProps2(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  const isItem = elementKey === "item";
  let domUserProps = userProps;
  if (isItem && userProps) {
    const {
      [ACTIVE_KEY]: _,
      [SELECTED_KEY]: __,
      ...validProps
    } = userProps;
    domUserProps = validProps;
  }
  return {
    ...elementKey === "floating" && {
      tabIndex: -1
    },
    ...domUserProps,
    ...propsList.map((value) => {
      const propsOrGetProps = value ? value[elementKey] : null;
      if (typeof propsOrGetProps === "function") {
        return userProps ? propsOrGetProps(userProps) : null;
      }
      return propsOrGetProps;
    }).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {
          return;
        }
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null || _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn) => fn(...args)).find((val) => val !== void 0);
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
function useInteractions(propsList) {
  if (propsList === void 0) {
    propsList = [];
  }
  const deps = propsList;
  const getReferenceProps = React5.useCallback(
    (userProps) => mergeProps2(userProps, propsList, "reference"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getFloatingProps = React5.useCallback(
    (userProps) => mergeProps2(userProps, propsList, "floating"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getItemProps = React5.useCallback(
    (userProps) => mergeProps2(userProps, propsList, "item"),
    // Granularly check for `item` changes, because the `getItemProps` getter
    // should be as referentially stable as possible since it may be passed as
    // a prop to many components. All `item` key values must therefore be
    // memoized.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    propsList.map((key) => key == null ? void 0 : key.item)
  );
  return React5.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
}
var isPreventScrollSupported = false;
function doSwitch(orientation, vertical, horizontal) {
  switch (orientation) {
    case "vertical":
      return vertical;
    case "horizontal":
      return horizontal;
    default:
      return vertical || horizontal;
  }
}
function isMainOrientationKey(key, orientation) {
  const vertical = key === ARROW_UP || key === ARROW_DOWN;
  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
  const vertical = key === ARROW_DOWN;
  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal) || key === "Enter" || key === " " || key === "";
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  const horizontal = key === ARROW_DOWN;
  return doSwitch(orientation, vertical, horizontal);
}
function isCrossOrientationCloseKey(key, orientation, rtl) {
  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;
  const horizontal = key === ARROW_UP;
  return doSwitch(orientation, vertical, horizontal);
}
function useListNavigation(context, props) {
  const {
    open,
    onOpenChange,
    elements: {
      domReference,
      floating
    }
  } = context;
  const {
    listRef,
    activeIndex,
    onNavigate: unstable_onNavigate = () => {
    },
    enabled = true,
    selectedIndex = null,
    allowEscape = false,
    loop = false,
    nested = false,
    rtl = false,
    virtual = false,
    focusItemOnOpen = "auto",
    focusItemOnHover = true,
    openOnArrowKeyDown = true,
    disabledIndices = void 0,
    orientation = "vertical",
    cols = 1,
    scrollItemIntoView = true,
    virtualItemRef,
    itemSizes,
    dense = false
  } = props;
  if (true) {
    if (allowEscape) {
      if (!loop) {
        warn2("`useListNavigation` looping must be enabled to allow escaping.");
      }
      if (!virtual) {
        warn2("`useListNavigation` must be virtual to allow escaping.");
      }
    }
    if (orientation === "vertical" && cols > 1) {
      warn2("In grid list navigation mode (`cols` > 1), the `orientation` should", 'be either "horizontal" or "both".');
    }
  }
  const parentId = useFloatingParentNodeId();
  const tree = useFloatingTree();
  const onNavigate = useEffectEvent(unstable_onNavigate);
  const focusItemOnOpenRef = React5.useRef(focusItemOnOpen);
  const indexRef = React5.useRef(selectedIndex != null ? selectedIndex : -1);
  const keyRef = React5.useRef(null);
  const isPointerModalityRef = React5.useRef(true);
  const previousOnNavigateRef = React5.useRef(onNavigate);
  const previousMountedRef = React5.useRef(!!floating);
  const forceSyncFocus = React5.useRef(false);
  const forceScrollIntoViewRef = React5.useRef(false);
  const disabledIndicesRef = useLatestRef2(disabledIndices);
  const latestOpenRef = useLatestRef2(open);
  const scrollItemIntoViewRef = useLatestRef2(scrollItemIntoView);
  const floatingRef = useLatestRef2(floating);
  const selectedIndexRef = useLatestRef2(selectedIndex);
  const [activeId, setActiveId] = React5.useState();
  const [virtualId, setVirtualId] = React5.useState();
  const focusItem = useEffectEvent(function(listRef2, indexRef2, forceScrollIntoView) {
    if (forceScrollIntoView === void 0) {
      forceScrollIntoView = false;
    }
    function runFocus(item2) {
      if (virtual) {
        setActiveId(item2.id);
        tree == null || tree.events.emit("virtualfocus", item2);
        if (virtualItemRef) {
          virtualItemRef.current = item2;
        }
      } else {
        enqueueFocus(item2, {
          preventScroll: true,
          // Mac Safari does not move the virtual cursor unless the focus call
          // is sync. However, for the very first focus call, we need to wait
          // for the position to be ready in order to prevent unwanted
          // scrolling. This means the virtual cursor will not move to the first
          // item when first opening the floating element, but will on
          // subsequent calls. `preventScroll` is supported in modern Safari,
          // so we can use that instead.
          // iOS Safari must be async or the first item will not be focused.
          sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false
        });
      }
    }
    const initialItem = listRef2.current[indexRef2.current];
    if (initialItem) {
      runFocus(initialItem);
    }
    requestAnimationFrame(() => {
      const waitedItem = listRef2.current[indexRef2.current] || initialItem;
      if (!waitedItem) return;
      if (!initialItem) {
        runFocus(waitedItem);
      }
      const scrollIntoViewOptions = scrollItemIntoViewRef.current;
      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);
      if (shouldScrollIntoView) {
        waitedItem.scrollIntoView == null || waitedItem.scrollIntoView(typeof scrollIntoViewOptions === "boolean" ? {
          block: "nearest",
          inline: "nearest"
        } : scrollIntoViewOptions);
      }
    });
  });
  index2(() => {
    document.createElement("div").focus({
      get preventScroll() {
        isPreventScrollSupported = true;
        return false;
      }
    });
  }, []);
  index2(() => {
    if (!enabled) {
      return;
    }
    if (open && floating) {
      if (focusItemOnOpenRef.current && selectedIndex != null) {
        forceScrollIntoViewRef.current = true;
        indexRef.current = selectedIndex;
        onNavigate(selectedIndex);
      }
    } else if (previousMountedRef.current) {
      indexRef.current = -1;
      previousOnNavigateRef.current(null);
    }
  }, [enabled, open, floating, selectedIndex, onNavigate]);
  index2(() => {
    if (!enabled) {
      return;
    }
    if (open && floating) {
      if (activeIndex == null) {
        forceSyncFocus.current = false;
        if (selectedIndexRef.current != null) {
          return;
        }
        if (previousMountedRef.current) {
          indexRef.current = -1;
          focusItem(listRef, indexRef);
        }
        if (!previousMountedRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
          let runs = 0;
          const waitForListPopulated = () => {
            if (listRef.current[0] == null) {
              if (runs < 2) {
                const scheduler = runs ? requestAnimationFrame : queueMicrotask;
                scheduler(waitForListPopulated);
              }
              runs++;
            } else {
              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);
              keyRef.current = null;
              onNavigate(indexRef.current);
            }
          };
          waitForListPopulated();
        }
      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {
        indexRef.current = activeIndex;
        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);
        forceScrollIntoViewRef.current = false;
      }
    }
  }, [enabled, open, floating, activeIndex, selectedIndexRef, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);
  index2(() => {
    var _nodes$find;
    if (!enabled || floating || !tree || virtual || !previousMountedRef.current) {
      return;
    }
    const nodes = tree.nodesRef.current;
    const parent = (_nodes$find = nodes.find((node) => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;
    const activeEl = activeElement(getDocument(floating));
    const treeContainsActiveEl = nodes.some((node) => node.context && contains(node.context.elements.floating, activeEl));
    if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {
      parent.focus({
        preventScroll: true
      });
    }
  }, [enabled, floating, tree, parentId, virtual]);
  index2(() => {
    if (!enabled || !tree || !virtual || parentId) return;
    function handleVirtualFocus(item2) {
      setVirtualId(item2.id);
      if (virtualItemRef) {
        virtualItemRef.current = item2;
      }
    }
    tree.events.on("virtualfocus", handleVirtualFocus);
    return () => {
      tree.events.off("virtualfocus", handleVirtualFocus);
    };
  }, [enabled, tree, virtual, parentId, virtualItemRef]);
  index2(() => {
    previousOnNavigateRef.current = onNavigate;
    previousMountedRef.current = !!floating;
  });
  index2(() => {
    if (!open) {
      keyRef.current = null;
    }
  }, [open]);
  const hasActiveIndex = activeIndex != null;
  const item = React5.useMemo(() => {
    function syncCurrentTarget(currentTarget) {
      if (!open) return;
      const index3 = listRef.current.indexOf(currentTarget);
      if (index3 !== -1) {
        onNavigate(index3);
      }
    }
    const props2 = {
      onFocus(_ref) {
        let {
          currentTarget
        } = _ref;
        syncCurrentTarget(currentTarget);
      },
      onClick: (_ref2) => {
        let {
          currentTarget
        } = _ref2;
        return currentTarget.focus({
          preventScroll: true
        });
      },
      // Safari
      ...focusItemOnHover && {
        onMouseMove(_ref3) {
          let {
            currentTarget
          } = _ref3;
          syncCurrentTarget(currentTarget);
        },
        onPointerLeave(_ref4) {
          let {
            pointerType
          } = _ref4;
          if (!isPointerModalityRef.current || pointerType === "touch") {
            return;
          }
          indexRef.current = -1;
          focusItem(listRef, indexRef);
          onNavigate(null);
          if (!virtual) {
            enqueueFocus(floatingRef.current, {
              preventScroll: true
            });
          }
        }
      }
    };
    return props2;
  }, [open, floatingRef, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);
  return React5.useMemo(() => {
    if (!enabled) {
      return {};
    }
    const disabledIndices2 = disabledIndicesRef.current;
    function onKeyDown(event) {
      isPointerModalityRef.current = false;
      forceSyncFocus.current = true;
      if (!latestOpenRef.current && event.currentTarget === floatingRef.current) {
        return;
      }
      if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {
        stopEvent(event);
        onOpenChange(false, event.nativeEvent, "list-navigation");
        if (isHTMLElement(domReference) && !virtual) {
          domReference.focus();
        }
        return;
      }
      const currentIndex = indexRef.current;
      const minIndex = getMinIndex(listRef, disabledIndices2);
      const maxIndex = getMaxIndex(listRef, disabledIndices2);
      if (event.key === "Home") {
        stopEvent(event);
        indexRef.current = minIndex;
        onNavigate(indexRef.current);
      }
      if (event.key === "End") {
        stopEvent(event);
        indexRef.current = maxIndex;
        onNavigate(indexRef.current);
      }
      if (cols > 1) {
        const sizes = itemSizes || Array.from({
          length: listRef.current.length
        }, () => ({
          width: 1,
          height: 1
        }));
        const cellMap = buildCellMap(sizes, cols, dense);
        const minGridIndex = cellMap.findIndex((index3) => index3 != null && !isDisabled(listRef.current, index3, disabledIndices2));
        const maxGridIndex = cellMap.reduce((foundIndex, index3, cellIndex) => index3 != null && !isDisabled(listRef.current, index3, disabledIndices2) ? cellIndex : foundIndex, -1);
        indexRef.current = cellMap[getGridNavigatedIndex({
          current: cellMap.map((itemIndex) => itemIndex != null ? listRef.current[itemIndex] : null)
        }, {
          event,
          orientation,
          loop,
          cols,
          // treat undefined (empty grid spaces) as disabled indices so we
          // don't end up in them
          disabledIndices: getCellIndices([...disabledIndices2 || listRef.current.map((_, index3) => isDisabled(listRef.current, index3) ? index3 : void 0), void 0], cellMap),
          minIndex: minGridIndex,
          maxIndex: maxGridIndex,
          prevIndex: getCellIndexOfCorner(
            indexRef.current > maxIndex ? minIndex : indexRef.current,
            sizes,
            cellMap,
            cols,
            // use a corner matching the edge closest to the direction
            // we're moving in so we don't end up in the same item. Prefer
            // top/left over bottom/right.
            event.key === ARROW_DOWN ? "bl" : event.key === ARROW_RIGHT ? "tr" : "tl"
          ),
          stopEvent: true
        })];
        onNavigate(indexRef.current);
        if (orientation === "both") {
          return;
        }
      }
      if (isMainOrientationKey(event.key, orientation)) {
        stopEvent(event);
        if (open && !virtual && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {
          indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
          onNavigate(indexRef.current);
          return;
        }
        if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
          if (loop) {
            indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {
              startingIndex: currentIndex,
              disabledIndices: disabledIndices2
            });
          } else {
            indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {
              startingIndex: currentIndex,
              disabledIndices: disabledIndices2
            }));
          }
        } else {
          if (loop) {
            indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {
              startingIndex: currentIndex,
              decrement: true,
              disabledIndices: disabledIndices2
            });
          } else {
            indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {
              startingIndex: currentIndex,
              decrement: true,
              disabledIndices: disabledIndices2
            }));
          }
        }
        if (isIndexOutOfBounds(listRef, indexRef.current)) {
          onNavigate(null);
        } else {
          onNavigate(indexRef.current);
        }
      }
    }
    function checkVirtualMouse(event) {
      if (focusItemOnOpen === "auto" && isVirtualClick(event.nativeEvent)) {
        focusItemOnOpenRef.current = true;
      }
    }
    function checkVirtualPointer(event) {
      focusItemOnOpenRef.current = focusItemOnOpen;
      if (focusItemOnOpen === "auto" && isVirtualPointerEvent(event.nativeEvent)) {
        focusItemOnOpenRef.current = true;
      }
    }
    const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {
      "aria-activedescendant": virtualId || activeId
    };
    const activeItem = listRef.current.find((item2) => (item2 == null ? void 0 : item2.id) === activeId);
    return {
      reference: {
        ...ariaActiveDescendantProp,
        onKeyDown(event) {
          isPointerModalityRef.current = false;
          const isArrowKey = event.key.indexOf("Arrow") === 0;
          const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);
          const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl);
          const isMainKey = isMainOrientationKey(event.key, orientation);
          const isNavigationKey = (nested ? isCrossOpenKey : isMainKey) || event.key === "Enter" || event.key.trim() === "";
          if (virtual && open) {
            const rootNode = tree == null ? void 0 : tree.nodesRef.current.find((node) => node.parentId == null);
            const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;
            if (isArrowKey && deepestNode && virtualItemRef) {
              const eventObject = new KeyboardEvent("keydown", {
                key: event.key,
                bubbles: true
              });
              if (isCrossOpenKey || isCrossCloseKey) {
                var _deepestNode$context, _deepestNode$context2;
                const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;
                const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? activeItem : null;
                if (dispatchItem) {
                  stopEvent(event);
                  dispatchItem.dispatchEvent(eventObject);
                  setVirtualId(void 0);
                }
              }
              if (isMainKey && deepestNode.context) {
                if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {
                  var _deepestNode$context$;
                  stopEvent(event);
                  (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);
                  return;
                }
              }
            }
            return onKeyDown(event);
          }
          if (!open && !openOnArrowKeyDown && isArrowKey) {
            return;
          }
          if (isNavigationKey) {
            keyRef.current = nested && isMainKey ? null : event.key;
          }
          if (nested) {
            if (isCrossOpenKey) {
              stopEvent(event);
              if (open) {
                indexRef.current = getMinIndex(listRef, disabledIndices2);
                onNavigate(indexRef.current);
              } else {
                onOpenChange(true, event.nativeEvent, "list-navigation");
              }
            }
            return;
          }
          if (isMainKey) {
            if (selectedIndex != null) {
              indexRef.current = selectedIndex;
            }
            stopEvent(event);
            if (!open && openOnArrowKeyDown) {
              onOpenChange(true, event.nativeEvent, "list-navigation");
            } else {
              onKeyDown(event);
            }
            if (open) {
              onNavigate(indexRef.current);
            }
          }
        },
        onFocus() {
          if (open && !virtual) {
            onNavigate(null);
          }
        },
        onPointerDown: checkVirtualPointer,
        onMouseDown: checkVirtualMouse,
        onClick: checkVirtualMouse
      },
      floating: {
        "aria-orientation": orientation === "both" ? void 0 : orientation,
        ...!isTypeableCombobox(domReference) && ariaActiveDescendantProp,
        onKeyDown,
        onPointerMove() {
          isPointerModalityRef.current = true;
        }
      },
      item
    };
  }, [domReference, floatingRef, activeId, virtualId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item, tree, virtualItemRef, itemSizes, dense]);
}
var componentRoleToAriaRoleMap = /* @__PURE__ */ new Map([["select", "listbox"], ["combobox", "listbox"], ["label", false]]);
function useRole(context, props) {
  var _componentRoleToAriaR;
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    floatingId
  } = context;
  const {
    enabled = true,
    role = "dialog"
  } = props;
  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;
  const referenceId = useId();
  const parentId = useFloatingParentNodeId();
  const isNested = parentId != null;
  return React5.useMemo(() => {
    if (!enabled) return {};
    const floatingProps = {
      id: floatingId,
      ...ariaRole && {
        role: ariaRole
      }
    };
    if (ariaRole === "tooltip" || role === "label") {
      return {
        reference: {
          ["aria-" + (role === "label" ? "labelledby" : "describedby")]: open ? floatingId : void 0
        },
        floating: floatingProps
      };
    }
    return {
      reference: {
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": ariaRole === "alertdialog" ? "dialog" : ariaRole,
        "aria-controls": open ? floatingId : void 0,
        ...ariaRole === "listbox" && {
          role: "combobox"
        },
        ...ariaRole === "menu" && {
          id: referenceId
        },
        ...ariaRole === "menu" && isNested && {
          role: "menuitem"
        },
        ...role === "select" && {
          "aria-autocomplete": "none"
        },
        ...role === "combobox" && {
          "aria-autocomplete": "list"
        }
      },
      floating: {
        ...floatingProps,
        ...ariaRole === "menu" && {
          "aria-labelledby": referenceId
        }
      },
      item(_ref) {
        let {
          active,
          selected
        } = _ref;
        const commonProps = {
          role: "option",
          ...active && {
            id: floatingId + "-option"
          }
        };
        switch (role) {
          case "select":
            return {
              ...commonProps,
              "aria-selected": active && selected
            };
          case "combobox": {
            return {
              ...commonProps,
              ...active && {
                "aria-selected": true
              }
            };
          }
        }
        return {};
      }
    };
  }, [enabled, role, ariaRole, open, floatingId, referenceId, isNested]);
}
function useTypeahead(context, props) {
  var _ref;
  const {
    open,
    dataRef
  } = context;
  const {
    listRef,
    activeIndex,
    onMatch: unstable_onMatch,
    onTypingChange: unstable_onTypingChange,
    enabled = true,
    findMatch = null,
    resetMs = 750,
    ignoreKeys = [],
    selectedIndex = null
  } = props;
  const timeoutIdRef = React5.useRef();
  const stringRef = React5.useRef("");
  const prevIndexRef = React5.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);
  const matchIndexRef = React5.useRef(null);
  const onMatch = useEffectEvent(unstable_onMatch);
  const onTypingChange = useEffectEvent(unstable_onTypingChange);
  const findMatchRef = useLatestRef2(findMatch);
  const ignoreKeysRef = useLatestRef2(ignoreKeys);
  index2(() => {
    if (open) {
      clearTimeout(timeoutIdRef.current);
      matchIndexRef.current = null;
      stringRef.current = "";
    }
  }, [open]);
  index2(() => {
    if (open && stringRef.current === "") {
      var _ref2;
      prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;
    }
  }, [open, selectedIndex, activeIndex]);
  return React5.useMemo(() => {
    if (!enabled) {
      return {};
    }
    function setTypingChange(value) {
      if (value) {
        if (!dataRef.current.typing) {
          dataRef.current.typing = value;
          onTypingChange(value);
        }
      } else {
        if (dataRef.current.typing) {
          dataRef.current.typing = value;
          onTypingChange(value);
        }
      }
    }
    function getMatchingIndex(list, orderedList, string) {
      const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find((text) => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);
      return str ? list.indexOf(str) : -1;
    }
    function onKeyDown(event) {
      const listContent = listRef.current;
      if (stringRef.current.length > 0 && stringRef.current[0] !== " ") {
        if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {
          setTypingChange(false);
        } else if (event.key === " ") {
          stopEvent(event);
        }
      }
      if (listContent == null || ignoreKeysRef.current.includes(event.key) || // Character key.
      event.key.length !== 1 || // Modifier key.
      event.ctrlKey || event.metaKey || event.altKey) {
        return;
      }
      if (open && event.key !== " ") {
        stopEvent(event);
        setTypingChange(true);
      }
      const allowRapidSuccessionOfFirstLetter = listContent.every((text) => {
        var _text$, _text$2;
        return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;
      });
      if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {
        stringRef.current = "";
        prevIndexRef.current = matchIndexRef.current;
      }
      stringRef.current += event.key;
      clearTimeout(timeoutIdRef.current);
      timeoutIdRef.current = setTimeout(() => {
        stringRef.current = "";
        prevIndexRef.current = matchIndexRef.current;
        setTypingChange(false);
      }, resetMs);
      const prevIndex = prevIndexRef.current;
      const index3 = getMatchingIndex(listContent, [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)], stringRef.current);
      if (index3 !== -1) {
        onMatch(index3);
        matchIndexRef.current = index3;
      } else if (event.key !== " ") {
        stringRef.current = "";
        setTypingChange(false);
      }
    }
    return {
      reference: {
        onKeyDown
      },
      floating: {
        onKeyDown,
        onKeyUp(event) {
          if (event.key === " ") {
            setTypingChange(false);
          }
        }
      }
    };
  }, [enabled, open, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch, onTypingChange]);
}
function isPointInPolygon(point, polygon) {
  const [x, y] = point;
  let isInside2 = false;
  const length = polygon.length;
  for (let i2 = 0, j = length - 1; i2 < length; j = i2++) {
    const [xi, yi] = polygon[i2] || [0, 0];
    const [xj, yj] = polygon[j] || [0, 0];
    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside2 = !isInside2;
    }
  }
  return isInside2;
}
function isInside(point, rect) {
  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    buffer = 0.5,
    blockPointerEvents = false,
    requireIntent = true
  } = options2;
  let timeoutId2;
  let hasLanded = false;
  let lastX = null;
  let lastY = null;
  let lastCursorTime = performance.now();
  function getCursorSpeed(x, y) {
    const currentTime = performance.now();
    const elapsedTime = currentTime - lastCursorTime;
    if (lastX === null || lastY === null || elapsedTime === 0) {
      lastX = x;
      lastY = y;
      lastCursorTime = currentTime;
      return null;
    }
    const deltaX = x - lastX;
    const deltaY = y - lastY;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const speed = distance / elapsedTime;
    lastX = x;
    lastY = y;
    lastCursorTime = currentTime;
    return speed;
  }
  const fn = (_ref) => {
    let {
      x,
      y,
      placement,
      elements,
      onClose,
      nodeId,
      tree
    } = _ref;
    return function onMouseMove(event) {
      function close() {
        clearTimeout(timeoutId2);
        onClose();
      }
      clearTimeout(timeoutId2);
      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
        return;
      }
      const {
        clientX,
        clientY
      } = event;
      const clientPoint = [clientX, clientY];
      const target = getTarget(event);
      const isLeave = event.type === "mouseleave";
      const isOverFloatingEl = contains(elements.floating, target);
      const isOverReferenceEl = contains(elements.domReference, target);
      const refRect = elements.domReference.getBoundingClientRect();
      const rect = elements.floating.getBoundingClientRect();
      const side = placement.split("-")[0];
      const cursorLeaveFromRight = x > rect.right - rect.width / 2;
      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
      const isOverReferenceRect = isInside(clientPoint, refRect);
      const isFloatingWider = rect.width > refRect.width;
      const isFloatingTaller = rect.height > refRect.height;
      const left = (isFloatingWider ? refRect : rect).left;
      const right = (isFloatingWider ? refRect : rect).right;
      const top = (isFloatingTaller ? refRect : rect).top;
      const bottom = (isFloatingTaller ? refRect : rect).bottom;
      if (isOverFloatingEl) {
        hasLanded = true;
        if (!isLeave) {
          return;
        }
      }
      if (isOverReferenceEl) {
        hasLanded = false;
      }
      if (isOverReferenceEl && !isLeave) {
        hasLanded = true;
        return;
      }
      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
        return;
      }
      if (tree && getChildren2(tree.nodesRef.current, nodeId).some((_ref2) => {
        let {
          context
        } = _ref2;
        return context == null ? void 0 : context.open;
      })) {
        return;
      }
      if (side === "top" && y >= refRect.bottom - 1 || side === "bottom" && y <= refRect.top + 1 || side === "left" && x >= refRect.right - 1 || side === "right" && x <= refRect.left + 1) {
        return close();
      }
      let rectPoly = [];
      switch (side) {
        case "top":
          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];
          break;
        case "bottom":
          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];
          break;
        case "left":
          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];
          break;
        case "right":
          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];
          break;
      }
      function getPolygon(_ref3) {
        let [x2, y2] = _ref3;
        switch (side) {
          case "top": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "bottom": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "left": {
            const cursorPointOne = [x2 + buffer + 1, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 + buffer + 1, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
            return [...commonPoints, cursorPointOne, cursorPointTwo];
          }
          case "right": {
            const cursorPointOne = [x2 - buffer, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 - buffer, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
        }
      }
      if (isPointInPolygon([clientX, clientY], rectPoly)) {
        return;
      }
      if (hasLanded && !isOverReferenceRect) {
        return close();
      }
      if (!isLeave && requireIntent) {
        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);
        const cursorSpeedThreshold = 0.1;
        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {
          return close();
        }
      }
      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {
        close();
      } else if (!hasLanded && requireIntent) {
        timeoutId2 = window.setTimeout(close, 40);
      }
    };
  };
  fn.__options = {
    blockPointerEvents
  };
  return fn;
}

// node_modules/flowbite-react/dist/esm/components/Floating/Floating.mjs
import { useRef as useRef6, useState as useState7, useEffect as useEffect6 } from "react";

// node_modules/flowbite-react/dist/esm/components/Floating/helpers.mjs
var getMiddleware = ({
  arrowRef,
  placement
}) => {
  const middleware = [];
  middleware.push(offset3(8));
  middleware.push(placement === "auto" ? autoPlacement3() : flip3());
  middleware.push(shift3({ padding: 8 }));
  if (arrowRef?.current) {
    middleware.push(arrow3({ element: arrowRef.current }));
  }
  return middleware;
};
var getPlacement = ({ placement }) => {
  return placement === "auto" ? void 0 : placement;
};
var getArrowPlacement = ({ placement }) => {
  return {
    top: "bottom",
    right: "left",
    bottom: "top",
    left: "right"
  }[placement.split("-")[0]];
};

// node_modules/flowbite-react/dist/esm/hooks/use-floating.mjs
var useBaseFLoating = ({
  open,
  arrowRef,
  placement = "top",
  setOpen
}) => {
  return useFloating2({
    placement: getPlacement({ placement }),
    open,
    onOpenChange: setOpen,
    whileElementsMounted: autoUpdate,
    middleware: getMiddleware({ placement, arrowRef })
  });
};
var useFloatingInteractions = ({
  context,
  trigger,
  role = "tooltip",
  interactions = []
}) => {
  return useInteractions([
    useClick(context, { enabled: trigger === "click" }),
    useHover(context, {
      enabled: trigger === "hover",
      handleClose: safePolygon()
    }),
    useDismiss(context),
    useRole(context, { role }),
    ...interactions
  ]);
};

// node_modules/flowbite-react/dist/esm/components/Floating/Floating.mjs
var Floating = ({
  animation = "duration-300",
  arrow: arrow4 = true,
  children,
  className,
  content,
  placement = "top",
  style = "dark",
  theme: theme4,
  trigger = "hover",
  minWidth,
  ...props
}) => {
  const arrowRef = useRef6(null);
  const [open, setOpen] = useState7(false);
  const floatingProperties = useBaseFLoating({
    open,
    placement,
    arrowRef,
    setOpen
  });
  const {
    context,
    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} },
    refs,
    strategy,
    update,
    x,
    y
  } = floatingProperties;
  const focus = useFocus(context);
  const { getFloatingProps, getReferenceProps } = useFloatingInteractions({
    context,
    role: "tooltip",
    trigger,
    interactions: [focus]
  });
  useEffect6(() => {
    if (refs.reference.current && refs.floating.current && open) {
      return autoUpdate(refs.reference.current, refs.floating.current, update);
    }
  }, [open, refs.floating, refs.reference, update]);
  return /* @__PURE__ */ jsxs11(Fragment5, { children: [
    /* @__PURE__ */ jsx21(
      "div",
      {
        ref: refs.setReference,
        className: theme4.target,
        "data-testid": "flowbite-tooltip-target",
        ...getReferenceProps(),
        children
      }
    ),
    /* @__PURE__ */ jsxs11(
      "div",
      {
        ref: refs.setFloating,
        "data-testid": "flowbite-tooltip",
        ...getFloatingProps({
          className: twMerge(
            theme4.base,
            animation && `${theme4.animation} ${animation}`,
            !open && theme4.hidden,
            theme4.style[style],
            className
          ),
          style: {
            position: strategy,
            top: y ?? " ",
            left: x ?? " ",
            minWidth
          },
          ...props
        }),
        children: [
          /* @__PURE__ */ jsx21("div", { className: theme4.content, children: content }),
          arrow4 && /* @__PURE__ */ jsx21(
            "div",
            {
              className: twMerge(
                theme4.arrow.base,
                style === "dark" && theme4.arrow.style.dark,
                style === "light" && theme4.arrow.style.light,
                style === "auto" && theme4.arrow.style.auto
              ),
              "data-testid": "flowbite-tooltip-arrow",
              ref: arrowRef,
              style: {
                top: arrowY ?? " ",
                left: arrowX ?? " ",
                right: " ",
                bottom: " ",
                [getArrowPlacement({ placement: floatingProperties.placement })]: theme4.arrow.placement
              },
              children: "\xA0"
            }
          )
        ]
      }
    )
  ] });
};

// node_modules/flowbite-react/dist/esm/components/Tooltip/Tooltip.mjs
var Tooltip = ({
  animation = "duration-300",
  arrow: arrow4 = true,
  children,
  className,
  content,
  placement = "top",
  style = "dark",
  theme: customTheme = {},
  trigger = "hover",
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().tooltip, customTheme);
  return /* @__PURE__ */ jsx22(
    Floating,
    {
      animation,
      arrow: arrow4,
      content,
      placement,
      style,
      theme: theme4,
      trigger,
      className,
      ...props,
      children
    }
  );
};
Tooltip.displayName = "Tooltip";

// node_modules/flowbite-react/dist/esm/components/Clipboard/ClipboardWithIcon.mjs
import { jsx as jsx23 } from "react/jsx-runtime";
import { forwardRef as forwardRef6, useState as useState8 } from "react";

// node_modules/react-icons/fa6/index.mjs
function FaCheck(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" }, "child": [] }] })(props);
}
function FaClipboardList(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 384 512" }, "child": [{ "tag": "path", "attr": { "d": "M192 0c-41.8 0-77.4 26.7-90.5 64H64C28.7 64 0 92.7 0 128V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H282.5C269.4 26.7 233.8 0 192 0zm0 64a32 32 0 1 1 0 64 32 32 0 1 1 0-64zM72 272a24 24 0 1 1 48 0 24 24 0 1 1 -48 0zm104-16H304c8.8 0 16 7.2 16 16s-7.2 16-16 16H176c-8.8 0-16-7.2-16-16s7.2-16 16-16zM72 368a24 24 0 1 1 48 0 24 24 0 1 1 -48 0zm88 0c0-8.8 7.2-16 16-16H304c8.8 0 16 7.2 16 16s-7.2 16-16 16H176c-8.8 0-16-7.2-16-16z" }, "child": [] }] })(props);
}
function FaQuoteRight(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M448 296c0 66.3-53.7 120-120 120h-8c-17.7 0-32-14.3-32-32s14.3-32 32-32h8c30.9 0 56-25.1 56-56v-8H320c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64h64c35.3 0 64 28.7 64 64v32 32 72zm-256 0c0 66.3-53.7 120-120 120H64c-17.7 0-32-14.3-32-32s14.3-32 32-32h8c30.9 0 56-25.1 56-56v-8H64c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64h64c35.3 0 64 28.7 64 64v32 32 72z" }, "child": [] }] })(props);
}

// node_modules/flowbite-react/dist/esm/components/Clipboard/helpers.mjs
var copyToClipboard = (valueToCopy, setIsJustCopied) => {
  setIsJustCopied(true);
  navigator?.clipboard?.writeText(valueToCopy).then(() => {
    console.log("Copy Successfull");
  }).catch((error2) => {
    console.error("Failed to Copy text: ", error2);
    setIsJustCopied(false);
  });
  setTimeout(() => setIsJustCopied(false), 4e3);
};

// node_modules/flowbite-react/dist/esm/components/Clipboard/ClipboardWithIcon.mjs
var ClipboardWithIcon = forwardRef6(
  ({ valueToCopy, icon: Icon = FaClipboardList, theme: customTheme = {}, className, ...rest }, ref) => {
    const [isJustCopied, setIsJustCopied] = useState8(false);
    const theme4 = mergeDeep(getTheme().clipboard.withIcon, customTheme);
    return /* @__PURE__ */ jsx23(
      "button",
      {
        className: twMerge(theme4.base, className),
        onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),
        ...rest,
        ref,
        children: isJustCopied ? /* @__PURE__ */ jsx23(FaCheck, { "aria-hidden": true, className: theme4.icon.successIcon }) : /* @__PURE__ */ jsx23(Icon, { "aria-hidden": true, className: theme4.icon.defaultIcon })
      }
    );
  }
);

// node_modules/flowbite-react/dist/esm/components/Clipboard/ClipboardWithIconText.mjs
import { jsx as jsx24, jsxs as jsxs12 } from "react/jsx-runtime";
import { forwardRef as forwardRef7, useState as useState9 } from "react";
var ClipboardWithIconText = forwardRef7(
  ({ valueToCopy, icon: Icon = FaClipboardList, label = "Copy", theme: customTheme = {}, className, ...rest }, ref) => {
    const [isJustCopied, setIsJustCopied] = useState9(false);
    const theme4 = mergeDeep(getTheme().clipboard.withIconText, customTheme);
    return /* @__PURE__ */ jsx24(
      "button",
      {
        className: twMerge(theme4.base, className),
        onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),
        ...rest,
        ref,
        children: isJustCopied ? /* @__PURE__ */ jsxs12("span", { className: theme4.label.base, children: [
          /* @__PURE__ */ jsx24(FaCheck, { "aria-hidden": true, className: theme4.icon.successIcon }),
          /* @__PURE__ */ jsx24("span", { className: theme4.label.successText, children: "Copied" })
        ] }) : /* @__PURE__ */ jsxs12("span", { className: theme4.label.base, children: [
          /* @__PURE__ */ jsx24(Icon, { "aria-hidden": true, className: theme4.icon.defaultIcon }),
          /* @__PURE__ */ jsx24("span", { className: theme4.label.defaultText, children: label })
        ] })
      }
    );
  }
);

// node_modules/flowbite-react/dist/esm/components/Clipboard/Clipboard.mjs
var ClipboardComponent = forwardRef8(
  ({ className, valueToCopy, label, theme: customTheme = {}, ...rest }, ref) => {
    const [isJustCopied, setIsJustCopied] = useState10(false);
    const theme4 = mergeDeep(getTheme().clipboard.button, customTheme);
    return /* @__PURE__ */ jsx25(Tooltip, { content: isJustCopied ? "Copied" : "Copy to clipboard", className: "[&_*]:cursor-pointer", children: /* @__PURE__ */ jsx25(
      "button",
      {
        className: twMerge(theme4.base, className),
        onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),
        ...rest,
        ref,
        children: /* @__PURE__ */ jsx25("span", { className: theme4.label, children: label })
      }
    ) });
  }
);
ClipboardComponent.displayName = "Clipboard";
ClipboardWithIcon.displayName = "Clipboard.WithIcon";
ClipboardWithIconText.displayName = "Clipboard.WithIconText";
var Clipboard = Object.assign(ClipboardComponent, {
  WithIcon: ClipboardWithIcon,
  WithIconText: ClipboardWithIconText
});

// node_modules/flowbite-react/dist/esm/components/DarkThemeToggle/DarkThemeToggle.mjs
import { jsxs as jsxs13, jsx as jsx26 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/hooks/use-is-mounted.mjs
import { useState as useState11, useEffect as useEffect7 } from "react";
function useIsMounted() {
  const [mounted, setMounted] = useState11(false);
  useEffect7(() => setMounted(true), []);
  return mounted;
}

// node_modules/flowbite-react/dist/esm/hooks/use-theme-mode.mjs
import { useState as useState12, useEffect as useEffect9 } from "react";

// node_modules/flowbite-react/dist/esm/hooks/use-watch-localstorage-value.mjs
import { useEffect as useEffect8 } from "react";
var useWatchLocalStorageValue = ({
  key: watchKey,
  onChange
}) => {
  function handleStorageChange({ key, newValue }) {
    if (key === watchKey) onChange(newValue);
  }
  useEffect8(() => {
    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, []);
};

// node_modules/flowbite-react/dist/esm/hooks/use-theme-mode.mjs
var DEFAULT_MODE = "light";
var LS_THEME_MODE = "flowbite-theme-mode";
var SYNC_THEME_MODE = "flowbite-theme-mode-sync";
var useThemeMode = () => {
  const [mode, setMode] = useState12(getInitialMode(getThemeMode()));
  useEffect9(() => {
    setModeInLS(mode);
    setModeInDOM(mode);
  }, []);
  useWatchLocalStorageValue({
    key: LS_THEME_MODE,
    onChange(newValue) {
      if (newValue) return handleSetMode(newValue);
    }
  });
  useSyncMode((mode2) => setMode(mode2));
  const handleSetMode = (mode2) => {
    setMode(mode2);
    setModeInLS(mode2);
    setModeInDOM(mode2);
    document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, { detail: mode2 }));
  };
  const toggleMode = () => {
    let newMode = mode;
    if (newMode === "auto") newMode = computeModeValue(newMode);
    newMode = newMode === "dark" ? "light" : "dark";
    handleSetMode(newMode);
  };
  const clearMode = () => {
    const newMode = getThemeMode() ?? DEFAULT_MODE;
    handleSetMode(newMode);
  };
  return { mode, computedMode: computeModeValue(mode), setMode: handleSetMode, toggleMode, clearMode };
};
var useSyncMode = (onChange) => {
  useEffect9(() => {
    function handleSync(e3) {
      const mode = e3.detail;
      onChange(mode);
    }
    document.addEventListener(SYNC_THEME_MODE, handleSync);
    return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);
  }, []);
};
var setModeInLS = (mode) => localStorage.setItem(LS_THEME_MODE, mode);
var setModeInDOM = (mode) => {
  const computedMode = computeModeValue(mode);
  if (computedMode === "dark") {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
};
var getInitialMode = (defaultMode) => {
  if (!isClient()) return DEFAULT_MODE;
  const LSMode = localStorage.getItem(LS_THEME_MODE);
  return LSMode ?? defaultMode ?? DEFAULT_MODE;
};
var computeModeValue = (mode) => {
  return mode === "auto" ? prefersColorScheme() : mode;
};
var prefersColorScheme = () => {
  return window.matchMedia?.("(prefers-color-scheme: dark)").matches ? "dark" : "light";
};

// node_modules/flowbite-react/dist/esm/components/DarkThemeToggle/DarkThemeToggle.mjs
var DarkThemeToggle = ({
  className,
  theme: customTheme = {},
  iconDark: IconDark = HiSun,
  iconLight: IconLight = HiMoon,
  ...props
}) => {
  const isMounted = useIsMounted();
  const { computedMode, toggleMode } = useThemeMode();
  const theme4 = mergeDeep(getTheme().darkThemeToggle, customTheme);
  return /* @__PURE__ */ jsxs13(
    "button",
    {
      type: "button",
      "aria-label": "Toggle dark mode",
      "data-testid": "dark-theme-toggle",
      className: twMerge(theme4.root.base, className),
      onClick: toggleMode,
      ...props,
      children: [
        /* @__PURE__ */ jsx26(
          IconDark,
          {
            "aria-label": "Currently dark mode",
            "data-active": isMounted && computedMode === "dark",
            className: twMerge(theme4.root.icon, "hidden dark:block")
          }
        ),
        /* @__PURE__ */ jsx26(
          IconLight,
          {
            "aria-label": "Currently light mode",
            "data-active": isMounted && computedMode === "light",
            className: twMerge(theme4.root.icon, "dark:hidden")
          }
        )
      ]
    }
  );
};
DarkThemeToggle.displayName = "DarkThemeToggle";

// node_modules/flowbite-react/dist/esm/components/Datepicker/Datepicker.mjs
import { jsx as jsx33, jsxs as jsxs16 } from "react/jsx-runtime";
import { forwardRef as forwardRef10, useState as useState13, useRef as useRef7, useImperativeHandle, useEffect as useEffect10 } from "react";

// node_modules/flowbite-react/dist/esm/components/TextInput/TextInput.mjs
import { jsxs as jsxs14, Fragment as Fragment6, jsx as jsx28 } from "react/jsx-runtime";
import { forwardRef as forwardRef9 } from "react";

// node_modules/flowbite-react/dist/esm/components/HelperText/HelperText.mjs
import { jsx as jsx27 } from "react/jsx-runtime";
var HelperText = ({
  children,
  className,
  color = "default",
  theme: customTheme = {},
  value,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().helperText, customTheme);
  return /* @__PURE__ */ jsx27("p", { className: twMerge(theme4.root.base, theme4.root.colors[color], className), ...props, children: value ?? children ?? "" });
};
HelperText.displayName = "HelperText";

// node_modules/flowbite-react/dist/esm/components/TextInput/TextInput.mjs
var TextInput = forwardRef9(
  ({
    addon,
    className,
    color = "gray",
    helperText,
    icon: Icon,
    rightIcon: RightIcon,
    shadow,
    sizing = "md",
    theme: customTheme = {},
    type = "text",
    ...props
  }, ref) => {
    const theme4 = mergeDeep(getTheme().textInput, customTheme);
    return /* @__PURE__ */ jsxs14(Fragment6, { children: [
      /* @__PURE__ */ jsxs14("div", { className: twMerge(theme4.base, className), children: [
        addon && /* @__PURE__ */ jsx28("span", { className: theme4.addon, children: addon }),
        /* @__PURE__ */ jsxs14("div", { className: theme4.field.base, children: [
          Icon && /* @__PURE__ */ jsx28("div", { className: theme4.field.icon.base, children: /* @__PURE__ */ jsx28(Icon, { className: theme4.field.icon.svg }) }),
          RightIcon && /* @__PURE__ */ jsx28("div", { "data-testid": "right-icon", className: theme4.field.rightIcon.base, children: /* @__PURE__ */ jsx28(RightIcon, { className: theme4.field.rightIcon.svg }) }),
          /* @__PURE__ */ jsx28(
            "input",
            {
              className: twMerge(
                theme4.field.input.base,
                theme4.field.input.colors[color],
                theme4.field.input.sizes[sizing],
                theme4.field.input.withIcon[Icon ? "on" : "off"],
                theme4.field.input.withRightIcon[RightIcon ? "on" : "off"],
                theme4.field.input.withAddon[addon ? "on" : "off"],
                theme4.field.input.withShadow[shadow ? "on" : "off"]
              ),
              type,
              ...props,
              ref
            }
          )
        ] })
      ] }),
      helperText && /* @__PURE__ */ jsx28(HelperText, { color, children: helperText })
    ] });
  }
);
TextInput.displayName = "TextInput";

// node_modules/flowbite-react/dist/esm/components/Datepicker/DatepickerContext.mjs
import { createContext as createContext4, useContext as useContext6 } from "react";
var DatepickerContext = createContext4(void 0);
function useDatePickerContext() {
  const context = useContext6(DatepickerContext);
  if (!context) {
    throw new Error("useDatePickerContext should be used within the DatePickerContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Datepicker/helpers.mjs
var Views = /* @__PURE__ */ ((Views2) => {
  Views2[Views2["Days"] = 0] = "Days";
  Views2[Views2["Months"] = 1] = "Months";
  Views2[Views2["Years"] = 2] = "Years";
  Views2[Views2["Decades"] = 3] = "Decades";
  return Views2;
})(Views || {});
var WeekStart = /* @__PURE__ */ ((WeekStart2) => {
  WeekStart2[WeekStart2["Sunday"] = 0] = "Sunday";
  WeekStart2[WeekStart2["Monday"] = 1] = "Monday";
  WeekStart2[WeekStart2["Tuesday"] = 2] = "Tuesday";
  WeekStart2[WeekStart2["Wednesday"] = 3] = "Wednesday";
  WeekStart2[WeekStart2["Thursday"] = 4] = "Thursday";
  WeekStart2[WeekStart2["Friday"] = 5] = "Friday";
  WeekStart2[WeekStart2["Saturday"] = 6] = "Saturday";
  return WeekStart2;
})(WeekStart || {});
var isDateInRange = (date, minDate, maxDate) => {
  const dateTime = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();
  if (minDate && maxDate) {
    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();
    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();
    return dateTime >= minDateTime && dateTime <= maxDateTime;
  }
  if (minDate) {
    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();
    return dateTime >= minDateTime;
  }
  if (maxDate) {
    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();
    return dateTime <= maxDateTime;
  }
  return true;
};
var isDateEqual = (date, selectedDate) => {
  date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
  selectedDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());
  return date.getTime() === selectedDate.getTime();
};
var getFirstDateInRange = (date, minDate, maxDate) => {
  if (!isDateInRange(date, minDate, maxDate)) {
    if (minDate && date < minDate) {
      date = minDate;
    } else if (maxDate && date > maxDate) {
      date = maxDate;
    }
  }
  return date;
};
var getFirstDayOfTheMonth = (date, weekStart) => {
  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
  const dayOfWeek = firstDayOfMonth.getDay();
  let diff = dayOfWeek - weekStart;
  if (diff < 0) {
    diff += 7;
  }
  return addDays(firstDayOfMonth, -diff);
};
var getWeekDays = (lang, weekStart) => {
  const weekdays = [];
  const date = /* @__PURE__ */ new Date(0);
  date.setDate(date.getDate() - date.getDay() + weekStart);
  const formatter = new Intl.DateTimeFormat(lang, { weekday: "short" });
  for (let i2 = 0; i2 < 7; i2++) {
    weekdays.push(formatter.format(addDays(date, i2)));
  }
  return weekdays;
};
var addDays = (date, amount) => {
  const newDate = new Date(date);
  newDate.setDate(newDate.getDate() + amount);
  return newDate;
};
var addMonths = (date, amount) => {
  const newDate = new Date(date);
  newDate.setMonth(newDate.getMonth() + amount);
  return newDate;
};
var addYears = (date, amount) => {
  const newDate = new Date(date);
  newDate.setFullYear(newDate.getFullYear() + amount);
  return newDate;
};
var getFormattedDate = (language, date, options2) => {
  let defaultOptions3 = {
    day: "numeric",
    month: "long",
    year: "numeric"
  };
  if (options2) {
    defaultOptions3 = options2;
  }
  return new Intl.DateTimeFormat(language, defaultOptions3).format(date);
};
var startOfYearPeriod = (date, years) => {
  const year = date.getFullYear();
  return Math.floor(year / years) * years;
};
var isDateInDecade = (date, startYear) => {
  const year = date.getFullYear();
  const endYear = startYear + 9;
  return year >= startYear && year <= endYear;
};

// node_modules/flowbite-react/dist/esm/components/Datepicker/Views/Days.mjs
import { jsxs as jsxs15, Fragment as Fragment7, jsx as jsx29 } from "react/jsx-runtime";
var DatepickerViewsDays = ({ theme: customTheme = {} }) => {
  const {
    theme: rootTheme,
    weekStart,
    minDate,
    maxDate,
    viewDate,
    selectedDate,
    changeSelectedDate,
    language
  } = useDatePickerContext();
  const theme4 = mergeDeep(rootTheme.views.days, customTheme);
  const weekDays = getWeekDays(language, weekStart);
  const startDate = getFirstDayOfTheMonth(viewDate, weekStart);
  return /* @__PURE__ */ jsxs15(Fragment7, { children: [
    /* @__PURE__ */ jsx29("div", { className: theme4.header.base, children: weekDays.map((day, index3) => /* @__PURE__ */ jsx29("span", { className: theme4.header.title, children: day }, index3)) }),
    /* @__PURE__ */ jsx29("div", { className: theme4.items.base, children: [...Array(42)].map((_date, index3) => {
      const currentDate = addDays(startDate, index3);
      const day = getFormattedDate(language, currentDate, { day: "numeric" });
      const isSelected = isDateEqual(selectedDate, currentDate);
      const isDisabled2 = !isDateInRange(currentDate, minDate, maxDate);
      return /* @__PURE__ */ jsx29(
        "button",
        {
          disabled: isDisabled2,
          type: "button",
          className: twMerge(
            theme4.items.item.base,
            isSelected && theme4.items.item.selected,
            isDisabled2 && theme4.items.item.disabled
          ),
          onClick: () => {
            if (isDisabled2) return;
            changeSelectedDate(currentDate, true);
          },
          children: day
        },
        index3
      );
    }) })
  ] });
};

// node_modules/flowbite-react/dist/esm/components/Datepicker/Views/Decades.mjs
import { jsx as jsx30 } from "react/jsx-runtime";
var DatepickerViewsDecades = ({ theme: customTheme = {} }) => {
  const { theme: rootTheme, selectedDate, viewDate, setViewDate, setView } = useDatePickerContext();
  const theme4 = mergeDeep(rootTheme.views.decades, customTheme);
  return /* @__PURE__ */ jsx30("div", { className: theme4.items.base, children: [...Array(12)].map((_year, index3) => {
    const first = startOfYearPeriod(viewDate, 100);
    const year = first - 10 + index3 * 10;
    const firstDate = new Date(year, 0, 1);
    const lastDate = addYears(firstDate, 9);
    const isSelected = isDateInDecade(viewDate, year);
    const isDisabled2 = !isDateInRange(viewDate, firstDate, lastDate);
    return /* @__PURE__ */ jsx30(
      "button",
      {
        disabled: isDisabled2,
        type: "button",
        className: twMerge(
          theme4.items.item.base,
          isSelected && theme4.items.item.selected,
          isDisabled2 && theme4.items.item.disabled
        ),
        onClick: () => {
          if (isDisabled2) return;
          setViewDate(addYears(viewDate, year - selectedDate.getFullYear()));
          setView(Views.Years);
        },
        children: year
      },
      index3
    );
  }) });
};

// node_modules/flowbite-react/dist/esm/components/Datepicker/Views/Months.mjs
import { jsx as jsx31 } from "react/jsx-runtime";
var DatepickerViewsMonth = ({ theme: customTheme = {} }) => {
  const {
    theme: rootTheme,
    minDate,
    maxDate,
    selectedDate,
    viewDate,
    language,
    setViewDate,
    setView
  } = useDatePickerContext();
  const theme4 = mergeDeep(rootTheme.views.months, customTheme);
  return /* @__PURE__ */ jsx31("div", { className: theme4.items.base, children: [...Array(12)].map((_month, index3) => {
    const newDate = new Date(viewDate.getTime());
    newDate.setMonth(index3);
    const month = getFormattedDate(language, newDate, { month: "short" });
    const isSelected = isDateEqual(selectedDate, newDate);
    const isDisabled2 = !isDateInRange(newDate, minDate, maxDate);
    return /* @__PURE__ */ jsx31(
      "button",
      {
        disabled: isDisabled2,
        type: "button",
        className: twMerge(
          theme4.items.item.base,
          isSelected && theme4.items.item.selected,
          isDisabled2 && theme4.items.item.disabled
        ),
        onClick: () => {
          if (isDisabled2) return;
          setViewDate(newDate);
          setView(Views.Days);
        },
        children: month
      },
      index3
    );
  }) });
};

// node_modules/flowbite-react/dist/esm/components/Datepicker/Views/Years.mjs
import { jsx as jsx32 } from "react/jsx-runtime";
var DatepickerViewsYears = ({ theme: customTheme = {} }) => {
  const { theme: rootTheme, selectedDate, minDate, maxDate, viewDate, setViewDate, setView } = useDatePickerContext();
  const theme4 = mergeDeep(rootTheme.views.years, customTheme);
  return /* @__PURE__ */ jsx32("div", { className: theme4.items.base, children: [...Array(12)].map((_year, index3) => {
    const first = startOfYearPeriod(viewDate, 10);
    const year = first - 1 + index3 * 1;
    const newDate = new Date(viewDate.getTime());
    newDate.setFullYear(year);
    const isSelected = isDateEqual(selectedDate, newDate);
    const isDisabled2 = !isDateInRange(newDate, minDate, maxDate);
    return /* @__PURE__ */ jsx32(
      "button",
      {
        disabled: isDisabled2,
        type: "button",
        className: twMerge(
          theme4.items.item.base,
          isSelected && theme4.items.item.selected,
          isDisabled2 && theme4.items.item.disabled
        ),
        onClick: () => {
          if (isDisabled2) return;
          setViewDate(newDate);
          setView(Views.Months);
        },
        children: year
      },
      index3
    );
  }) });
};

// node_modules/flowbite-react/dist/esm/components/Datepicker/Datepicker.mjs
var DatepickerRender = ({
  title,
  open,
  inline: inline4 = false,
  autoHide = true,
  // Hide when selected the day
  showClearButton = true,
  labelClearButton = "Clear",
  showTodayButton = true,
  labelTodayButton = "Today",
  defaultDate = /* @__PURE__ */ new Date(),
  minDate,
  maxDate,
  language = "en",
  weekStart = WeekStart.Sunday,
  className,
  theme: customTheme = {},
  onSelectedDateChanged,
  ...props
}, ref) => {
  const theme4 = mergeDeep(getTheme().datepicker, customTheme);
  defaultDate = getFirstDateInRange(defaultDate, minDate, maxDate);
  const [isOpen, setIsOpen] = useState13(open);
  const [view, setView] = useState13(Views.Days);
  const [selectedDate, setSelectedDate] = useState13(defaultDate);
  const [viewDate, setViewDate] = useState13(defaultDate);
  const inputRef = useRef7(null);
  const datepickerRef = useRef7(null);
  const changeSelectedDate = (date, useAutohide) => {
    setSelectedDate(date);
    if (onSelectedDateChanged) {
      onSelectedDateChanged(date);
    }
    if (autoHide && view === Views.Days && useAutohide == true && !inline4) {
      setIsOpen(false);
    }
  };
  const clearDate = () => {
    changeSelectedDate(defaultDate, true);
    if (defaultDate) {
      setViewDate(defaultDate);
    }
  };
  useImperativeHandle(ref, () => ({
    focus() {
      inputRef.current?.focus();
    },
    clear() {
      clearDate();
    }
  }));
  const renderView = (type) => {
    switch (type) {
      case Views.Decades:
        return /* @__PURE__ */ jsx33(DatepickerViewsDecades, { theme: theme4.views.decades });
      case Views.Years:
        return /* @__PURE__ */ jsx33(DatepickerViewsYears, { theme: theme4.views.years });
      case Views.Months:
        return /* @__PURE__ */ jsx33(DatepickerViewsMonth, { theme: theme4.views.months });
      case Views.Days:
      default:
        return /* @__PURE__ */ jsx33(DatepickerViewsDays, { theme: theme4.views.days });
    }
  };
  const getNextView = () => {
    switch (view) {
      case Views.Days:
        return Views.Months;
      case Views.Months:
        return Views.Years;
      case Views.Years:
        return Views.Decades;
    }
    return view;
  };
  const getViewTitle = () => {
    switch (view) {
      case Views.Decades:
        return `${startOfYearPeriod(viewDate, 100)} - ${startOfYearPeriod(viewDate, 100) + 90}`;
      case Views.Years:
        return `${startOfYearPeriod(viewDate, 10)} - ${startOfYearPeriod(viewDate, 10) + 9}`;
      case Views.Months:
        return getFormattedDate(language, viewDate, { year: "numeric" });
      case Views.Days:
      default:
        return getFormattedDate(language, viewDate, { month: "long", year: "numeric" });
    }
  };
  const getViewDatePage = (view2, date, value) => {
    switch (view2) {
      case Views.Days:
        return new Date(addMonths(date, value));
      case Views.Months:
        return new Date(addYears(date, value));
      case Views.Years:
        return new Date(addYears(date, value * 10));
      case Views.Decades:
        return new Date(addYears(date, value * 100));
      default:
        return new Date(addYears(date, value * 10));
    }
  };
  useEffect10(() => {
    const handleClickOutside = (event) => {
      const clickedInsideDatepicker = datepickerRef?.current?.contains(event.target);
      const clickedInsideInput = inputRef?.current?.contains(event.target);
      if (!clickedInsideDatepicker && !clickedInsideInput) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [inputRef, datepickerRef, setIsOpen]);
  return /* @__PURE__ */ jsx33(
    DatepickerContext.Provider,
    {
      value: {
        theme: theme4,
        language,
        minDate,
        maxDate,
        weekStart,
        isOpen,
        setIsOpen,
        view,
        setView,
        viewDate,
        setViewDate,
        selectedDate,
        setSelectedDate,
        changeSelectedDate
      },
      children: /* @__PURE__ */ jsxs16("div", { className: twMerge(theme4.root.base, className), children: [
        !inline4 && /* @__PURE__ */ jsx33(
          TextInput,
          {
            theme: theme4.root.input,
            icon: HiCalendar,
            ref: inputRef,
            onFocus: () => {
              if (!isDateEqual(viewDate, selectedDate)) {
                setViewDate(selectedDate);
              }
              setIsOpen(true);
            },
            value: selectedDate && getFormattedDate(language, selectedDate),
            readOnly: true,
            ...props
          }
        ),
        (isOpen || inline4) && /* @__PURE__ */ jsx33("div", { ref: datepickerRef, className: twMerge(theme4.popup.root.base, inline4 && theme4.popup.root.inline), children: /* @__PURE__ */ jsxs16("div", { className: theme4.popup.root.inner, children: [
          /* @__PURE__ */ jsxs16("div", { className: theme4.popup.header.base, children: [
            title && /* @__PURE__ */ jsx33("div", { className: theme4.popup.header.title, children: title }),
            /* @__PURE__ */ jsxs16("div", { className: theme4.popup.header.selectors.base, children: [
              /* @__PURE__ */ jsx33(
                "button",
                {
                  type: "button",
                  className: twMerge(
                    theme4.popup.header.selectors.button.base,
                    theme4.popup.header.selectors.button.prev
                  ),
                  onClick: () => setViewDate(getViewDatePage(view, viewDate, -1)),
                  children: /* @__PURE__ */ jsx33(HiArrowLeft, {})
                }
              ),
              /* @__PURE__ */ jsx33(
                "button",
                {
                  type: "button",
                  className: twMerge(
                    theme4.popup.header.selectors.button.base,
                    theme4.popup.header.selectors.button.view
                  ),
                  onClick: () => setView(getNextView()),
                  children: getViewTitle()
                }
              ),
              /* @__PURE__ */ jsx33(
                "button",
                {
                  type: "button",
                  className: twMerge(
                    theme4.popup.header.selectors.button.base,
                    theme4.popup.header.selectors.button.next
                  ),
                  onClick: () => setViewDate(getViewDatePage(view, viewDate, 1)),
                  children: /* @__PURE__ */ jsx33(HiArrowRight, {})
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsx33("div", { className: theme4.popup.view.base, children: renderView(view) }),
          (showClearButton || showTodayButton) && /* @__PURE__ */ jsxs16("div", { className: theme4.popup.footer.base, children: [
            showTodayButton && /* @__PURE__ */ jsx33(
              "button",
              {
                type: "button",
                className: twMerge(theme4.popup.footer.button.base, theme4.popup.footer.button.today),
                onClick: () => {
                  const today = /* @__PURE__ */ new Date();
                  changeSelectedDate(today, true);
                  setViewDate(today);
                },
                children: labelTodayButton
              }
            ),
            showClearButton && /* @__PURE__ */ jsx33(
              "button",
              {
                type: "button",
                className: twMerge(theme4.popup.footer.button.base, theme4.popup.footer.button.clear),
                onClick: () => {
                  changeSelectedDate(defaultDate, true);
                  if (defaultDate) {
                    setViewDate(defaultDate);
                  }
                },
                children: labelClearButton
              }
            )
          ] })
        ] }) })
      ] })
    }
  );
};
var Datepicker = forwardRef10(DatepickerRender);
Datepicker.displayName = "Datepicker";

// node_modules/flowbite-react/dist/esm/components/Drawer/Drawer.mjs
import { jsxs as jsxs18, jsx as jsx36 } from "react/jsx-runtime";
import { useId as useId3, useEffect as useEffect11 } from "react";

// node_modules/flowbite-react/dist/esm/components/Drawer/DrawerContext.mjs
import { createContext as createContext5, useContext as useContext7 } from "react";
var DrawerContext = createContext5(void 0);
function useDrawerContext() {
  const context = useContext7(DrawerContext);
  if (!context) {
    throw new Error("useDrawerContext should be used within the DrawerContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Drawer/DrawerHeader.mjs
import { jsxs as jsxs17, jsx as jsx34 } from "react/jsx-runtime";
import { useId as useId2 } from "react";

// node_modules/react-icons/md/index.mjs
function MdHome(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" }, "child": [] }] })(props);
}
function MdClose(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" }, "child": [] }] })(props);
}

// node_modules/flowbite-react/dist/esm/components/Drawer/DrawerHeader.mjs
var DrawerHeader = ({
  children,
  className,
  closeIcon: CloseIcon = MdClose,
  theme: customTheme = {},
  title,
  titleIcon: TitleIcon = MdHome,
  ...props
}) => {
  const id = useId2();
  const { id: mainDivId, isOpen, onClose, theme: rootTheme } = useDrawerContext();
  const theme4 = mergeDeep(rootTheme.header, customTheme);
  return /* @__PURE__ */ jsxs17("div", { className, ...props, children: [
    /* @__PURE__ */ jsxs17("h5", { className: theme4.inner.titleText, id: mainDivId, children: [
      /* @__PURE__ */ jsx34(TitleIcon, { "aria-hidden": true, className: theme4.inner.titleIcon }),
      title
    ] }),
    /* @__PURE__ */ jsxs17("button", { onClick: onClose, "data-testid": "close-drawer", className: theme4.inner.closeButton, children: [
      /* @__PURE__ */ jsx34(CloseIcon, { "aria-hidden": true, className: theme4.inner.closeIcon }),
      /* @__PURE__ */ jsx34("span", { className: "sr-only", children: "Close menu" })
    ] }),
    /* @__PURE__ */ jsx34("span", { className: theme4.collapsed[isOpen ? "on" : "off"], id: `flowbite-drawer-header-${id}`, children })
  ] });
};
DrawerHeader.displayName = "Drawer.Header";

// node_modules/flowbite-react/dist/esm/components/Drawer/DrawerItems.mjs
import { jsx as jsx35 } from "react/jsx-runtime";
var DrawerItems = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useDrawerContext();
  const theme4 = mergeDeep(rootTheme.items, customTheme);
  return /* @__PURE__ */ jsx35("div", { "data-testid": "flowbite-drawer-items", className: twMerge(theme4.base, className), ...props, children });
};
DrawerItems.displayName = "Drawer.Items";

// node_modules/flowbite-react/dist/esm/components/Drawer/Drawer.mjs
var DrawerComponent = ({
  backdrop = true,
  children,
  className,
  edge = false,
  position = "left",
  onClose,
  open: isOpen = false,
  theme: customTheme = {},
  ...props
}) => {
  const id = useId3();
  const theme4 = mergeDeep(getTheme().drawer, customTheme);
  useEffect11(() => {
    const handleEscapeKey = (event) => {
      if (event.key === "Escape" && isOpen && onClose) {
        onClose();
      }
    };
    document.addEventListener("keydown", handleEscapeKey);
    return () => document.removeEventListener("keydown", handleEscapeKey);
  }, [onClose, isOpen]);
  return /* @__PURE__ */ jsxs18(DrawerContext.Provider, { value: { theme: theme4, onClose, isOpen, id }, children: [
    /* @__PURE__ */ jsx36(
      "div",
      {
        "aria-modal": true,
        "aria-describedby": `drawer-dialog-${id}`,
        role: "dialog",
        tabIndex: -1,
        "data-testid": "flowbite-drawer",
        className: twMerge(
          theme4.root.base,
          theme4.root.position[position][isOpen ? "on" : "off"],
          edge && !isOpen && theme4.root.edge,
          className
        ),
        ...props,
        children
      }
    ),
    isOpen && backdrop && /* @__PURE__ */ jsx36("div", { onClick: () => onClose(), className: theme4.root.backdrop })
  ] });
};
DrawerComponent.displayName = "Drawer";
var Drawer = Object.assign(DrawerComponent, {
  Header: DrawerHeader,
  Items: DrawerItems
});

// node_modules/flowbite-react/dist/esm/components/Dropdown/Dropdown.mjs
import { jsxs as jsxs21, jsx as jsx40 } from "react/jsx-runtime";
import { useState as useState14, useRef as useRef8, useCallback as useCallback5, useMemo as useMemo7, useEffect as useEffect12, cloneElement as cloneElement6 } from "react";

// node_modules/flowbite-react/dist/esm/components/Dropdown/DropdownContext.mjs
import { createContext as createContext6, useContext as useContext8 } from "react";
var DropdownContext = createContext6(void 0);
function useDropdownContext() {
  const context = useContext8(DropdownContext);
  if (!context) {
    throw new Error("useDropdownContext should be used within the DropdownContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Dropdown/DropdownDivider.mjs
import { jsx as jsx37 } from "react/jsx-runtime";
var DropdownDivider = ({ className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useDropdownContext();
  const theme4 = customTheme.divider ?? rootTheme.floating.divider;
  return /* @__PURE__ */ jsx37("div", { className: twMerge(theme4, className), ...props });
};

// node_modules/flowbite-react/dist/esm/components/Dropdown/DropdownHeader.mjs
import { jsxs as jsxs19, Fragment as Fragment8, jsx as jsx38 } from "react/jsx-runtime";
var DropdownHeader = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useDropdownContext();
  const theme4 = customTheme.header ?? rootTheme.floating.header;
  return /* @__PURE__ */ jsxs19(Fragment8, { children: [
    /* @__PURE__ */ jsx38("div", { className: twMerge(theme4, className), ...props, children }),
    /* @__PURE__ */ jsx38(DropdownDivider, {})
  ] });
};

// node_modules/flowbite-react/dist/esm/components/Dropdown/DropdownItem.mjs
import { jsx as jsx39, jsxs as jsxs20 } from "react/jsx-runtime";
import { forwardRef as forwardRef11 } from "react";
var DropdownItem = forwardRef11(
  ({ children, className, icon: Icon, onClick, theme: customTheme = {}, ...props }, forwardedRef) => {
    const { ref: listItemRef, index: index3 } = useListItem({ label: typeof children === "string" ? children : void 0 });
    const ref = useMergeRefs([forwardedRef, listItemRef]);
    const { theme: rootTheme, activeIndex, dismissOnClick, getItemProps, handleSelect } = useDropdownContext();
    const isActive = activeIndex === index3;
    const theme4 = mergeDeep(rootTheme.floating.item, customTheme);
    const theirProps = props;
    return /* @__PURE__ */ jsx39("li", { role: "menuitem", className: theme4.container, children: /* @__PURE__ */ jsxs20(
      ButtonBase,
      {
        ref,
        className: twMerge(theme4.base, className),
        ...theirProps,
        ...getItemProps({
          onClick: () => {
            onClick?.();
            dismissOnClick && handleSelect(null);
          }
        }),
        tabIndex: isActive ? 0 : -1,
        children: [
          Icon && /* @__PURE__ */ jsx39(Icon, { className: theme4.icon }),
          children
        ]
      }
    ) });
  }
);
DropdownItem.displayName = "DropdownItem";

// node_modules/flowbite-react/dist/esm/components/Dropdown/Dropdown.mjs
var icons = {
  top: HiOutlineChevronUp,
  right: HiOutlineChevronRight,
  bottom: HiOutlineChevronDown,
  left: HiOutlineChevronLeft
};
var Trigger = ({
  refs,
  children,
  inline: inline4,
  theme: theme4,
  disabled,
  setButtonWidth,
  getReferenceProps,
  renderTrigger,
  ...buttonProps
}) => {
  const ref = refs.reference;
  const a11yProps = getReferenceProps();
  useEffect12(() => {
    if (ref.current) {
      setButtonWidth?.(ref.current.clientWidth);
    }
  }, [ref, setButtonWidth]);
  if (renderTrigger) {
    const triggerElement = renderTrigger(theme4);
    return cloneElement6(triggerElement, { ref: refs.setReference, disabled, ...a11yProps, ...triggerElement.props });
  }
  return inline4 ? /* @__PURE__ */ jsx40("button", { type: "button", ref: refs.setReference, className: theme4?.inlineWrapper, disabled, ...a11yProps, children }) : /* @__PURE__ */ jsx40(Button, { ...buttonProps, disabled, type: "button", ref: refs.setReference, ...a11yProps, children });
};
var DropdownComponent = ({
  children,
  className,
  dismissOnClick = true,
  theme: customTheme = {},
  enableTypeAhead = true,
  renderTrigger,
  ...props
}) => {
  const [open, setOpen] = useState14(false);
  const [activeIndex, setActiveIndex] = useState14(null);
  const [selectedIndex, setSelectedIndex] = useState14(null);
  const [buttonWidth, setButtonWidth] = useState14(void 0);
  const elementsRef = useRef8([]);
  const labelsRef = useRef8([]);
  const theme4 = mergeDeep(getTheme().dropdown, customTheme);
  const theirProps = props;
  const dataTestId = props["data-testid"] || "flowbite-dropdown-target";
  const {
    placement = props.inline ? "bottom-start" : "bottom",
    trigger = "click",
    label,
    inline: inline4,
    arrowIcon = true,
    ...buttonProps
  } = theirProps;
  const handleSelect = useCallback5((index3) => {
    setSelectedIndex(index3);
    setOpen(false);
  }, []);
  const handleTypeaheadMatch = useCallback5(
    (index3) => {
      if (open) {
        setActiveIndex(index3);
      } else {
        handleSelect(index3);
      }
    },
    [open, handleSelect]
  );
  const { context, floatingStyles, refs } = useBaseFLoating({
    open,
    setOpen,
    placement
  });
  const listNav = useListNavigation(context, {
    listRef: elementsRef,
    activeIndex,
    selectedIndex,
    onNavigate: setActiveIndex
  });
  const typeahead = useTypeahead(context, {
    listRef: labelsRef,
    activeIndex,
    selectedIndex,
    onMatch: handleTypeaheadMatch,
    enabled: enableTypeAhead
  });
  const { getReferenceProps, getFloatingProps, getItemProps } = useFloatingInteractions({
    context,
    role: "menu",
    trigger,
    interactions: [listNav, typeahead]
  });
  const Icon = useMemo7(() => {
    const [p] = placement.split("-");
    return icons[p] ?? HiOutlineChevronDown;
  }, [placement]);
  return /* @__PURE__ */ jsxs21(DropdownContext.Provider, { value: { theme: theme4, activeIndex, dismissOnClick, getItemProps, handleSelect }, children: [
    /* @__PURE__ */ jsxs21(
      Trigger,
      {
        ...buttonProps,
        refs,
        inline: inline4,
        theme: theme4,
        "data-testid": dataTestId,
        className: twMerge(theme4.floating.target, buttonProps.className),
        setButtonWidth,
        getReferenceProps,
        renderTrigger,
        children: [
          label,
          arrowIcon && /* @__PURE__ */ jsx40(Icon, { className: theme4.arrowIcon })
        ]
      }
    ),
    open && /* @__PURE__ */ jsx40(FloatingFocusManager, { context, modal: false, children: /* @__PURE__ */ jsx40(
      "div",
      {
        ref: refs.setFloating,
        style: { ...floatingStyles, minWidth: buttonWidth },
        "data-testid": "flowbite-dropdown",
        "aria-expanded": open,
        ...getFloatingProps({
          className: twMerge(
            theme4.floating.base,
            theme4.floating.animation,
            "duration-100",
            !open && theme4.floating.hidden,
            theme4.floating.style.auto,
            className
          )
        }),
        children: /* @__PURE__ */ jsx40(FloatingList, { elementsRef, labelsRef, children: /* @__PURE__ */ jsx40("ul", { className: theme4.content, tabIndex: -1, children }) })
      }
    ) })
  ] });
};
DropdownComponent.displayName = "Dropdown";
DropdownHeader.displayName = "Dropdown.Header";
DropdownDivider.displayName = "Dropdown.Divider";
var Dropdown = Object.assign(DropdownComponent, {
  Item: DropdownItem,
  Header: DropdownHeader,
  Divider: DropdownDivider
});

// node_modules/flowbite-react/dist/esm/components/FileInput/FileInput.mjs
import { jsxs as jsxs22, Fragment as Fragment9, jsx as jsx41 } from "react/jsx-runtime";
import { forwardRef as forwardRef12 } from "react";
var FileInput = forwardRef12(
  ({ className, color = "gray", helperText, sizing = "md", theme: customTheme = {}, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().fileInput, customTheme);
    return /* @__PURE__ */ jsxs22(Fragment9, { children: [
      /* @__PURE__ */ jsx41("div", { className: twMerge(theme4.root.base, className), children: /* @__PURE__ */ jsx41("div", { className: theme4.field.base, children: /* @__PURE__ */ jsx41(
        "input",
        {
          className: twMerge(
            theme4.field.input.base,
            theme4.field.input.colors[color],
            theme4.field.input.sizes[sizing]
          ),
          ...props,
          type: "file",
          ref
        }
      ) }) }),
      helperText && /* @__PURE__ */ jsx41(HelperText, { color, children: helperText })
    ] });
  }
);
FileInput.displayName = "FileInput";

// node_modules/flowbite-react/dist/esm/components/FloatingLabel/FloatingLabel.mjs
import { jsxs as jsxs23, jsx as jsx42 } from "react/jsx-runtime";
import { forwardRef as forwardRef13, useId as useId4 } from "react";
var FloatingLabel = forwardRef13(
  ({
    label,
    helperText,
    color = "default",
    sizing = "md",
    variant,
    disabled = false,
    theme: customTheme = {},
    className,
    ...props
  }, ref) => {
    const randomId = useId4();
    const theme4 = mergeDeep(getTheme().floatingLabel, customTheme);
    return /* @__PURE__ */ jsxs23("div", { children: [
      /* @__PURE__ */ jsxs23("div", { className: twMerge("relative", variant === "standard" ? "z-0" : ""), children: [
        /* @__PURE__ */ jsx42(
          "input",
          {
            type: "text",
            id: props.id ? props.id : "floatingLabel" + randomId,
            "aria-describedby": "outlined_success_help",
            className: twMerge(theme4.input[color][variant][sizing], className),
            placeholder: " ",
            "data-testid": "floating-label",
            disabled,
            ...props,
            ref
          }
        ),
        /* @__PURE__ */ jsx42(
          "label",
          {
            htmlFor: props.id ? props.id : "floatingLabel" + randomId,
            className: twMerge(theme4.label[color][variant][sizing], className),
            children: label
          }
        )
      ] }),
      /* @__PURE__ */ jsx42("p", { id: "outlined_helper_text" + randomId, className: twMerge(theme4.helperText[color], className), children: helperText })
    ] });
  }
);
FloatingLabel.displayName = "FloatingLabel";

// node_modules/flowbite-react/dist/esm/components/Flowbite/Flowbite.mjs
import { jsxs as jsxs25, Fragment as Fragment11, jsx as jsx44 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/theme-store/init/index.mjs
import { jsxs as jsxs24, Fragment as Fragment10, jsx as jsx43 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/theme-store/init/client.mjs
function ThemeClientInit({ theme: theme4 }) {
  setTheme(theme4);
  return null;
}

// node_modules/flowbite-react/dist/esm/theme-store/init/mode.mjs
function ThemeModeInit({ mode }) {
  if (mode) setThemeMode(mode);
  useThemeMode();
  return null;
}

// node_modules/flowbite-react/dist/esm/theme-store/init/server.mjs
function ThemeServerInit({ theme: theme4 }) {
  setTheme(theme4);
  return null;
}

// node_modules/flowbite-react/dist/esm/theme-store/init/index.mjs
function ThemeInit({ mode, theme: theme4 }) {
  return /* @__PURE__ */ jsxs24(Fragment10, { children: [
    /* @__PURE__ */ jsx43(ThemeModeInit, { mode }),
    /* @__PURE__ */ jsx43(ThemeServerInit, { theme: theme4 }),
    /* @__PURE__ */ jsx43(ThemeClientInit, { theme: theme4 })
  ] });
}

// node_modules/flowbite-react/dist/esm/components/Flowbite/Flowbite.mjs
var Flowbite = ({ children, theme: theme4 }) => {
  return /* @__PURE__ */ jsxs25(Fragment11, { children: [
    /* @__PURE__ */ jsx44(ThemeInit, { mode: theme4?.mode, theme: theme4?.theme }),
    children
  ] });
};
Flowbite.displayName = "Flowbite";

// node_modules/flowbite-react/dist/esm/components/Footer/Footer.mjs
import { jsx as jsx52 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Footer/FooterBrand.mjs
import { jsx as jsx45, jsxs as jsxs26 } from "react/jsx-runtime";
var FooterBrand = ({
  alt,
  className,
  children,
  href,
  name,
  src,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().footer.brand, customTheme);
  return /* @__PURE__ */ jsx45("div", { children: href ? /* @__PURE__ */ jsxs26("a", { "data-testid": "flowbite-footer-brand", href, className: twMerge(theme4.base, className), ...props, children: [
    /* @__PURE__ */ jsx45("img", { alt, src, className: theme4.img }),
    /* @__PURE__ */ jsx45("span", { "data-testid": "flowbite-footer-brand-span", className: theme4.span, children: name }),
    children
  ] }) : /* @__PURE__ */ jsx45(
    "img",
    {
      alt,
      "data-testid": "flowbite-footer-brand",
      src,
      className: twMerge(theme4.img, className),
      ...props
    }
  ) });
};

// node_modules/flowbite-react/dist/esm/components/Footer/FooterCopyright.mjs
import { jsxs as jsxs27, jsx as jsx46 } from "react/jsx-runtime";
var FooterCopyright = ({
  by,
  className,
  href,
  theme: customTheme = {},
  year,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().footer.copyright, customTheme);
  return /* @__PURE__ */ jsxs27("div", { "data-testid": "flowbite-footer-copyright", className: twMerge(theme4.base, className), ...props, children: [
    "\xA9 ",
    year,
    href ? /* @__PURE__ */ jsx46("a", { href, className: theme4.href, children: by }) : /* @__PURE__ */ jsx46("span", { "data-testid": "flowbite-footer-copyright-span", className: theme4.span, children: by })
  ] });
};

// node_modules/flowbite-react/dist/esm/components/Footer/FooterDivider.mjs
import { jsx as jsx47 } from "react/jsx-runtime";
var FooterDivider = ({ className, theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().footer.divider, customTheme);
  return /* @__PURE__ */ jsx47("hr", { "data-testid": "footer-divider", className: twMerge(theme4.base, className), ...props });
};

// node_modules/flowbite-react/dist/esm/components/Footer/FooterIcon.mjs
import { jsx as jsx48 } from "react/jsx-runtime";
var FooterIcon = ({
  ariaLabel,
  className,
  href,
  icon: Icon,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().footer.icon, customTheme);
  return /* @__PURE__ */ jsx48("div", { children: href ? /* @__PURE__ */ jsx48(
    "a",
    {
      "aria-label": ariaLabel,
      "data-testid": "flowbite-footer-icon",
      href,
      className: twMerge(theme4.base, className),
      ...props,
      children: /* @__PURE__ */ jsx48(Icon, { className: theme4.size })
    }
  ) : /* @__PURE__ */ jsx48(Icon, { "data-testid": "flowbite-footer-icon", className: theme4.size, ...props }) });
};

// node_modules/flowbite-react/dist/esm/components/Footer/FooterLink.mjs
import { jsx as jsx49 } from "react/jsx-runtime";
var FooterLink = ({
  as: Component2 = "a",
  children,
  className,
  href,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().footer.groupLink.link, customTheme);
  return /* @__PURE__ */ jsx49("li", { className: twMerge(theme4.base, className), children: /* @__PURE__ */ jsx49(Component2, { href, className: theme4.href, ...props, children }) });
};

// node_modules/flowbite-react/dist/esm/components/Footer/FooterLinkGroup.mjs
import { jsx as jsx50 } from "react/jsx-runtime";
var FooterLinkGroup = ({
  children,
  className,
  col = false,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().footer.groupLink, customTheme);
  return /* @__PURE__ */ jsx50("ul", { "data-testid": "footer-groupLink", className: twMerge(theme4.base, col && theme4.col, className), ...props, children });
};

// node_modules/flowbite-react/dist/esm/components/Footer/FooterTitle.mjs
import { jsx as jsx51 } from "react/jsx-runtime";
var FooterTitle = ({
  as: Component2 = "h2",
  className,
  theme: customTheme = {},
  title,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().footer.title, customTheme);
  return /* @__PURE__ */ jsx51(Component2, { "data-testid": "flowbite-footer-title", className: twMerge(theme4.base, className), ...props, children: title });
};

// node_modules/flowbite-react/dist/esm/components/Footer/Footer.mjs
var FooterComponent = ({
  bgDark = false,
  children,
  className,
  container = false,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().footer, customTheme);
  return /* @__PURE__ */ jsx52(
    "footer",
    {
      "data-testid": "flowbite-footer",
      className: twMerge(theme4.root.base, bgDark && theme4.root.bgDark, container && theme4.root.container, className),
      ...props,
      children
    }
  );
};
FooterComponent.displayName = "Footer";
FooterCopyright.displayName = "Footer.Copyright";
FooterLink.displayName = "Footer.Link";
FooterBrand.displayName = "Footer.Brand";
FooterLinkGroup.displayName = "Footer.LinkGroup";
FooterIcon.displayName = "Footer.Icon";
FooterTitle.displayName = "Footer.Title";
FooterDivider.displayName = "Footer.Divider";
var Footer = Object.assign(FooterComponent, {
  Copyright: FooterCopyright,
  Link: FooterLink,
  LinkGroup: FooterLinkGroup,
  Brand: FooterBrand,
  Icon: FooterIcon,
  Title: FooterTitle,
  Divider: FooterDivider
});

// node_modules/flowbite-react/dist/esm/components/HR/HR.mjs
import { jsx as jsx57 } from "react/jsx-runtime";
import { forwardRef as forwardRef18 } from "react";

// node_modules/flowbite-react/dist/esm/components/HR/HRIcon.mjs
import { jsxs as jsxs28, jsx as jsx53 } from "react/jsx-runtime";
import { forwardRef as forwardRef14 } from "react";
var HRIcon = forwardRef14(
  ({ theme: customTheme = {}, icon: Icon = FaQuoteRight, className, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().hr.icon, customTheme);
    return /* @__PURE__ */ jsxs28("div", { className: theme4.base, children: [
      /* @__PURE__ */ jsx53(
        "hr",
        {
          className: twMerge(theme4.hrLine, className),
          role: "separator",
          "data-testid": "flowbite-hr-icon",
          ref,
          ...props
        }
      ),
      /* @__PURE__ */ jsx53("div", { className: theme4.icon.base, children: /* @__PURE__ */ jsx53(Icon, { "aria-hidden": true, className: theme4.icon.icon }) })
    ] });
  }
);

// node_modules/flowbite-react/dist/esm/components/HR/HRSquare.mjs
import { jsx as jsx54 } from "react/jsx-runtime";
import { forwardRef as forwardRef15 } from "react";
var HRSquare = forwardRef15(
  ({ theme: customTheme = {}, className, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().hr.square, customTheme);
    return /* @__PURE__ */ jsx54(
      "hr",
      {
        className: twMerge(theme4.base, className),
        role: "separator",
        "data-testid": "flowbite-hr-square",
        ref,
        ...props
      }
    );
  }
);

// node_modules/flowbite-react/dist/esm/components/HR/HRText.mjs
import { jsxs as jsxs29, jsx as jsx55 } from "react/jsx-runtime";
import { forwardRef as forwardRef16 } from "react";
var HRText = forwardRef16(
  ({ theme: customTheme = {}, text, className, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().hr.text, customTheme);
    return /* @__PURE__ */ jsxs29("div", { className: theme4.base, children: [
      /* @__PURE__ */ jsx55(
        "hr",
        {
          className: twMerge(theme4.hrLine, className),
          "data-testid": "flowbite-hr-text",
          role: "separator",
          ref,
          ...props
        }
      ),
      /* @__PURE__ */ jsx55("span", { className: theme4.text, children: text })
    ] });
  }
);

// node_modules/flowbite-react/dist/esm/components/HR/HRTrimmed.mjs
import { jsx as jsx56 } from "react/jsx-runtime";
import { forwardRef as forwardRef17 } from "react";
var HRTrimmed = forwardRef17(
  ({ theme: customTheme = {}, className, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().hr.trimmed, customTheme);
    return /* @__PURE__ */ jsx56(
      "hr",
      {
        className: twMerge(theme4.base, className),
        role: "separator",
        "data-testid": "flowbite-hr-trimmed",
        ref,
        ...props
      }
    );
  }
);

// node_modules/flowbite-react/dist/esm/components/HR/HR.mjs
var HRComponent = forwardRef18(({ theme: customTheme = {}, className, ...props }, ref) => {
  const theme4 = mergeDeep(getTheme().hr.root, customTheme);
  return /* @__PURE__ */ jsx57("hr", { className: twMerge(theme4.base, className), role: "separator", "data-testid": "flowbite-hr", ref, ...props });
});
HRComponent.displayName = "HR";
HRTrimmed.displayName = "HR.Trimmed";
HRIcon.displayName = "HR.Icon";
HRText.displayName = "HR.Text";
HRSquare.displayName = "HR.Square";
var HR = Object.assign(HRComponent, {
  Trimmed: HRTrimmed,
  Icon: HRIcon,
  Text: HRText,
  Square: HRSquare
});

// node_modules/flowbite-react/dist/esm/components/Kbd/Kbd.mjs
import { jsxs as jsxs30, jsx as jsx58 } from "react/jsx-runtime";
var Kbd = ({ children, className, icon: Icon, theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().kbd, customTheme);
  return /* @__PURE__ */ jsxs30("span", { className: twMerge(theme4.root.base, className), "data-testid": "flowbite-kbd", ...props, children: [
    Icon && /* @__PURE__ */ jsx58(Icon, { className: theme4.root.icon, "data-testid": "flowbite-kbd-icon" }),
    children
  ] });
};
Kbd.displayName = "Kbd";

// node_modules/flowbite-react/dist/esm/components/Label/Label.mjs
import { jsx as jsx59 } from "react/jsx-runtime";
var Label = ({
  children,
  className,
  color = "default",
  disabled = false,
  theme: customTheme = {},
  value,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().label, customTheme);
  return /* @__PURE__ */ jsx59(
    "label",
    {
      className: twMerge(theme4.root.base, theme4.root.colors[color], disabled && theme4.root.disabled, className),
      "data-testid": "flowbite-label",
      ...props,
      children: value ?? children ?? ""
    }
  );
};
Label.displayName = "Label";

// node_modules/flowbite-react/dist/esm/components/List/List.mjs
import { jsx as jsx61 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/List/ListItem.mjs
import { jsxs as jsxs31, jsx as jsx60 } from "react/jsx-runtime";
var ListItem = ({ children, className, icon: Icon, theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().list.item, customTheme);
  return /* @__PURE__ */ jsxs31("li", { className: twMerge(theme4.withIcon[Icon ? "on" : "off"], className), ...props, children: [
    Icon && /* @__PURE__ */ jsx60(Icon, { className: twMerge(theme4.icon) }),
    children
  ] });
};

// node_modules/flowbite-react/dist/esm/components/List/List.mjs
var ListComponent = ({
  children,
  className,
  unstyled,
  nested,
  ordered,
  horizontal,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().list, customTheme);
  const Component2 = ordered ? "ol" : "ul";
  return /* @__PURE__ */ jsx61(
    Component2,
    {
      className: twMerge(
        theme4.root.base,
        theme4.root.ordered[ordered ? "on" : "off"],
        unstyled && theme4.root.unstyled,
        nested && theme4.root.nested,
        horizontal && theme4.root.horizontal,
        className
      ),
      ...props,
      children
    }
  );
};
ListComponent.displayName = "List";
ListItem.displayName = "List.Item";
var List = Object.assign(ListComponent, { Item: ListItem });

// node_modules/flowbite-react/dist/esm/components/ListGroup/ListGroup.mjs
import { jsx as jsx63 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/ListGroup/ListGroupItem.mjs
import { jsx as jsx62, jsxs as jsxs32 } from "react/jsx-runtime";
var ListGroupItem = ({
  active: isActive,
  children,
  className,
  href,
  icon: Icon,
  onClick,
  theme: customTheme = {},
  disabled,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().listGroup.item, customTheme);
  const isLink = typeof href !== "undefined";
  const Component2 = isLink ? "a" : "button";
  return /* @__PURE__ */ jsx62("li", { className: twMerge(theme4.base, className), children: /* @__PURE__ */ jsxs32(
    Component2,
    {
      href,
      onClick,
      type: isLink ? void 0 : "button",
      disabled,
      className: twMerge(
        theme4.link.active[isActive ? "on" : "off"],
        theme4.link.disabled[disabled ? "on" : "off"],
        theme4.link.base,
        theme4.link.href[isLink ? "on" : "off"]
      ),
      ...props,
      children: [
        Icon && /* @__PURE__ */ jsx62(Icon, { "aria-hidden": true, "data-testid": "flowbite-list-group-item-icon", className: theme4.link.icon }),
        children
      ]
    }
  ) });
};

// node_modules/flowbite-react/dist/esm/components/ListGroup/ListGroup.mjs
var ListGroupComponent = ({ children, className, theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().listGroup, customTheme);
  return /* @__PURE__ */ jsx63("ul", { className: twMerge(theme4.root.base, className), ...props, children });
};
ListGroupComponent.displayName = "ListGroup";
ListGroupItem.displayName = "ListGroup.Item";
var ListGroup = Object.assign(ListGroupComponent, {
  Item: ListGroupItem
});

// node_modules/flowbite-react/dist/esm/components/MegaMenu/MegaMenu.mjs
import { jsx as jsx71 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Navbar/Navbar.mjs
import { jsx as jsx68 } from "react/jsx-runtime";
import { useState as useState15 } from "react";

// node_modules/flowbite-react/dist/esm/components/Navbar/NavbarBrand.mjs
import { jsx as jsx64 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Navbar/NavbarContext.mjs
import { createContext as createContext7, useContext as useContext9 } from "react";
var NavbarContext = createContext7(void 0);
function useNavbarContext() {
  const context = useContext9(NavbarContext);
  if (!context) {
    throw new Error("useNavBarContext should be used within the NavbarContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Navbar/NavbarBrand.mjs
var NavbarBrand = ({
  as: Component2 = "a",
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { theme: rootTheme } = useNavbarContext();
  const theme4 = mergeDeep(rootTheme.brand, customTheme);
  return /* @__PURE__ */ jsx64(Component2, { className: twMerge(theme4.base, className), ...props, children });
};

// node_modules/flowbite-react/dist/esm/components/Navbar/NavbarCollapse.mjs
import { jsx as jsx65 } from "react/jsx-runtime";
var NavbarCollapse = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, isOpen } = useNavbarContext();
  const theme4 = mergeDeep(rootTheme.collapse, customTheme);
  return /* @__PURE__ */ jsx65(
    "div",
    {
      "data-testid": "flowbite-navbar-collapse",
      className: twMerge(theme4.base, theme4.hidden[!isOpen ? "on" : "off"], className),
      ...props,
      children: /* @__PURE__ */ jsx65("ul", { className: theme4.list, children })
    }
  );
};

// node_modules/flowbite-react/dist/esm/components/Navbar/NavbarLink.mjs
import { jsx as jsx66 } from "react/jsx-runtime";
var NavbarLink = ({
  active,
  as: Component2 = "a",
  disabled,
  children,
  className,
  theme: customTheme = {},
  onClick,
  ...props
}) => {
  const { theme: rootTheme, setIsOpen } = useNavbarContext();
  const theme4 = mergeDeep(rootTheme.link, customTheme);
  const handleClick = (event) => {
    setIsOpen(false);
    onClick?.(event);
  };
  return /* @__PURE__ */ jsx66("li", { children: /* @__PURE__ */ jsx66(
    Component2,
    {
      className: twMerge(
        theme4.base,
        active && theme4.active.on,
        !active && !disabled && theme4.active.off,
        theme4.disabled[disabled ? "on" : "off"],
        className
      ),
      onClick: handleClick,
      ...props,
      children
    }
  ) });
};

// node_modules/flowbite-react/dist/esm/components/Navbar/NavbarToggle.mjs
import { jsxs as jsxs33, jsx as jsx67 } from "react/jsx-runtime";

// node_modules/react-icons/fa/index.mjs
function FaBars(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z" }, "child": [] }] })(props);
}

// node_modules/flowbite-react/dist/esm/components/Navbar/NavbarToggle.mjs
var NavbarToggle = ({
  barIcon: BarIcon = FaBars,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { theme: rootTheme, isOpen, setIsOpen } = useNavbarContext();
  const theme4 = mergeDeep(rootTheme.toggle, customTheme);
  const handleClick = () => {
    setIsOpen(!isOpen);
  };
  return /* @__PURE__ */ jsxs33(
    "button",
    {
      "data-testid": "flowbite-navbar-toggle",
      onClick: handleClick,
      className: twMerge(theme4.base, className),
      ...props,
      children: [
        /* @__PURE__ */ jsx67("span", { className: "sr-only", children: "Open main menu" }),
        /* @__PURE__ */ jsx67(BarIcon, { "aria-hidden": true, className: theme4.icon })
      ]
    }
  );
};

// node_modules/flowbite-react/dist/esm/components/Navbar/Navbar.mjs
var NavbarComponent = ({
  border,
  children,
  className,
  fluid = false,
  menuOpen,
  rounded,
  theme: customTheme = {},
  ...props
}) => {
  const [isOpen, setIsOpen] = useState15(menuOpen);
  const theme4 = mergeDeep(getTheme().navbar, customTheme);
  return /* @__PURE__ */ jsx68(NavbarContext.Provider, { value: { theme: theme4, isOpen, setIsOpen }, children: /* @__PURE__ */ jsx68(
    "nav",
    {
      className: twMerge(
        theme4.root.base,
        theme4.root.bordered[border ? "on" : "off"],
        theme4.root.rounded[rounded ? "on" : "off"],
        className
      ),
      ...props,
      children: /* @__PURE__ */ jsx68("div", { className: twMerge(theme4.root.inner.base, theme4.root.inner.fluid[fluid ? "on" : "off"]), children })
    }
  ) });
};
NavbarComponent.displayName = "Navbar";
NavbarBrand.displayName = "Navbar.Brand";
NavbarCollapse.displayName = "Navbar.Collapse";
NavbarLink.displayName = "Navbar.Link";
NavbarToggle.displayName = "Navbar.Toggle";
var Navbar = Object.assign(NavbarComponent, {
  Brand: NavbarBrand,
  Collapse: NavbarCollapse,
  Link: NavbarLink,
  Toggle: NavbarToggle
});

// node_modules/flowbite-react/dist/esm/components/MegaMenu/MegaMenuDropdown.mjs
import { jsx as jsx69 } from "react/jsx-runtime";
import { useState as useState16, useId as useId5, useRef as useRef9, useEffect as useEffect13 } from "react";
var MegaMenuDropdown = ({
  children,
  className,
  theme: customTheme = {},
  toggle,
  ...props
}) => {
  const [labelledBy, setLabelledBy] = useState16(void 0);
  const theme4 = mergeDeep(getTheme().megaMenu.dropdown, customTheme);
  if (toggle) {
    return /* @__PURE__ */ jsx69(
      Dropdown,
      {
        inline: true,
        label: toggle,
        placement: "bottom",
        theme: theme4.toggle,
        className: twMerge(theme4.base, className),
        children
      }
    );
  }
  const id = useId5();
  const ref = useRef9(null);
  useEffect13(() => {
    const findToggle = function() {
      const megaMenu = ref.current?.closest("nav");
      return megaMenu?.querySelector('[aria-haspopup="menu"]');
    };
    setLabelledBy(findToggle()?.id);
  }, []);
  return /* @__PURE__ */ jsx69(
    "div",
    {
      "aria-labelledby": labelledBy,
      id,
      ref,
      role: "menu",
      className: twMerge(theme4.base, className),
      ...props,
      children
    }
  );
};
MegaMenuDropdown.displayName = "MegaMenu.Dropdown";

// node_modules/flowbite-react/dist/esm/components/MegaMenu/MegaMenuDropdownToggle.mjs
import { jsx as jsx70 } from "react/jsx-runtime";
import { useId as useId6, useRef as useRef10, useState as useState17, useEffect as useEffect14 } from "react";
var MegaMenuDropdownToggle = ({
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const id = useId6();
  const ref = useRef10(null);
  const [controls, setControls] = useState17(void 0);
  const [isExpanded, setExpanded] = useState17(void 0);
  const theme4 = mergeDeep(getTheme().megaMenu.dropdownToggle, customTheme);
  const findDropdown = function() {
    const megaMenu = ref.current?.closest("nav");
    return megaMenu?.querySelector('[role="menu"]');
  };
  const onClick = function() {
    findDropdown()?.classList.toggle("hidden");
    setExpanded(!isExpanded);
  };
  useEffect14(() => {
    const dropdown = findDropdown();
    const isDropdownHidden = dropdown?.classList.contains("hidden");
    setControls(dropdown?.id);
    setExpanded(!isDropdownHidden);
  }, []);
  return /* @__PURE__ */ jsx70(
    "button",
    {
      "aria-controls": controls,
      "aria-expanded": isExpanded,
      "aria-haspopup": "menu",
      id,
      onClick,
      ref,
      className: twMerge(theme4.base, className),
      ...props,
      children
    }
  );
};
MegaMenuDropdownToggle.displayName = "MegaMenu.DropdownToggle";

// node_modules/flowbite-react/dist/esm/components/MegaMenu/MegaMenu.mjs
var MegaMenuComponent = ({ children, theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().megaMenu, customTheme);
  return /* @__PURE__ */ jsx71(Navbar, { fluid: true, theme: theme4, ...props, children });
};
var MegaMenu = Object.assign(MegaMenuComponent, {
  Dropdown: MegaMenuDropdown,
  DropdownToggle: MegaMenuDropdownToggle
});
MegaMenuComponent.displayName = "MegaMenu";

// node_modules/flowbite-react/dist/esm/components/Modal/Modal.mjs
import { jsx as jsx75 } from "react/jsx-runtime";
import { forwardRef as forwardRef19, useState as useState18 } from "react";

// node_modules/flowbite-react/dist/esm/components/Modal/ModalBody.mjs
import { jsx as jsx72 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Modal/ModalContext.mjs
import { createContext as createContext8, useContext as useContext10 } from "react";
var ModalContext = createContext8(void 0);
function useModalContext() {
  const context = useContext10(ModalContext);
  if (!context) {
    throw new Error("useModalContext should be used within the ModalContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Modal/ModalBody.mjs
var ModalBody = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, popup } = useModalContext();
  const theme4 = mergeDeep(rootTheme.body, customTheme);
  return /* @__PURE__ */ jsx72("div", { className: twMerge(theme4.base, popup && [theme4.popup], className), ...props, children });
};

// node_modules/flowbite-react/dist/esm/components/Modal/ModalFooter.mjs
import { jsx as jsx73 } from "react/jsx-runtime";
var ModalFooter = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, popup } = useModalContext();
  const theme4 = mergeDeep(rootTheme.footer, customTheme);
  return /* @__PURE__ */ jsx73("div", { className: twMerge(theme4.base, !popup && theme4.popup, className), ...props, children });
};

// node_modules/flowbite-react/dist/esm/components/Modal/ModalHeader.mjs
import { jsxs as jsxs34, jsx as jsx74 } from "react/jsx-runtime";
import { useId as useId7, useLayoutEffect as useLayoutEffect3 } from "react";
var ModalHeader = ({
  as: Component2 = "h3",
  children,
  className,
  theme: customTheme = {},
  id,
  ...props
}) => {
  const innerHeaderId = useId7();
  const headerId = id || innerHeaderId;
  const { theme: rootTheme, popup, onClose, setHeaderId } = useModalContext();
  const theme4 = mergeDeep(rootTheme.header, customTheme);
  useLayoutEffect3(() => {
    setHeaderId(headerId);
    return () => setHeaderId(void 0);
  }, [headerId, setHeaderId]);
  return /* @__PURE__ */ jsxs34("div", { className: twMerge(theme4.base, popup && theme4.popup, className), ...props, children: [
    /* @__PURE__ */ jsx74(Component2, { id: headerId, className: theme4.title, children }),
    /* @__PURE__ */ jsx74("button", { "aria-label": "Close", className: theme4.close.base, type: "button", onClick: onClose, children: /* @__PURE__ */ jsx74(HiOutlineX, { "aria-hidden": true, className: theme4.close.icon }) })
  ] });
};

// node_modules/flowbite-react/dist/esm/components/Modal/Modal.mjs
var ModalComponent = forwardRef19(
  ({
    children,
    className,
    dismissible = false,
    onClose,
    popup,
    position = "center",
    root,
    show,
    size: size4 = "2xl",
    theme: customTheme = {},
    initialFocus,
    ...props
  }, theirRef) => {
    const [headerId, setHeaderId] = useState18(void 0);
    const theme4 = mergeDeep(getTheme().modal, customTheme);
    const { context } = useFloating2({
      open: show,
      onOpenChange: () => onClose && onClose()
    });
    const ref = useMergeRefs([context.refs.setFloating, theirRef]);
    const click = useClick(context);
    const dismiss = useDismiss(context, { outsidePressEvent: "mousedown", enabled: dismissible });
    const role = useRole(context);
    const { getFloatingProps } = useInteractions([click, dismiss, role]);
    if (!show) {
      return null;
    }
    return /* @__PURE__ */ jsx75(ModalContext.Provider, { value: { theme: theme4, popup, onClose, setHeaderId }, children: /* @__PURE__ */ jsx75(FloatingPortal, { root, children: /* @__PURE__ */ jsx75(
      FloatingOverlay,
      {
        lockScroll: true,
        "data-testid": "modal-overlay",
        className: twMerge(
          theme4.root.base,
          theme4.root.positions[position],
          show ? theme4.root.show.on : theme4.root.show.off,
          className
        ),
        ...props,
        children: /* @__PURE__ */ jsx75(FloatingFocusManager, { context, initialFocus, children: /* @__PURE__ */ jsx75(
          "div",
          {
            ref,
            ...getFloatingProps(props),
            "aria-labelledby": headerId,
            className: twMerge(theme4.content.base, theme4.root.sizes[size4]),
            children: /* @__PURE__ */ jsx75("div", { className: theme4.content.inner, children })
          }
        ) })
      }
    ) }) });
  }
);
ModalComponent.displayName = "Modal";
ModalHeader.displayName = "Modal.Header";
ModalBody.displayName = "Modal.Body";
ModalFooter.displayName = "Modal.Footer";
var Modal = Object.assign(ModalComponent, {
  Header: ModalHeader,
  Body: ModalBody,
  Footer: ModalFooter
});

// node_modules/flowbite-react/dist/esm/components/Pagination/Pagination.mjs
import { jsxs as jsxs35, jsx as jsx77 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Pagination/helpers.mjs
var range = (start, end) => {
  if (start >= end) {
    return [];
  }
  return [...Array(end - start + 1).keys()].map((key) => key + start);
};

// node_modules/flowbite-react/dist/esm/components/Pagination/PaginationButton.mjs
import { jsx as jsx76 } from "react/jsx-runtime";
var PaginationButton = ({
  active,
  children,
  className,
  onClick,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().pagination, customTheme);
  return /* @__PURE__ */ jsx76(
    "button",
    {
      type: "button",
      className: twMerge(active && theme4.pages.selector.active, className),
      onClick,
      ...props,
      children
    }
  );
};
PaginationButton.displayName = "Pagination.Button";
var PaginationNavigation = ({
  children,
  className,
  onClick,
  theme: customTheme = {},
  disabled = false,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().pagination, customTheme);
  return /* @__PURE__ */ jsx76(
    "button",
    {
      type: "button",
      className: twMerge(disabled && theme4.pages.selector.disabled, className),
      disabled,
      onClick,
      ...props,
      children
    }
  );
};
PaginationNavigation.displayName = "Pagination.Navigation";

// node_modules/flowbite-react/dist/esm/components/Pagination/Pagination.mjs
var PaginationComponent = ({
  className,
  currentPage,
  layout = "pagination",
  nextLabel = "Next",
  onPageChange,
  previousLabel = "Previous",
  renderPaginationButton = (props2) => /* @__PURE__ */ jsx77(PaginationButton, { ...props2 }),
  showIcons: showIcon = false,
  theme: customTheme = {},
  totalPages,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().pagination, customTheme);
  const lastPage = Math.min(Math.max(layout === "pagination" ? currentPage + 2 : currentPage + 4, 5), totalPages);
  const firstPage = Math.max(1, lastPage - 4);
  const goToNextPage = () => {
    onPageChange(Math.min(currentPage + 1, totalPages));
  };
  const goToPreviousPage = () => {
    onPageChange(Math.max(currentPage - 1, 1));
  };
  return /* @__PURE__ */ jsxs35("nav", { className: twMerge(theme4.base, className), ...props, children: [
    layout === "table" && /* @__PURE__ */ jsxs35("div", { className: theme4.layout.table.base, children: [
      "Showing ",
      /* @__PURE__ */ jsx77("span", { className: theme4.layout.table.span, children: firstPage }),
      " to\xA0",
      /* @__PURE__ */ jsx77("span", { className: theme4.layout.table.span, children: lastPage }),
      " of\xA0",
      /* @__PURE__ */ jsx77("span", { className: theme4.layout.table.span, children: totalPages }),
      " Entries"
    ] }),
    /* @__PURE__ */ jsxs35("ul", { className: theme4.pages.base, children: [
      /* @__PURE__ */ jsx77("li", { children: /* @__PURE__ */ jsxs35(
        PaginationNavigation,
        {
          className: twMerge(theme4.pages.previous.base, showIcon && theme4.pages.showIcon),
          onClick: goToPreviousPage,
          disabled: currentPage === 1,
          children: [
            showIcon && /* @__PURE__ */ jsx77(HiChevronLeft, { "aria-hidden": true, className: theme4.pages.previous.icon }),
            previousLabel
          ]
        }
      ) }),
      layout === "pagination" && range(firstPage, lastPage).map((page) => /* @__PURE__ */ jsx77("li", { "aria-current": page === currentPage ? "page" : void 0, children: renderPaginationButton({
        className: twMerge(theme4.pages.selector.base, currentPage === page && theme4.pages.selector.active),
        active: page === currentPage,
        onClick: () => onPageChange(page),
        children: page
      }) }, page)),
      /* @__PURE__ */ jsx77("li", { children: /* @__PURE__ */ jsxs35(
        PaginationNavigation,
        {
          className: twMerge(theme4.pages.next.base, showIcon && theme4.pages.showIcon),
          onClick: goToNextPage,
          disabled: currentPage === totalPages,
          children: [
            nextLabel,
            showIcon && /* @__PURE__ */ jsx77(HiChevronRight, { "aria-hidden": true, className: theme4.pages.next.icon })
          ]
        }
      ) })
    ] })
  ] });
};
PaginationComponent.displayName = "Pagination";
var Pagination = Object.assign(PaginationComponent, {
  Button: PaginationButton
});

// node_modules/flowbite-react/dist/esm/components/Popover/Popover.mjs
import { jsxs as jsxs36, Fragment as Fragment12, jsx as jsx78 } from "react/jsx-runtime";
import { useState as useState19, useRef as useRef11, isValidElement as isValidElement3, useMemo as useMemo8, cloneElement as cloneElement7 } from "react";

// node_modules/flowbite-react/dist/esm/components/Progress/Progress.mjs
import { jsx as jsx79, Fragment as Fragment13, jsxs as jsxs37 } from "react/jsx-runtime";
import { useId as useId8 } from "react";
var Progress = ({
  className,
  color = "cyan",
  labelProgress = false,
  labelText = false,
  progress,
  progressLabelPosition = "inside",
  size: size4 = "md",
  textLabel = "progressbar",
  textLabelPosition = "inside",
  theme: customTheme = {},
  ...props
}) => {
  const id = useId8();
  const theme4 = mergeDeep(getTheme().progress, customTheme);
  return /* @__PURE__ */ jsx79(Fragment13, { children: /* @__PURE__ */ jsxs37("div", { id, "aria-label": textLabel, "aria-valuenow": progress, role: "progressbar", ...props, children: [
    (textLabel && labelText && textLabelPosition === "outside" || progress > 0 && labelProgress && progressLabelPosition === "outside") && /* @__PURE__ */ jsxs37("div", { className: theme4.label, "data-testid": "flowbite-progress-outer-label-container", children: [
      textLabel && labelText && textLabelPosition === "outside" && /* @__PURE__ */ jsx79("span", { "data-testid": "flowbite-progress-outer-text-label", children: textLabel }),
      labelProgress && progressLabelPosition === "outside" && /* @__PURE__ */ jsxs37("span", { "data-testid": "flowbite-progress-outer-progress-label", children: [
        progress,
        "%"
      ] })
    ] }),
    /* @__PURE__ */ jsx79("div", { className: twMerge(theme4.base, theme4.size[size4], className), children: /* @__PURE__ */ jsxs37("div", { style: { width: `${progress}%` }, className: twMerge(theme4.bar, theme4.color[color], theme4.size[size4]), children: [
      textLabel && labelText && textLabelPosition === "inside" && /* @__PURE__ */ jsx79("span", { "data-testid": "flowbite-progress-inner-text-label", children: textLabel }),
      progress > 0 && labelProgress && progressLabelPosition === "inside" && /* @__PURE__ */ jsxs37("span", { "data-testid": "flowbite-progress-inner-progress-label", children: [
        progress,
        "%"
      ] })
    ] }) })
  ] }) });
};
Progress.displayName = "Progress";

// node_modules/flowbite-react/dist/esm/components/Radio/Radio.mjs
import { jsx as jsx80 } from "react/jsx-runtime";
import { forwardRef as forwardRef20 } from "react";
var Radio = forwardRef20(
  ({ className, theme: customTheme = {}, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().radio, customTheme);
    return /* @__PURE__ */ jsx80("input", { ref, type: "radio", className: twMerge(theme4.root.base, className), ...props });
  }
);
Radio.displayName = "Radio";

// node_modules/flowbite-react/dist/esm/components/RangeSlider/RangeSlider.mjs
import { jsx as jsx81, Fragment as Fragment14 } from "react/jsx-runtime";
import { forwardRef as forwardRef21 } from "react";
var RangeSlider = forwardRef21(
  ({ className, sizing = "md", theme: customTheme = {}, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().rangeSlider, customTheme);
    return /* @__PURE__ */ jsx81(Fragment14, { children: /* @__PURE__ */ jsx81("div", { "data-testid": "flowbite-range-slider", className: twMerge(theme4.root.base, className), children: /* @__PURE__ */ jsx81("div", { className: theme4.field.base, children: /* @__PURE__ */ jsx81(
      "input",
      {
        ref,
        type: "range",
        className: twMerge(theme4.field.input.base, theme4.field.input.sizes[sizing]),
        ...props
      }
    ) }) }) });
  }
);
RangeSlider.displayName = "RangeSlider";

// node_modules/flowbite-react/dist/esm/components/Rating/Rating.mjs
import { jsx as jsx84 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Rating/RatingAdvanced.mjs
import { jsxs as jsxs38, jsx as jsx82 } from "react/jsx-runtime";
var RatingAdvanced = ({
  children,
  className,
  percentFilled = 0,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().ratingAdvanced, customTheme);
  return /* @__PURE__ */ jsxs38("div", { className: twMerge(theme4.base, className), ...props, children: [
    /* @__PURE__ */ jsx82("span", { className: theme4.label, children }),
    /* @__PURE__ */ jsx82("div", { className: theme4.progress.base, children: /* @__PURE__ */ jsx82(
      "div",
      {
        className: theme4.progress.fill,
        "data-testid": "flowbite-rating-fill",
        style: { width: `${percentFilled}%` }
      }
    ) }),
    /* @__PURE__ */ jsx82("span", { className: theme4.progress.label, children: `${percentFilled}%` })
  ] });
};

// node_modules/flowbite-react/dist/esm/components/Rating/RatingContext.mjs
import { createContext as createContext9, useContext as useContext11 } from "react";
var RatingContext = createContext9(void 0);
function useRatingContext() {
  const context = useContext11(RatingContext);
  if (!context) {
    throw new Error("useRatingContext should be used within the RatingContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Rating/RatingStar.mjs
import { jsx as jsx83 } from "react/jsx-runtime";
var RatingStar = ({
  className,
  filled = true,
  starIcon: Icon = HiStar,
  theme: customTheme = {},
  ...props
}) => {
  const { theme: rootTheme, size: size4 = "sm" } = useRatingContext();
  const theme4 = mergeDeep(rootTheme.star, customTheme);
  return /* @__PURE__ */ jsx83(
    Icon,
    {
      "data-testid": "flowbite-rating-star",
      className: twMerge(theme4.sizes[size4], theme4[filled ? "filled" : "empty"], className),
      ...props
    }
  );
};

// node_modules/flowbite-react/dist/esm/components/Rating/Rating.mjs
var RatingComponent = ({ children, className, size: size4 = "sm", theme: customTheme = {}, ...props }) => {
  const theme4 = mergeDeep(getTheme().rating, customTheme);
  return /* @__PURE__ */ jsx84(RatingContext.Provider, { value: { theme: theme4, size: size4 }, children: /* @__PURE__ */ jsx84("div", { className: twMerge(theme4.root.base, className), ...props, children }) });
};
RatingComponent.displayName = "Rating";
RatingStar.displayName = "Rating.Star";
RatingAdvanced.displayName = "Rating.Advanced";
var Rating = Object.assign(RatingComponent, {
  Star: RatingStar,
  Advanced: RatingAdvanced
});

// node_modules/flowbite-react/dist/esm/components/Select/Select.mjs
import { jsxs as jsxs39, jsx as jsx85 } from "react/jsx-runtime";
import { forwardRef as forwardRef22 } from "react";
var Select = forwardRef22(
  ({
    addon,
    children,
    className,
    color = "gray",
    helperText,
    icon: Icon,
    shadow,
    sizing = "md",
    theme: customTheme = {},
    ...props
  }, ref) => {
    const theme4 = mergeDeep(getTheme().select, customTheme);
    return /* @__PURE__ */ jsxs39("div", { className: twMerge(theme4.base, className), children: [
      addon && /* @__PURE__ */ jsx85("span", { className: theme4.addon, children: addon }),
      /* @__PURE__ */ jsxs39("div", { className: theme4.field.base, children: [
        Icon && /* @__PURE__ */ jsx85("div", { className: theme4.field.icon.base, children: /* @__PURE__ */ jsx85(Icon, { className: theme4.field.icon.svg }) }),
        /* @__PURE__ */ jsx85(
          "select",
          {
            className: twMerge(
              theme4.field.select.base,
              theme4.field.select.colors[color],
              theme4.field.select.sizes[sizing],
              theme4.field.select.withIcon[Icon ? "on" : "off"],
              theme4.field.select.withAddon[addon ? "on" : "off"],
              theme4.field.select.withShadow[shadow ? "on" : "off"]
            ),
            ...props,
            ref,
            children
          }
        ),
        helperText && /* @__PURE__ */ jsx85(HelperText, { color, children: helperText })
      ] })
    ] });
  }
);
Select.displayName = "Select";

// node_modules/flowbite-react/dist/esm/components/Sidebar/Sidebar.mjs
import { jsx as jsx92 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarCollapse.mjs
import { jsxs as jsxs40, jsx as jsx86, Fragment as Fragment15 } from "react/jsx-runtime";
import { useId as useId9, useState as useState20, useEffect as useEffect15 } from "react";

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarContext.mjs
import { createContext as createContext10, useContext as useContext12 } from "react";
var SidebarContext = createContext10(void 0);
function useSidebarContext() {
  const context = useContext12(SidebarContext);
  if (!context) {
    throw new Error("useSidebarContext should be used within the SidebarContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarItemContext.mjs
import { createContext as createContext11, useContext as useContext13 } from "react";
var SidebarItemContext = createContext11(void 0);
function useSidebarItemContext() {
  const context = useContext13(SidebarItemContext);
  if (!context) {
    throw new Error("useSidebarItemContext should be used within the SidebarItemContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarCollapse.mjs
var SidebarCollapse = ({
  children,
  className,
  icon: Icon,
  label,
  chevronIcon: ChevronIcon = HiChevronDown,
  renderChevronIcon,
  open = false,
  theme: customTheme = {},
  ...props
}) => {
  const id = useId9();
  const [isOpen, setOpen] = useState20(open);
  const { theme: rootTheme, isCollapsed } = useSidebarContext();
  const theme4 = mergeDeep(rootTheme.collapse, customTheme);
  useEffect15(() => setOpen(open), [open]);
  const Wrapper = ({ children: children2 }) => /* @__PURE__ */ jsx86("li", { children: isCollapsed && !isOpen ? /* @__PURE__ */ jsx86(Tooltip, { content: label, placement: "right", children: children2 }) : children2 });
  return /* @__PURE__ */ jsxs40(Wrapper, { children: [
    /* @__PURE__ */ jsxs40(
      "button",
      {
        id: `flowbite-sidebar-collapse-${id}`,
        onClick: () => setOpen(!isOpen),
        title: label,
        type: "button",
        className: twMerge(theme4.button, className),
        ...props,
        children: [
          Icon && /* @__PURE__ */ jsx86(
            Icon,
            {
              "aria-hidden": true,
              "data-testid": "flowbite-sidebar-collapse-icon",
              className: twMerge(theme4.icon.base, theme4.icon.open[isOpen ? "on" : "off"])
            }
          ),
          isCollapsed ? /* @__PURE__ */ jsx86("span", { className: "sr-only", children: label }) : /* @__PURE__ */ jsxs40(Fragment15, { children: [
            /* @__PURE__ */ jsx86("span", { "data-testid": "flowbite-sidebar-collapse-label", className: theme4.label.base, children: label }),
            renderChevronIcon ? renderChevronIcon(theme4, isOpen) : /* @__PURE__ */ jsx86(
              ChevronIcon,
              {
                "aria-hidden": true,
                className: twMerge(theme4.label.icon.base, theme4.label.icon.open[isOpen ? "on" : "off"])
              }
            )
          ] })
        ]
      }
    ),
    /* @__PURE__ */ jsx86("ul", { "aria-labelledby": `flowbite-sidebar-collapse-${id}`, hidden: !isOpen, className: theme4.list, children: /* @__PURE__ */ jsx86(SidebarItemContext.Provider, { value: { isInsideCollapse: true }, children }) })
  ] });
};
SidebarCollapse.displayName = "Sidebar.Collapse";

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarCTA.mjs
import { jsx as jsx87 } from "react/jsx-runtime";
var SidebarCTA = ({
  children,
  color = "info",
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { theme: rootTheme, isCollapsed } = useSidebarContext();
  const theme4 = mergeDeep(rootTheme.cta, customTheme);
  return /* @__PURE__ */ jsx87(
    "div",
    {
      "data-testid": "sidebar-cta",
      hidden: isCollapsed,
      className: twMerge(theme4.base, theme4.color[color], className),
      ...props,
      children
    }
  );
};
SidebarCTA.displayName = "Sidebar.CTA";

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarItem.mjs
import { jsx as jsx88, jsxs as jsxs41 } from "react/jsx-runtime";
import { forwardRef as forwardRef23, useId as useId10 } from "react";
var ListItem2 = ({ id, theme: theme4, isCollapsed, tooltipChildren, children: wrapperChildren, ...props }) => /* @__PURE__ */ jsx88("li", { ...props, children: isCollapsed ? /* @__PURE__ */ jsx88(
  Tooltip,
  {
    content: /* @__PURE__ */ jsx88(Children5, { id, theme: theme4, children: tooltipChildren }),
    placement: "right",
    children: wrapperChildren
  }
) : wrapperChildren });
var Children5 = ({ id, theme: theme4, children }) => {
  return /* @__PURE__ */ jsx88(
    "span",
    {
      "data-testid": "flowbite-sidebar-item-content",
      id: `flowbite-sidebar-item-${id}`,
      className: twMerge(theme4.content.base),
      children
    }
  );
};
var SidebarItem = forwardRef23(
  ({
    active: isActive,
    as: Component2 = "a",
    children,
    className,
    icon: Icon,
    label,
    labelColor = "info",
    theme: customTheme = {},
    ...props
  }, ref) => {
    const id = useId10();
    const { theme: rootTheme, isCollapsed } = useSidebarContext();
    const { isInsideCollapse } = useSidebarItemContext();
    const theme4 = mergeDeep(rootTheme.item, customTheme);
    return /* @__PURE__ */ jsx88(ListItem2, { theme: theme4, className: theme4.listItem, id, isCollapsed, tooltipChildren: children, children: /* @__PURE__ */ jsxs41(
      Component2,
      {
        "aria-labelledby": `flowbite-sidebar-item-${id}`,
        ref,
        className: twMerge(
          theme4.base,
          isActive && theme4.active,
          !isCollapsed && isInsideCollapse && theme4.collapsed?.insideCollapse,
          className
        ),
        ...props,
        children: [
          Icon && /* @__PURE__ */ jsx88(
            Icon,
            {
              "aria-hidden": true,
              "data-testid": "flowbite-sidebar-item-icon",
              className: twMerge(theme4.icon?.base, isActive && theme4.icon?.active)
            }
          ),
          isCollapsed && !Icon && /* @__PURE__ */ jsx88("span", { className: theme4.collapsed?.noIcon, children: children.charAt(0).toLocaleUpperCase() ?? "?" }),
          !isCollapsed && /* @__PURE__ */ jsx88(Children5, { id, theme: theme4, children }),
          !isCollapsed && label && /* @__PURE__ */ jsx88(Badge, { color: labelColor, "data-testid": "flowbite-sidebar-label", hidden: isCollapsed, className: theme4.label, children: label })
        ]
      }
    ) });
  }
);
SidebarItem.displayName = "Sidebar.Item";

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarItemGroup.mjs
import { jsx as jsx89 } from "react/jsx-runtime";
var SidebarItemGroup = ({
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { theme: rootTheme } = useSidebarContext();
  const theme4 = mergeDeep(rootTheme.itemGroup, customTheme);
  return /* @__PURE__ */ jsx89("ul", { "data-testid": "flowbite-sidebar-item-group", className: twMerge(theme4.base, className), ...props, children: /* @__PURE__ */ jsx89(SidebarItemContext.Provider, { value: { isInsideCollapse: false }, children }) });
};
SidebarItemGroup.displayName = "Sidebar.ItemGroup";

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarItems.mjs
import { jsx as jsx90 } from "react/jsx-runtime";
var SidebarItems = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useSidebarContext();
  const theme4 = mergeDeep(rootTheme.items, customTheme);
  return /* @__PURE__ */ jsx90("div", { className: twMerge(theme4.base, className), "data-testid": "flowbite-sidebar-items", ...props, children });
};
SidebarItems.displayName = "Sidebar.Items";

// node_modules/flowbite-react/dist/esm/components/Sidebar/SidebarLogo.mjs
import { jsxs as jsxs42, jsx as jsx91 } from "react/jsx-runtime";
import { useId as useId11 } from "react";
var SidebarLogo = ({
  children,
  className,
  href,
  img,
  imgAlt = "",
  theme: customTheme = {},
  ...props
}) => {
  const id = useId11();
  const { theme: rootTheme, isCollapsed } = useSidebarContext();
  const theme4 = mergeDeep(rootTheme.logo, customTheme);
  return /* @__PURE__ */ jsxs42(
    "a",
    {
      "aria-labelledby": `flowbite-sidebar-logo-${id}`,
      href,
      className: twMerge(theme4.base, className),
      ...props,
      children: [
        /* @__PURE__ */ jsx91("img", { alt: imgAlt, src: img, className: theme4.img }),
        /* @__PURE__ */ jsx91("span", { className: theme4.collapsed[isCollapsed ? "on" : "off"], id: `flowbite-sidebar-logo-${id}`, children })
      ]
    }
  );
};
SidebarLogo.displayName = "Sidebar.Logo";

// node_modules/flowbite-react/dist/esm/components/Sidebar/Sidebar.mjs
var SidebarComponent = ({
  children,
  as: Component2 = "nav",
  collapseBehavior = "collapse",
  collapsed: isCollapsed = false,
  theme: customTheme = {},
  className,
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().sidebar, customTheme);
  return /* @__PURE__ */ jsx92(SidebarContext.Provider, { value: { theme: theme4, isCollapsed }, children: /* @__PURE__ */ jsx92(
    Component2,
    {
      "aria-label": "Sidebar",
      hidden: isCollapsed && collapseBehavior === "hide",
      className: twMerge(theme4.root.base, theme4.root.collapsed[isCollapsed ? "on" : "off"], className),
      ...props,
      children: /* @__PURE__ */ jsx92("div", { className: theme4.root.inner, children })
    }
  ) });
};
SidebarComponent.displayName = "Sidebar";
var Sidebar = Object.assign(SidebarComponent, {
  Collapse: SidebarCollapse,
  CTA: SidebarCTA,
  Item: SidebarItem,
  Items: SidebarItems,
  ItemGroup: SidebarItemGroup,
  Logo: SidebarLogo
});

// node_modules/flowbite-react/dist/esm/components/Table/Table.mjs
import { jsx as jsx98, jsxs as jsxs43 } from "react/jsx-runtime";
import { forwardRef as forwardRef29 } from "react";

// node_modules/flowbite-react/dist/esm/components/Table/TableBody.mjs
import { jsx as jsx93 } from "react/jsx-runtime";
import { forwardRef as forwardRef24 } from "react";

// node_modules/flowbite-react/dist/esm/components/Table/TableBodyContext.mjs
import { createContext as createContext12, useContext as useContext14 } from "react";
var TableBodyContext = createContext12(void 0);
function useTableBodyContext() {
  const context = useContext14(TableBodyContext);
  if (!context) {
    throw new Error("useTableBodyContext should be used within the TableBodyContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Table/TableContext.mjs
import { createContext as createContext13, useContext as useContext15 } from "react";
var TableContext = createContext13(void 0);
function useTableContext() {
  const context = useContext15(TableContext);
  if (!context) {
    throw new Error("useTableContext should be used within the TableContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Table/TableBody.mjs
var TableBody = forwardRef24(
  ({ children, className, theme: customTheme = {}, ...props }, ref) => {
    const { theme: rootTheme } = useTableContext();
    const theme4 = mergeDeep(rootTheme.body, customTheme);
    return /* @__PURE__ */ jsx93(TableBodyContext.Provider, { value: { theme: theme4 }, children: /* @__PURE__ */ jsx93("tbody", { className: twMerge(theme4.base, className), ref, ...props, children }) });
  }
);
TableBody.displayName = "Table.Body";

// node_modules/flowbite-react/dist/esm/components/Table/TableCell.mjs
import { jsx as jsx94 } from "react/jsx-runtime";
import { forwardRef as forwardRef25 } from "react";
var TableCell = forwardRef25(
  ({ children, className, theme: customTheme = {}, ...props }, ref) => {
    const { theme: bodyTheme } = useTableBodyContext();
    const theme4 = mergeDeep(bodyTheme.cell, customTheme);
    return /* @__PURE__ */ jsx94("td", { className: twMerge(theme4.base, className), ref, ...props, children });
  }
);
TableCell.displayName = "Table.Cell";

// node_modules/flowbite-react/dist/esm/components/Table/TableHead.mjs
import { jsx as jsx95 } from "react/jsx-runtime";
import { forwardRef as forwardRef26 } from "react";

// node_modules/flowbite-react/dist/esm/components/Table/TableHeadContext.mjs
import { createContext as createContext14, useContext as useContext16 } from "react";
var TableHeadContext = createContext14(void 0);
function useTableHeadContext() {
  const context = useContext16(TableHeadContext);
  if (!context) {
    throw new Error("useTableHeadContext should be used within the TableHeadContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Table/TableHead.mjs
var TableHead = forwardRef26(
  ({ children, className, theme: customTheme = {}, ...props }, ref) => {
    const { theme: rootTheme } = useTableContext();
    const theme4 = mergeDeep(rootTheme.head, customTheme);
    return /* @__PURE__ */ jsx95(TableHeadContext.Provider, { value: { theme: theme4 }, children: /* @__PURE__ */ jsx95("thead", { className: twMerge(theme4.base, className), ref, ...props, children: /* @__PURE__ */ jsx95("tr", { children }) }) });
  }
);
TableHead.displayName = "Table.Head";

// node_modules/flowbite-react/dist/esm/components/Table/TableHeadCell.mjs
import { jsx as jsx96 } from "react/jsx-runtime";
import { forwardRef as forwardRef27 } from "react";
var TableHeadCell = forwardRef27(
  ({ children, className, theme: customTheme = {}, ...props }, ref) => {
    const { theme: headTheme } = useTableHeadContext();
    const theme4 = mergeDeep(headTheme.cell, customTheme);
    return /* @__PURE__ */ jsx96("th", { className: twMerge(theme4.base, className), ref, ...props, children });
  }
);
TableHeadCell.displayName = "Table.HeadCell";

// node_modules/flowbite-react/dist/esm/components/Table/TableRow.mjs
import { jsx as jsx97 } from "react/jsx-runtime";
import { forwardRef as forwardRef28 } from "react";
var TableRow = forwardRef28(
  ({ children, className, theme: customTheme = {}, ...props }, ref) => {
    const { theme: rootTheme, hoverable, striped } = useTableContext();
    const theme4 = mergeDeep(rootTheme.row, customTheme);
    return /* @__PURE__ */ jsx97(
      "tr",
      {
        ref,
        "data-testid": "table-row-element",
        className: twMerge(theme4.base, striped && theme4.striped, hoverable && theme4.hovered, className),
        ...props,
        children
      }
    );
  }
);
TableRow.displayName = "Table.Row";

// node_modules/flowbite-react/dist/esm/components/Table/Table.mjs
var TableComponent = forwardRef29(
  ({ children, className, striped, hoverable, theme: customTheme = {}, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().table, customTheme);
    return /* @__PURE__ */ jsx98("div", { "data-testid": "table-element", className: twMerge(theme4.root.wrapper), children: /* @__PURE__ */ jsxs43(TableContext.Provider, { value: { theme: theme4, striped, hoverable }, children: [
      /* @__PURE__ */ jsx98("div", { className: twMerge(theme4.root.shadow, className) }),
      /* @__PURE__ */ jsx98("table", { className: twMerge(theme4.root.base, className), ...props, ref, children })
    ] }) });
  }
);
TableComponent.displayName = "Table";
var Table = Object.assign(TableComponent, {
  Head: TableHead,
  Body: TableBody,
  Row: TableRow,
  Cell: TableCell,
  HeadCell: TableHeadCell
});

// node_modules/flowbite-react/dist/esm/components/Tabs/TabItem.mjs
import { jsx as jsx99 } from "react/jsx-runtime";
var TabItem = ({ children, className }) => /* @__PURE__ */ jsx99("div", { className, children });
TabItem.displayName = "Tabs.Item";

// node_modules/flowbite-react/dist/esm/components/Tabs/Tabs.mjs
import { jsxs as jsxs44, jsx as jsx100 } from "react/jsx-runtime";
import { forwardRef as forwardRef30, useId as useId12, useMemo as useMemo9, Children as Children6, useRef as useRef12, useState as useState21, useEffect as useEffect16, useImperativeHandle as useImperativeHandle2 } from "react";
var TabsComponent = forwardRef30(
  ({ children, className, onActiveTabChange, variant = "default", theme: customTheme = {}, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().tabs, customTheme);
    const id = useId12();
    const tabs = useMemo9(
      () => Children6.map(
        Children6.toArray(children),
        ({ props: props2 }) => props2
      ),
      [children]
    );
    const tabRefs = useRef12([]);
    const [activeTab, setActiveTab] = useState21(
      Math.max(
        0,
        tabs.findIndex((tab) => tab.active)
      )
    );
    const [focusedTab, setFocusedTab] = useState21(-1);
    const setActiveTabWithCallback = (activeTab2) => {
      setActiveTab(activeTab2);
      if (onActiveTabChange) onActiveTabChange(activeTab2);
    };
    const handleClick = ({ target }) => {
      setActiveTabWithCallback(target);
      setFocusedTab(target);
    };
    const handleKeyboard = ({ event, target }) => {
      if (event.key === "ArrowLeft") {
        setFocusedTab(Math.max(0, focusedTab - 1));
      }
      if (event.key === "ArrowRight") {
        setFocusedTab(Math.min(tabs.length - 1, focusedTab + 1));
      }
      if (event.key === "Enter") {
        setActiveTabWithCallback(target);
        setFocusedTab(target);
      }
    };
    const tabItemStyle = theme4.tablist.tabitem.variant[variant];
    const tabItemContainerStyle = theme4.tabitemcontainer.variant[variant];
    useEffect16(() => {
      tabRefs.current[focusedTab]?.focus();
    }, [focusedTab]);
    useImperativeHandle2(ref, () => ({
      setActiveTab: setActiveTabWithCallback
    }));
    return /* @__PURE__ */ jsxs44("div", { className: twMerge(theme4.base, className), children: [
      /* @__PURE__ */ jsx100(
        "div",
        {
          "aria-label": "Tabs",
          role: "tablist",
          className: twMerge(theme4.tablist.base, theme4.tablist.variant[variant], className),
          ...props,
          children: tabs.map((tab, index3) => /* @__PURE__ */ jsxs44(
            "button",
            {
              type: "button",
              "aria-controls": `${id}-tabpanel-${index3}`,
              "aria-selected": index3 === activeTab,
              className: twMerge(
                theme4.tablist.tabitem.base,
                tabItemStyle.base,
                index3 === activeTab && tabItemStyle.active.on,
                index3 !== activeTab && !tab.disabled && tabItemStyle.active.off
              ),
              disabled: tab.disabled,
              id: `${id}-tab-${index3}`,
              onClick: () => handleClick({ target: index3 }),
              onKeyDown: (event) => handleKeyboard({ event, target: index3 }),
              ref: (element) => tabRefs.current[index3] = element,
              role: "tab",
              tabIndex: index3 === focusedTab ? 0 : -1,
              style: { zIndex: index3 === focusedTab ? 2 : 1 },
              children: [
                tab.icon && /* @__PURE__ */ jsx100(tab.icon, { className: theme4.tablist.tabitem.icon }),
                tab.title
              ]
            },
            index3
          ))
        }
      ),
      /* @__PURE__ */ jsx100("div", { className: twMerge(theme4.tabitemcontainer.base, tabItemContainerStyle), children: tabs.map((tab, index3) => /* @__PURE__ */ jsx100(
        "div",
        {
          "aria-labelledby": `${id}-tab-${index3}`,
          className: theme4.tabpanel,
          hidden: index3 !== activeTab,
          id: `${id}-tabpanel-${index3}`,
          role: "tabpanel",
          tabIndex: 0,
          children: tab.children
        },
        index3
      )) })
    ] });
  }
);
TabsComponent.displayName = "Tabs";
var Tabs = Object.assign(TabsComponent, {
  Item: TabItem
});

// node_modules/flowbite-react/dist/esm/components/Textarea/Textarea.mjs
import { jsxs as jsxs45, Fragment as Fragment16, jsx as jsx101 } from "react/jsx-runtime";
import { forwardRef as forwardRef31 } from "react";
var Textarea = forwardRef31(
  ({ className, color = "gray", helperText, shadow, theme: customTheme = {}, ...props }, ref) => {
    const theme4 = mergeDeep(getTheme().textarea, customTheme);
    return /* @__PURE__ */ jsxs45(Fragment16, { children: [
      /* @__PURE__ */ jsx101(
        "textarea",
        {
          ref,
          className: twMerge(theme4.base, theme4.colors[color], theme4.withShadow[shadow ? "on" : "off"], className),
          ...props
        }
      ),
      helperText && /* @__PURE__ */ jsx101(HelperText, { color, children: helperText })
    ] });
  }
);
Textarea.displayName = "Textarea";

// node_modules/flowbite-react/dist/esm/components/ThemeModeScript/ThemeModeScript.mjs
import { jsx as jsx102 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Timeline/Timeline.mjs
import { jsx as jsx109 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineBody.mjs
import { jsx as jsx103 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineContentContext.mjs
import { createContext as createContext15, useContext as useContext17 } from "react";
var TimelineContentContext = createContext15(void 0);
function useTimelineContentContext() {
  const context = useContext17(TimelineContentContext);
  if (!context) {
    throw new Error("useTimelineContentContext should be used within the TimelineContentContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineBody.mjs
var TimelineBody = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: contentTheme } = useTimelineContentContext();
  const theme4 = mergeDeep(contentTheme.body, customTheme);
  return /* @__PURE__ */ jsx103("div", { className: twMerge(theme4.base, className), ...props, children });
};

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineContent.mjs
import { jsx as jsx104 } from "react/jsx-runtime";

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineContext.mjs
import { createContext as createContext16, useContext as useContext18 } from "react";
var TimelineContext = createContext16(void 0);
function useTimelineContext() {
  const context = useContext18(TimelineContext);
  if (!context) {
    throw new Error("useTimelineContext should be used within the TimelineContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineItemContext.mjs
import { createContext as createContext17, useContext as useContext19 } from "react";
var TimelineItemContext = createContext17(void 0);
function useTimelineItemContext() {
  const context = useContext19(TimelineItemContext);
  if (!context) {
    throw new Error("useTimelineItemContext should be used within the TimelineItemContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineContent.mjs
var TimelineContent = ({
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { horizontal } = useTimelineContext();
  const { theme: itemTheme } = useTimelineItemContext();
  const theme4 = mergeDeep(itemTheme.content, customTheme);
  return /* @__PURE__ */ jsx104(TimelineContentContext.Provider, { value: { theme: theme4 }, children: /* @__PURE__ */ jsx104(
    "div",
    {
      "data-testid": "timeline-content",
      className: twMerge(theme4.root.base, horizontal ? theme4.root.horizontal : theme4.root.vertical, className),
      ...props,
      children
    }
  ) });
};

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineItem.mjs
import { jsx as jsx105 } from "react/jsx-runtime";
var TimelineItem = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, horizontal } = useTimelineContext();
  const theme4 = mergeDeep(rootTheme.item, customTheme);
  return /* @__PURE__ */ jsx105(TimelineItemContext.Provider, { value: { theme: theme4 }, children: /* @__PURE__ */ jsx105(
    "li",
    {
      "data-testid": "timeline-item",
      className: twMerge(horizontal && theme4.root.horizontal, !horizontal && theme4.root.vertical, className),
      ...props,
      children
    }
  ) });
};

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelinePoint.mjs
import { jsxs as jsxs46, jsx as jsx106 } from "react/jsx-runtime";
var TimelinePoint = ({
  children,
  className,
  icon: Icon,
  theme: customTheme = {},
  ...props
}) => {
  const { horizontal } = useTimelineContext();
  const { theme: itemTheme } = useTimelineItemContext();
  const theme4 = mergeDeep(itemTheme.point, customTheme);
  return /* @__PURE__ */ jsxs46(
    "div",
    {
      "data-testid": "timeline-point",
      className: twMerge(horizontal && theme4.horizontal, !horizontal && theme4.vertical, className),
      ...props,
      children: [
        children,
        Icon ? /* @__PURE__ */ jsx106("span", { className: twMerge(theme4.marker.icon.wrapper), children: /* @__PURE__ */ jsx106(Icon, { "aria-hidden": true, className: twMerge(theme4.marker.icon.base) }) }) : /* @__PURE__ */ jsx106(
          "div",
          {
            className: twMerge(horizontal && theme4.marker.base.horizontal, !horizontal && theme4.marker.base.vertical)
          }
        ),
        horizontal && /* @__PURE__ */ jsx106("div", { className: twMerge(theme4.line) })
      ]
    }
  );
};

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineTime.mjs
import { jsx as jsx107 } from "react/jsx-runtime";
var TimelineTime = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: contentTheme } = useTimelineContentContext();
  const theme4 = mergeDeep(contentTheme.time, customTheme);
  return /* @__PURE__ */ jsx107("time", { className: twMerge(theme4.base, className), ...props, children });
};

// node_modules/flowbite-react/dist/esm/components/Timeline/TimelineTitle.mjs
import { jsx as jsx108 } from "react/jsx-runtime";
var TimelineTitle = ({
  as: Tag = "h3",
  children,
  className,
  theme: customTheme = {},
  ...props
}) => {
  const { theme: contentTheme } = useTimelineContentContext();
  const theme4 = mergeDeep(contentTheme.title, customTheme);
  return /* @__PURE__ */ jsx108(Tag, { className: twMerge(theme4.base, className), ...props, children });
};

// node_modules/flowbite-react/dist/esm/components/Timeline/Timeline.mjs
var TimelineComponent = ({
  children,
  className,
  horizontal,
  theme: customTheme = {},
  ...props
}) => {
  const theme4 = mergeDeep(getTheme().timeline, customTheme);
  return /* @__PURE__ */ jsx109(TimelineContext.Provider, { value: { theme: theme4, horizontal }, children: /* @__PURE__ */ jsx109(
    "ol",
    {
      "data-testid": "timeline-component",
      className: twMerge(
        horizontal && theme4.root.direction.horizontal,
        !horizontal && theme4.root.direction.vertical,
        className
      ),
      ...props,
      children
    }
  ) });
};
TimelineComponent.displayName = "Timeline";
TimelineItem.displayName = "Timeline.Item";
TimelinePoint.displayName = "Timeline.Point";
TimelineContent.displayName = "Timeline.Content";
TimelineTime.displayName = "Timeline.Time";
TimelineTitle.displayName = "Timeline.Title";
TimelineBody.displayName = "Timeline.Body";
var Timeline = Object.assign(TimelineComponent, {
  Item: TimelineItem,
  Point: TimelinePoint,
  Content: TimelineContent,
  Time: TimelineTime,
  Title: TimelineTitle,
  Body: TimelineBody
});

// node_modules/flowbite-react/dist/esm/components/Toast/Toast.mjs
import { jsx as jsx111 } from "react/jsx-runtime";
import { useState as useState22 } from "react";

// node_modules/flowbite-react/dist/esm/components/Toast/ToastContext.mjs
import { createContext as createContext18, useContext as useContext20 } from "react";
var ToastContext = createContext18(void 0);
function useToastContext() {
  const context = useContext20(ToastContext);
  if (!context) {
    throw new Error("useToastContext should be used within the ToastContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/dist/esm/components/Toast/ToastToggle.mjs
import { jsx as jsx110 } from "react/jsx-runtime";
var ToastToggle = ({
  className,
  onClick,
  theme: customTheme = {},
  xIcon: XIcon = HiX,
  onDismiss,
  ...props
}) => {
  const { theme: rootTheme, duration, isClosed, isRemoved, setIsClosed, setIsRemoved } = useToastContext();
  const theme4 = mergeDeep(rootTheme.toggle, customTheme);
  const handleClick = (e3) => {
    if (onClick) onClick(e3);
    if (onDismiss) {
      onDismiss();
      return;
    }
    setIsClosed(!isClosed);
    setTimeout(() => setIsRemoved(!isRemoved), duration);
  };
  return /* @__PURE__ */ jsx110(
    "button",
    {
      "aria-label": "Close",
      onClick: handleClick,
      type: "button",
      className: twMerge(theme4.base, className),
      ...props,
      children: /* @__PURE__ */ jsx110(XIcon, { "aria-hidden": true, className: theme4.icon })
    }
  );
};

// node_modules/flowbite-react/dist/esm/components/Toast/Toast.mjs
var durationClasses = {
  75: "duration-75",
  100: "duration-100",
  150: "duration-150",
  200: "duration-200",
  300: "duration-300",
  500: "duration-500",
  700: "duration-700",
  1e3: "duration-1000"
};
var ToastComponent = ({ children, className, duration = 300, theme: customTheme = {}, ...props }) => {
  const [isClosed, setIsClosed] = useState22(false);
  const [isRemoved, setIsRemoved] = useState22(false);
  const theme4 = mergeDeep(getTheme().toast, customTheme);
  if (isRemoved) {
    return null;
  }
  return /* @__PURE__ */ jsx111(ToastContext.Provider, { value: { theme: theme4, duration, isClosed, isRemoved, setIsClosed, setIsRemoved }, children: /* @__PURE__ */ jsx111(
    "div",
    {
      "data-testid": "flowbite-toast",
      role: "alert",
      className: twMerge(theme4.root.base, durationClasses[duration], isClosed && theme4.root.closed, className),
      ...props,
      children
    }
  ) });
};
ToastComponent.displayName = "Toast";
ToastToggle.displayName = "Toast.Toggle";
var Toast = Object.assign(ToastComponent, {
  Toggle: ToastToggle
});

// node_modules/flowbite-react/dist/esm/components/ToggleSwitch/ToggleSwitch.mjs
import { jsxs as jsxs47, Fragment as Fragment17, jsx as jsx112 } from "react/jsx-runtime";
import { forwardRef as forwardRef32, useId as useId13 } from "react";
var ToggleSwitch = forwardRef32(
  ({
    checked,
    className,
    color = "blue",
    sizing = "md",
    disabled,
    label,
    name,
    onChange,
    theme: customTheme = {},
    ...props
  }, ref) => {
    const id = useId13();
    const theme4 = mergeDeep(getTheme().toggleSwitch, customTheme);
    const toggle = () => onChange(!checked);
    const handleClick = () => {
      toggle();
    };
    const handleOnKeyDown = (event) => {
      if (event.code == "Enter") {
        event.preventDefault();
      }
    };
    return /* @__PURE__ */ jsxs47(Fragment17, { children: [
      name && checked ? /* @__PURE__ */ jsx112("input", { ref, checked, hidden: true, name, readOnly: true, type: "checkbox", className: "sr-only" }) : null,
      /* @__PURE__ */ jsxs47(
        "button",
        {
          "aria-checked": checked,
          "aria-labelledby": `${id}-flowbite-toggleswitch-label`,
          disabled,
          id: `${id}-flowbite-toggleswitch`,
          onClick: handleClick,
          onKeyDown: handleOnKeyDown,
          role: "switch",
          tabIndex: 0,
          type: "button",
          className: twMerge(theme4.root.base, theme4.root.active[disabled ? "off" : "on"], className),
          ...props,
          children: [
            /* @__PURE__ */ jsx112(
              "div",
              {
                "data-testid": "flowbite-toggleswitch-toggle",
                className: twMerge(
                  theme4.toggle.base,
                  theme4.toggle.checked[checked ? "on" : "off"],
                  checked && theme4.toggle.checked.color[color],
                  theme4.toggle.sizes[sizing]
                )
              }
            ),
            label?.length ? /* @__PURE__ */ jsx112(
              "span",
              {
                "data-testid": "flowbite-toggleswitch-label",
                id: `${id}-flowbite-toggleswitch-label`,
                className: theme4.root.label,
                children: label
              }
            ) : null
          ]
        }
      )
    ] });
  }
);
ToggleSwitch.displayName = "ToggleSwitch";

// node_modules/@howso/react-tailwind-flowbite-components/lib/index.esm.js
var import_lodash = __toESM(require_lodash(), 1);
import { useState as useState23, useCallback as useCallback6, useMemo as useMemo10, useLayoutEffect as useLayoutEffect4, useEffect as useEffect17, Component, useRef as useRef13, forwardRef as forwardRef33, useId as useId14 } from "react";

// node_modules/react-hook-form/dist/index.esm.mjs
import React6 from "react";
var isCheckBoxInput = (element) => element.type === "checkbox";
var isDateObject = (value) => value instanceof Date;
var isNullOrUndefined = (value) => value == null;
var isObjectType = (value) => typeof value === "object";
var isObject2 = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
var getEventValue = (event) => isObject2(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
var isPlainObject = (tempObject) => {
  const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
  return isObject2(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
};
var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
function cloneObject(data) {
  let copy2;
  const isArray = Array.isArray(data);
  if (data instanceof Date) {
    copy2 = new Date(data);
  } else if (data instanceof Set) {
    copy2 = new Set(data);
  } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray || isObject2(data))) {
    copy2 = isArray ? [] : {};
    if (!isArray && !isPlainObject(data)) {
      copy2 = data;
    } else {
      for (const key in data) {
        if (data.hasOwnProperty(key)) {
          copy2[key] = cloneObject(data[key]);
        }
      }
    }
  } else {
    return data;
  }
  return copy2;
}
var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
var isUndefined = (val) => val === void 0;
var get2 = (object, path2, defaultValue) => {
  if (!path2 || !isObject2(object)) {
    return defaultValue;
  }
  const result = compact(path2.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
  return isUndefined(result) || result === object ? isUndefined(object[path2]) ? defaultValue : object[path2] : result;
};
var isBoolean = (value) => typeof value === "boolean";
var isKey = (value) => /^\w*$/.test(value);
var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
var set = (object, path2, value) => {
  let index3 = -1;
  const tempPath = isKey(path2) ? [path2] : stringToPath(path2);
  const length = tempPath.length;
  const lastIndex = length - 1;
  while (++index3 < length) {
    const key = tempPath[index3];
    let newValue = value;
    if (index3 !== lastIndex) {
      const objValue = object[key];
      newValue = isObject2(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index3 + 1]) ? [] : {};
    }
    if (key === "__proto__") {
      return;
    }
    object[key] = newValue;
    object = object[key];
  }
  return object;
};
var EVENTS = {
  BLUR: "blur",
  FOCUS_OUT: "focusout",
  CHANGE: "change"
};
var VALIDATION_MODE = {
  onBlur: "onBlur",
  onChange: "onChange",
  onSubmit: "onSubmit",
  onTouched: "onTouched",
  all: "all"
};
var INPUT_VALIDATION_RULES = {
  max: "max",
  min: "min",
  maxLength: "maxLength",
  minLength: "minLength",
  pattern: "pattern",
  required: "required",
  validate: "validate"
};
var HookFormContext = React6.createContext(null);
var useFormContext = () => React6.useContext(HookFormContext);
var FormProvider = (props) => {
  const { children, ...data } = props;
  return React6.createElement(HookFormContext.Provider, { value: data }, children);
};
var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
  const result = {
    defaultValues: control._defaultValues
  };
  for (const key in formState) {
    Object.defineProperty(result, key, {
      get: () => {
        const _key = key;
        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
        }
        localProxyFormState && (localProxyFormState[_key] = true);
        return formState[_key];
      }
    });
  }
  return result;
};
var isEmptyObject = (value) => isObject2(value) && !Object.keys(value).length;
var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
  updateFormState(formStateData);
  const { name, ...formState } = formStateData;
  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
};
var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
var shouldSubscribeByName = (name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
function useSubscribe(props) {
  const _props = React6.useRef(props);
  _props.current = props;
  React6.useEffect(() => {
    const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
      next: _props.current.next
    });
    return () => {
      subscription && subscription.unsubscribe();
    };
  }, [props.disabled]);
}
function useFormState(props) {
  const methods = useFormContext();
  const { control = methods.control, disabled, name, exact } = props || {};
  const [formState, updateFormState] = React6.useState(control._formState);
  const _mounted = React6.useRef(true);
  const _localProxyFormState = React6.useRef({
    isDirty: false,
    isLoading: false,
    dirtyFields: false,
    touchedFields: false,
    validatingFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  });
  const _name = React6.useRef(name);
  _name.current = name;
  useSubscribe({
    disabled,
    next: (value) => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) && updateFormState({
      ...control._formState,
      ...value
    }),
    subject: control._subjects.state
  });
  React6.useEffect(() => {
    _mounted.current = true;
    _localProxyFormState.current.isValid && control._updateValid(true);
    return () => {
      _mounted.current = false;
    };
  }, [control]);
  return getProxyFormState(formState, control, _localProxyFormState.current, false);
}
var isString = (value) => typeof value === "string";
var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
  if (isString(names)) {
    isGlobal && _names.watch.add(names);
    return get2(formValues, names, defaultValue);
  }
  if (Array.isArray(names)) {
    return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get2(formValues, fieldName)));
  }
  isGlobal && (_names.watchAll = true);
  return formValues;
};
function useWatch(props) {
  const methods = useFormContext();
  const { control = methods.control, name, defaultValue, disabled, exact } = props || {};
  const _name = React6.useRef(name);
  _name.current = name;
  useSubscribe({
    disabled,
    subject: control._subjects.values,
    next: (formState) => {
      if (shouldSubscribeByName(_name.current, formState.name, exact)) {
        updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));
      }
    }
  });
  const [value, updateValue] = React6.useState(control._getWatch(name, defaultValue));
  React6.useEffect(() => control._removeUnmounted());
  return value;
}
function useController(props) {
  const methods = useFormContext();
  const { name, disabled, control = methods.control, shouldUnregister } = props;
  const isArrayField = isNameInFieldArray(control._names.array, name);
  const value = useWatch({
    control,
    name,
    defaultValue: get2(control._formValues, name, get2(control._defaultValues, name, props.defaultValue)),
    exact: true
  });
  const formState = useFormState({
    control,
    name
  });
  const _registerProps = React6.useRef(control.register(name, {
    ...props.rules,
    value,
    ...isBoolean(props.disabled) ? { disabled: props.disabled } : {}
  }));
  React6.useEffect(() => {
    const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
    const updateMounted = (name2, value2) => {
      const field = get2(control._fields, name2);
      if (field) {
        field._f.mount = value2;
      }
    };
    updateMounted(name, true);
    if (_shouldUnregisterField) {
      const value2 = cloneObject(get2(control._options.defaultValues, name));
      set(control._defaultValues, name, value2);
      if (isUndefined(get2(control._formValues, name))) {
        set(control._formValues, name, value2);
      }
    }
    return () => {
      (isArrayField ? _shouldUnregisterField && !control._state.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);
    };
  }, [name, control, isArrayField, shouldUnregister]);
  React6.useEffect(() => {
    if (get2(control._fields, name)) {
      control._updateDisabledField({
        disabled,
        fields: control._fields,
        name,
        value: get2(control._fields, name)._f.value
      });
    }
  }, [disabled, name, control]);
  return {
    field: {
      name,
      value,
      ...isBoolean(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {},
      onChange: React6.useCallback((event) => _registerProps.current.onChange({
        target: {
          value: getEventValue(event),
          name
        },
        type: EVENTS.CHANGE
      }), [name]),
      onBlur: React6.useCallback(() => _registerProps.current.onBlur({
        target: {
          value: get2(control._formValues, name),
          name
        },
        type: EVENTS.BLUR
      }), [name, control]),
      ref: (elm) => {
        const field = get2(control._fields, name);
        if (field && elm) {
          field._f.ref = {
            focus: () => elm.focus(),
            select: () => elm.select(),
            setCustomValidity: (message) => elm.setCustomValidity(message),
            reportValidity: () => elm.reportValidity()
          };
        }
      }
    },
    formState,
    fieldState: Object.defineProperties({}, {
      invalid: {
        enumerable: true,
        get: () => !!get2(formState.errors, name)
      },
      isDirty: {
        enumerable: true,
        get: () => !!get2(formState.dirtyFields, name)
      },
      isTouched: {
        enumerable: true,
        get: () => !!get2(formState.touchedFields, name)
      },
      isValidating: {
        enumerable: true,
        get: () => !!get2(formState.validatingFields, name)
      },
      error: {
        enumerable: true,
        get: () => get2(formState.errors, name)
      }
    })
  };
}
var Controller = (props) => props.render(useController(props));
var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
  ...errors[name],
  types: {
    ...errors[name] && errors[name].types ? errors[name].types : {},
    [type]: message || true
  }
} : {};
var getValidationModes = (mode) => ({
  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
  isOnBlur: mode === VALIDATION_MODE.onBlur,
  isOnChange: mode === VALIDATION_MODE.onChange,
  isOnAll: mode === VALIDATION_MODE.all,
  isOnTouch: mode === VALIDATION_MODE.onTouched
});
var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
var iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
  for (const key of fieldsNames || Object.keys(fields)) {
    const field = get2(fields, key);
    if (field) {
      const { _f, ...currentField } = field;
      if (_f) {
        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
          break;
        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
          break;
        } else {
          iterateFieldsByAction(currentField, action);
        }
      } else if (isObject2(currentField)) {
        iterateFieldsByAction(currentField, action);
      }
    }
  }
};
var updateFieldArrayRootError = (errors, error2, name) => {
  const fieldArrayErrors = compact(get2(errors, name));
  set(fieldArrayErrors, "root", error2[name]);
  set(errors, name, fieldArrayErrors);
  return errors;
};
var isFileInput = (element) => element.type === "file";
var isFunction = (value) => typeof value === "function";
var isHTMLElement2 = (value) => {
  if (!isWeb) {
    return false;
  }
  const owner = value ? value.ownerDocument : 0;
  return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
};
var isMessage = (value) => isString(value);
var isRadioInput = (element) => element.type === "radio";
var isRegex = (value) => value instanceof RegExp;
var defaultResult = {
  value: false,
  isValid: false
};
var validResult = { value: true, isValid: true };
var getCheckboxValue = (options2) => {
  if (Array.isArray(options2)) {
    if (options2.length > 1) {
      const values = options2.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
      return { value: values, isValid: !!values.length };
    }
    return options2[0].checked && !options2[0].disabled ? (
      // @ts-expect-error expected to work in the browser
      options2[0].attributes && !isUndefined(options2[0].attributes.value) ? isUndefined(options2[0].value) || options2[0].value === "" ? validResult : { value: options2[0].value, isValid: true } : validResult
    ) : defaultResult;
  }
  return defaultResult;
};
var defaultReturn = {
  isValid: false,
  value: null
};
var getRadioValue = (options2) => Array.isArray(options2) ? options2.reduce((previous, option) => option && option.checked && !option.disabled ? {
  isValid: true,
  value: option.value
} : previous, defaultReturn) : defaultReturn;
function getValidateError(result, ref, type = "validate") {
  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
    return {
      type,
      message: isMessage(result) ? result : "",
      ref
    };
  }
}
var getValueAndMessage = (validationData) => isObject2(validationData) && !isRegex(validationData) ? validationData : {
  value: validationData,
  message: ""
};
var validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
  const { ref, refs, required, maxLength, minLength, min: min2, max: max2, pattern, validate, name, valueAsNumber, mount, disabled } = field._f;
  const inputValue = get2(formValues, name);
  if (!mount || disabled) {
    return {};
  }
  const inputRef = refs ? refs[0] : ref;
  const setCustomValidity = (message) => {
    if (shouldUseNativeValidation && inputRef.reportValidity) {
      inputRef.setCustomValidity(isBoolean(message) ? "" : message || "");
      inputRef.reportValidity();
    }
  };
  const error2 = {};
  const isRadio3 = isRadioInput(ref);
  const isCheckBox = isCheckBoxInput(ref);
  const isRadioOrCheckbox2 = isRadio3 || isCheckBox;
  const isEmpty2 = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement2(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error2);
  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
    const message = exceedMax ? maxLengthMessage : minLengthMessage;
    error2[name] = {
      type: exceedMax ? maxType : minType,
      message,
      ref,
      ...appendErrorsCurry(exceedMax ? maxType : minType, message)
    };
  };
  if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty2 || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio3 && !getRadioValue(refs).isValid)) {
    const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
    if (value) {
      error2[name] = {
        type: INPUT_VALIDATION_RULES.required,
        message,
        ref: inputRef,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message);
        return error2;
      }
    }
  }
  if (!isEmpty2 && (!isNullOrUndefined(min2) || !isNullOrUndefined(max2))) {
    let exceedMax;
    let exceedMin;
    const maxOutput = getValueAndMessage(max2);
    const minOutput = getValueAndMessage(min2);
    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
      const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
      if (!isNullOrUndefined(maxOutput.value)) {
        exceedMax = valueNumber > maxOutput.value;
      }
      if (!isNullOrUndefined(minOutput.value)) {
        exceedMin = valueNumber < minOutput.value;
      }
    } else {
      const valueDate = ref.valueAsDate || new Date(inputValue);
      const convertTimeToDate = (time) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time);
      const isTime = ref.type == "time";
      const isWeek = ref.type == "week";
      if (isString(maxOutput.value) && inputValue) {
        exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
      }
      if (isString(minOutput.value) && inputValue) {
        exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
      }
    }
    if (exceedMax || exceedMin) {
      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error2[name].message);
        return error2;
      }
    }
  }
  if ((maxLength || minLength) && !isEmpty2 && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {
    const maxLengthOutput = getValueAndMessage(maxLength);
    const minLengthOutput = getValueAndMessage(minLength);
    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
    if (exceedMax || exceedMin) {
      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error2[name].message);
        return error2;
      }
    }
  }
  if (pattern && !isEmpty2 && isString(inputValue)) {
    const { value: patternValue, message } = getValueAndMessage(pattern);
    if (isRegex(patternValue) && !inputValue.match(patternValue)) {
      error2[name] = {
        type: INPUT_VALIDATION_RULES.pattern,
        message,
        ref,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message);
        return error2;
      }
    }
  }
  if (validate) {
    if (isFunction(validate)) {
      const result = await validate(inputValue, formValues);
      const validateError = getValidateError(result, inputRef);
      if (validateError) {
        error2[name] = {
          ...validateError,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(validateError.message);
          return error2;
        }
      }
    } else if (isObject2(validate)) {
      let validationResult = {};
      for (const key in validate) {
        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
          break;
        }
        const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
        if (validateError) {
          validationResult = {
            ...validateError,
            ...appendErrorsCurry(key, validateError.message)
          };
          setCustomValidity(validateError.message);
          if (validateAllFieldCriteria) {
            error2[name] = validationResult;
          }
        }
      }
      if (!isEmptyObject(validationResult)) {
        error2[name] = {
          ref: inputRef,
          ...validationResult
        };
        if (!validateAllFieldCriteria) {
          return error2;
        }
      }
    }
  }
  setCustomValidity(true);
  return error2;
};
function baseGet(object, updatePath) {
  const length = updatePath.slice(0, -1).length;
  let index3 = 0;
  while (index3 < length) {
    object = isUndefined(object) ? index3++ : object[updatePath[index3++]];
  }
  return object;
}
function isEmptyArray(obj) {
  for (const key in obj) {
    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {
      return false;
    }
  }
  return true;
}
function unset(object, path2) {
  const paths = Array.isArray(path2) ? path2 : isKey(path2) ? [path2] : stringToPath(path2);
  const childObject = paths.length === 1 ? object : baseGet(object, paths);
  const index3 = paths.length - 1;
  const key = paths[index3];
  if (childObject) {
    delete childObject[key];
  }
  if (index3 !== 0 && (isObject2(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
    unset(object, paths.slice(0, -1));
  }
  return object;
}
var createSubject = () => {
  let _observers = [];
  const next = (value) => {
    for (const observer of _observers) {
      observer.next && observer.next(value);
    }
  };
  const subscribe = (observer) => {
    _observers.push(observer);
    return {
      unsubscribe: () => {
        _observers = _observers.filter((o) => o !== observer);
      }
    };
  };
  const unsubscribe = () => {
    _observers = [];
  };
  return {
    get observers() {
      return _observers;
    },
    next,
    subscribe,
    unsubscribe
  };
};
var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
function deepEqual2(object1, object2) {
  if (isPrimitive(object1) || isPrimitive(object2)) {
    return object1 === object2;
  }
  if (isDateObject(object1) && isDateObject(object2)) {
    return object1.getTime() === object2.getTime();
  }
  const keys1 = Object.keys(object1);
  const keys2 = Object.keys(object2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (const key of keys1) {
    const val1 = object1[key];
    if (!keys2.includes(key)) {
      return false;
    }
    if (key !== "ref") {
      const val2 = object2[key];
      if (isDateObject(val1) && isDateObject(val2) || isObject2(val1) && isObject2(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual2(val1, val2) : val1 !== val2) {
        return false;
      }
    }
  }
  return true;
}
var isMultipleSelect = (element) => element.type === `select-multiple`;
var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
var live = (ref) => isHTMLElement2(ref) && ref.isConnected;
var objectHasFunction = (data) => {
  for (const key in data) {
    if (isFunction(data[key])) {
      return true;
    }
  }
  return false;
};
function markFieldsDirty(data, fields = {}) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject2(data) || isParentNodeArray) {
    for (const key in data) {
      if (Array.isArray(data[key]) || isObject2(data[key]) && !objectHasFunction(data[key])) {
        fields[key] = Array.isArray(data[key]) ? [] : {};
        markFieldsDirty(data[key], fields[key]);
      } else if (!isNullOrUndefined(data[key])) {
        fields[key] = true;
      }
    }
  }
  return fields;
}
function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject2(data) || isParentNodeArray) {
    for (const key in data) {
      if (Array.isArray(data[key]) || isObject2(data[key]) && !objectHasFunction(data[key])) {
        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
        } else {
          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
        }
      } else {
        dirtyFieldsFromValues[key] = !deepEqual2(data[key], formValues[key]);
      }
    }
  }
  return dirtyFieldsFromValues;
}
var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
function getFieldValue(_f) {
  const ref = _f.ref;
  if (_f.refs ? _f.refs.every((ref2) => ref2.disabled) : ref.disabled) {
    return;
  }
  if (isFileInput(ref)) {
    return ref.files;
  }
  if (isRadioInput(ref)) {
    return getRadioValue(_f.refs).value;
  }
  if (isMultipleSelect(ref)) {
    return [...ref.selectedOptions].map(({ value }) => value);
  }
  if (isCheckBoxInput(ref)) {
    return getCheckboxValue(_f.refs).value;
  }
  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);
}
var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
  const fields = {};
  for (const name of fieldsNames) {
    const field = get2(_fields, name);
    field && set(fields, name, field._f);
  }
  return {
    criteriaMode,
    names: [...fieldsNames],
    fields,
    shouldUseNativeValidation
  };
};
var getRuleValue = (rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject2(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
var hasValidation = (options2) => options2.mount && (options2.required || options2.min || options2.max || options2.maxLength || options2.minLength || options2.pattern || options2.validate);
function schemaErrorLookup(errors, _fields, name) {
  const error2 = get2(errors, name);
  if (error2 || isKey(name)) {
    return {
      error: error2,
      name
    };
  }
  const names = name.split(".");
  while (names.length) {
    const fieldName = names.join(".");
    const field = get2(_fields, fieldName);
    const foundError = get2(errors, fieldName);
    if (field && !Array.isArray(field) && name !== fieldName) {
      return { name };
    }
    if (foundError && foundError.type) {
      return {
        name: fieldName,
        error: foundError
      };
    }
    names.pop();
  }
  return {
    name
  };
}
var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
  if (mode.isOnAll) {
    return false;
  } else if (!isSubmitted && mode.isOnTouch) {
    return !(isTouched || isBlurEvent);
  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
    return !isBlurEvent;
  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
    return isBlurEvent;
  }
  return true;
};
var unsetEmptyArray = (ref, name) => !compact(get2(ref, name)).length && unset(ref, name);
var defaultOptions2 = {
  mode: VALIDATION_MODE.onSubmit,
  reValidateMode: VALIDATION_MODE.onChange,
  shouldFocusError: true
};
function createFormControl(props = {}) {
  let _options = {
    ...defaultOptions2,
    ...props
  };
  let _formState = {
    submitCount: 0,
    isDirty: false,
    isLoading: isFunction(_options.defaultValues),
    isValidating: false,
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    touchedFields: {},
    dirtyFields: {},
    validatingFields: {},
    errors: _options.errors || {},
    disabled: _options.disabled || false
  };
  let _fields = {};
  let _defaultValues = isObject2(_options.defaultValues) || isObject2(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
  let _state = {
    action: false,
    mount: false,
    watch: false
  };
  let _names = {
    mount: /* @__PURE__ */ new Set(),
    unMount: /* @__PURE__ */ new Set(),
    array: /* @__PURE__ */ new Set(),
    watch: /* @__PURE__ */ new Set()
  };
  let delayErrorCallback;
  let timer = 0;
  const _proxyFormState = {
    isDirty: false,
    dirtyFields: false,
    validatingFields: false,
    touchedFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  };
  const _subjects = {
    values: createSubject(),
    array: createSubject(),
    state: createSubject()
  };
  const validationModeBeforeSubmit = getValidationModes(_options.mode);
  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
  const debounce3 = (callback) => (wait) => {
    clearTimeout(timer);
    timer = setTimeout(callback, wait);
  };
  const _updateValid = async (shouldUpdateValid) => {
    if (_proxyFormState.isValid || shouldUpdateValid) {
      const isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
      if (isValid !== _formState.isValid) {
        _subjects.state.next({
          isValid
        });
      }
    }
  };
  const _updateIsValidating = (names, isValidating) => {
    if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {
      (names || Array.from(_names.mount)).forEach((name) => {
        if (name) {
          isValidating ? set(_formState.validatingFields, name, isValidating) : unset(_formState.validatingFields, name);
        }
      });
      _subjects.state.next({
        validatingFields: _formState.validatingFields,
        isValidating: !isEmptyObject(_formState.validatingFields)
      });
    }
  };
  const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
    if (args && method) {
      _state.action = true;
      if (shouldUpdateFieldsAndState && Array.isArray(get2(_fields, name))) {
        const fieldValues = method(get2(_fields, name), args.argA, args.argB);
        shouldSetValues && set(_fields, name, fieldValues);
      }
      if (shouldUpdateFieldsAndState && Array.isArray(get2(_formState.errors, name))) {
        const errors = method(get2(_formState.errors, name), args.argA, args.argB);
        shouldSetValues && set(_formState.errors, name, errors);
        unsetEmptyArray(_formState.errors, name);
      }
      if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get2(_formState.touchedFields, name))) {
        const touchedFields = method(get2(_formState.touchedFields, name), args.argA, args.argB);
        shouldSetValues && set(_formState.touchedFields, name, touchedFields);
      }
      if (_proxyFormState.dirtyFields) {
        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
      }
      _subjects.state.next({
        name,
        isDirty: _getDirty(name, values),
        dirtyFields: _formState.dirtyFields,
        errors: _formState.errors,
        isValid: _formState.isValid
      });
    } else {
      set(_formValues, name, values);
    }
  };
  const updateErrors = (name, error2) => {
    set(_formState.errors, name, error2);
    _subjects.state.next({
      errors: _formState.errors
    });
  };
  const _setErrors = (errors) => {
    _formState.errors = errors;
    _subjects.state.next({
      errors: _formState.errors,
      isValid: false
    });
  };
  const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
    const field = get2(_fields, name);
    if (field) {
      const defaultValue = get2(_formValues, name, isUndefined(value) ? get2(_defaultValues, name) : value);
      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);
      _state.mount && _updateValid();
    }
  };
  const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
    let shouldUpdateField = false;
    let isPreviousDirty = false;
    const output = {
      name
    };
    const disabledField = !!(get2(_fields, name) && get2(_fields, name)._f.disabled);
    if (!isBlurEvent || shouldDirty) {
      if (_proxyFormState.isDirty) {
        isPreviousDirty = _formState.isDirty;
        _formState.isDirty = output.isDirty = _getDirty();
        shouldUpdateField = isPreviousDirty !== output.isDirty;
      }
      const isCurrentFieldPristine = disabledField || deepEqual2(get2(_defaultValues, name), fieldValue);
      isPreviousDirty = !!(!disabledField && get2(_formState.dirtyFields, name));
      isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
      output.dirtyFields = _formState.dirtyFields;
      shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
    }
    if (isBlurEvent) {
      const isPreviousFieldTouched = get2(_formState.touchedFields, name);
      if (!isPreviousFieldTouched) {
        set(_formState.touchedFields, name, isBlurEvent);
        output.touchedFields = _formState.touchedFields;
        shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
      }
    }
    shouldUpdateField && shouldRender && _subjects.state.next(output);
    return shouldUpdateField ? output : {};
  };
  const shouldRenderByError = (name, isValid, error2, fieldState) => {
    const previousFieldError = get2(_formState.errors, name);
    const shouldUpdateValid = _proxyFormState.isValid && isBoolean(isValid) && _formState.isValid !== isValid;
    if (props.delayError && error2) {
      delayErrorCallback = debounce3(() => updateErrors(name, error2));
      delayErrorCallback(props.delayError);
    } else {
      clearTimeout(timer);
      delayErrorCallback = null;
      error2 ? set(_formState.errors, name, error2) : unset(_formState.errors, name);
    }
    if ((error2 ? !deepEqual2(previousFieldError, error2) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
      const updatedFormState = {
        ...fieldState,
        ...shouldUpdateValid && isBoolean(isValid) ? { isValid } : {},
        errors: _formState.errors,
        name
      };
      _formState = {
        ..._formState,
        ...updatedFormState
      };
      _subjects.state.next(updatedFormState);
    }
  };
  const _executeSchema = async (name) => {
    _updateIsValidating(name, true);
    const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
    _updateIsValidating(name);
    return result;
  };
  const executeSchemaAndUpdateState = async (names) => {
    const { errors } = await _executeSchema(names);
    if (names) {
      for (const name of names) {
        const error2 = get2(errors, name);
        error2 ? set(_formState.errors, name, error2) : unset(_formState.errors, name);
      }
    } else {
      _formState.errors = errors;
    }
    return errors;
  };
  const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
    valid: true
  }) => {
    for (const name in fields) {
      const field = fields[name];
      if (field) {
        const { _f, ...fieldValue } = field;
        if (_f) {
          const isFieldArrayRoot = _names.array.has(_f.name);
          _updateIsValidating([name], true);
          const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
          _updateIsValidating([name]);
          if (fieldError[_f.name]) {
            context.valid = false;
            if (shouldOnlyCheckValid) {
              break;
            }
          }
          !shouldOnlyCheckValid && (get2(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
        }
        fieldValue && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
      }
    }
    return context.valid;
  };
  const _removeUnmounted = () => {
    for (const name of _names.unMount) {
      const field = get2(_fields, name);
      field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
    }
    _names.unMount = /* @__PURE__ */ new Set();
  };
  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual2(getValues2(), _defaultValues));
  const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
    ..._state.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? { [names]: defaultValue } : defaultValue
  }, isGlobal, defaultValue);
  const _getFieldArray = (name) => compact(get2(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get2(_defaultValues, name, []) : []));
  const setFieldValue = (name, value, options2 = {}) => {
    const field = get2(_fields, name);
    let fieldValue = value;
    if (field) {
      const fieldReference = field._f;
      if (fieldReference) {
        !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
        fieldValue = isHTMLElement2(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
        if (isMultipleSelect(fieldReference.ref)) {
          [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
        } else if (fieldReference.refs) {
          if (isCheckBoxInput(fieldReference.ref)) {
            fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
          } else {
            fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
          }
        } else if (isFileInput(fieldReference.ref)) {
          fieldReference.ref.value = "";
        } else {
          fieldReference.ref.value = fieldValue;
          if (!fieldReference.ref.type) {
            _subjects.values.next({
              name,
              values: { ..._formValues }
            });
          }
        }
      }
    }
    (options2.shouldDirty || options2.shouldTouch) && updateTouchAndDirty(name, fieldValue, options2.shouldTouch, options2.shouldDirty, true);
    options2.shouldValidate && trigger(name);
  };
  const setValues = (name, value, options2) => {
    for (const fieldKey in value) {
      const fieldValue = value[fieldKey];
      const fieldName = `${name}.${fieldKey}`;
      const field = get2(_fields, fieldName);
      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options2) : setFieldValue(fieldName, fieldValue, options2);
    }
  };
  const setValue = (name, value, options2 = {}) => {
    const field = get2(_fields, name);
    const isFieldArray = _names.array.has(name);
    const cloneValue = cloneObject(value);
    set(_formValues, name, cloneValue);
    if (isFieldArray) {
      _subjects.array.next({
        name,
        values: { ..._formValues }
      });
      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options2.shouldDirty) {
        _subjects.state.next({
          name,
          dirtyFields: getDirtyFields(_defaultValues, _formValues),
          isDirty: _getDirty(name, cloneValue)
        });
      }
    } else {
      field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options2) : setFieldValue(name, cloneValue, options2);
    }
    isWatched(name, _names) && _subjects.state.next({ ..._formState });
    _subjects.values.next({
      name: _state.mount ? name : void 0,
      values: { ..._formValues }
    });
  };
  const onChange = async (event) => {
    _state.mount = true;
    const target = event.target;
    let name = target.name;
    let isFieldValueUpdated = true;
    const field = get2(_fields, name);
    const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
    const _updateIsFieldValueUpdated = (fieldValue) => {
      isFieldValueUpdated = Number.isNaN(fieldValue) || fieldValue === get2(_formValues, name, fieldValue);
    };
    if (field) {
      let error2;
      let isValid;
      const fieldValue = getCurrentFieldValue();
      const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get2(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get2(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
      const watched = isWatched(name, _names, isBlurEvent);
      set(_formValues, name, fieldValue);
      if (isBlurEvent) {
        field._f.onBlur && field._f.onBlur(event);
        delayErrorCallback && delayErrorCallback(0);
      } else if (field._f.onChange) {
        field._f.onChange(event);
      }
      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
      const shouldRender = !isEmptyObject(fieldState) || watched;
      !isBlurEvent && _subjects.values.next({
        name,
        type: event.type,
        values: { ..._formValues }
      });
      if (shouldSkipValidation) {
        _proxyFormState.isValid && _updateValid();
        return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
      }
      !isBlurEvent && watched && _subjects.state.next({ ..._formState });
      if (_options.resolver) {
        const { errors } = await _executeSchema([name]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
          const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
          error2 = errorLookupResult.error;
          name = errorLookupResult.name;
          isValid = isEmptyObject(errors);
        }
      } else {
        _updateIsValidating([name], true);
        error2 = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
        _updateIsValidating([name]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          if (error2) {
            isValid = false;
          } else if (_proxyFormState.isValid) {
            isValid = await executeBuiltInValidation(_fields, true);
          }
        }
      }
      if (isFieldValueUpdated) {
        field._f.deps && trigger(field._f.deps);
        shouldRenderByError(name, isValid, error2, fieldState);
      }
    }
  };
  const _focusInput = (ref, key) => {
    if (get2(_formState.errors, key) && ref.focus) {
      ref.focus();
      return 1;
    }
    return;
  };
  const trigger = async (name, options2 = {}) => {
    let isValid;
    let validationResult;
    const fieldNames = convertToArrayPayload(name);
    if (_options.resolver) {
      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
      isValid = isEmptyObject(errors);
      validationResult = name ? !fieldNames.some((name2) => get2(errors, name2)) : isValid;
    } else if (name) {
      validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
        const field = get2(_fields, fieldName);
        return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
      }))).every(Boolean);
      !(!validationResult && !_formState.isValid) && _updateValid();
    } else {
      validationResult = isValid = await executeBuiltInValidation(_fields);
    }
    _subjects.state.next({
      ...!isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : { name },
      ..._options.resolver || !name ? { isValid } : {},
      errors: _formState.errors
    });
    options2.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
    return validationResult;
  };
  const getValues2 = (fieldNames) => {
    const values = {
      ..._state.mount ? _formValues : _defaultValues
    };
    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get2(values, fieldNames) : fieldNames.map((name) => get2(values, name));
  };
  const getFieldState = (name, formState) => ({
    invalid: !!get2((formState || _formState).errors, name),
    isDirty: !!get2((formState || _formState).dirtyFields, name),
    isTouched: !!get2((formState || _formState).touchedFields, name),
    isValidating: !!get2((formState || _formState).validatingFields, name),
    error: get2((formState || _formState).errors, name)
  });
  const clearErrors = (name) => {
    name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
    _subjects.state.next({
      errors: name ? _formState.errors : {}
    });
  };
  const setError = (name, error2, options2) => {
    const ref = (get2(_fields, name, { _f: {} })._f || {}).ref;
    const currentError = get2(_formState.errors, name) || {};
    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;
    set(_formState.errors, name, {
      ...restOfErrorTree,
      ...error2,
      ref
    });
    _subjects.state.next({
      name,
      errors: _formState.errors,
      isValid: false
    });
    options2 && options2.shouldFocus && ref && ref.focus && ref.focus();
  };
  const watch = (name, defaultValue) => isFunction(name) ? _subjects.values.subscribe({
    next: (payload) => name(_getWatch(void 0, defaultValue), payload)
  }) : _getWatch(name, defaultValue, true);
  const unregister = (name, options2 = {}) => {
    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
      _names.mount.delete(fieldName);
      _names.array.delete(fieldName);
      if (!options2.keepValue) {
        unset(_fields, fieldName);
        unset(_formValues, fieldName);
      }
      !options2.keepError && unset(_formState.errors, fieldName);
      !options2.keepDirty && unset(_formState.dirtyFields, fieldName);
      !options2.keepTouched && unset(_formState.touchedFields, fieldName);
      !options2.keepIsValidating && unset(_formState.validatingFields, fieldName);
      !_options.shouldUnregister && !options2.keepDefaultValue && unset(_defaultValues, fieldName);
    }
    _subjects.values.next({
      values: { ..._formValues }
    });
    _subjects.state.next({
      ..._formState,
      ...!options2.keepDirty ? {} : { isDirty: _getDirty() }
    });
    !options2.keepIsValid && _updateValid();
  };
  const _updateDisabledField = ({ disabled, name, field, fields, value }) => {
    if (isBoolean(disabled) && _state.mount || !!disabled) {
      const inputValue = disabled ? void 0 : isUndefined(value) ? getFieldValue(field ? field._f : get2(fields, name)._f) : value;
      set(_formValues, name, inputValue);
      updateTouchAndDirty(name, inputValue, false, false, true);
    }
  };
  const register = (name, options2 = {}) => {
    let field = get2(_fields, name);
    const disabledIsDefined = isBoolean(options2.disabled);
    set(_fields, name, {
      ...field || {},
      _f: {
        ...field && field._f ? field._f : { ref: { name } },
        name,
        mount: true,
        ...options2
      }
    });
    _names.mount.add(name);
    if (field) {
      _updateDisabledField({
        field,
        disabled: options2.disabled,
        name,
        value: options2.value
      });
    } else {
      updateValidAndValue(name, true, options2.value);
    }
    return {
      ...disabledIsDefined ? { disabled: options2.disabled } : {},
      ..._options.progressive ? {
        required: !!options2.required,
        min: getRuleValue(options2.min),
        max: getRuleValue(options2.max),
        minLength: getRuleValue(options2.minLength),
        maxLength: getRuleValue(options2.maxLength),
        pattern: getRuleValue(options2.pattern)
      } : {},
      name,
      onChange,
      onBlur: onChange,
      ref: (ref) => {
        if (ref) {
          register(name, options2);
          field = get2(_fields, name);
          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
          const refs = field._f.refs || [];
          if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
            return;
          }
          set(_fields, name, {
            _f: {
              ...field._f,
              ...radioOrCheckbox ? {
                refs: [
                  ...refs.filter(live),
                  fieldRef,
                  ...Array.isArray(get2(_defaultValues, name)) ? [{}] : []
                ],
                ref: { type: fieldRef.type, name }
              } : { ref: fieldRef }
            }
          });
          updateValidAndValue(name, false, void 0, fieldRef);
        } else {
          field = get2(_fields, name, {});
          if (field._f) {
            field._f.mount = false;
          }
          (_options.shouldUnregister || options2.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
        }
      }
    };
  };
  const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
  const _disableForm = (disabled) => {
    if (isBoolean(disabled)) {
      _subjects.state.next({ disabled });
      iterateFieldsByAction(_fields, (ref, name) => {
        const currentField = get2(_fields, name);
        if (currentField) {
          ref.disabled = currentField._f.disabled || disabled;
          if (Array.isArray(currentField._f.refs)) {
            currentField._f.refs.forEach((inputRef) => {
              inputRef.disabled = currentField._f.disabled || disabled;
            });
          }
        }
      }, 0, false);
    }
  };
  const handleSubmit = (onValid, onInvalid) => async (e3) => {
    let onValidError = void 0;
    if (e3) {
      e3.preventDefault && e3.preventDefault();
      e3.persist && e3.persist();
    }
    let fieldValues = cloneObject(_formValues);
    _subjects.state.next({
      isSubmitting: true
    });
    if (_options.resolver) {
      const { errors, values } = await _executeSchema();
      _formState.errors = errors;
      fieldValues = values;
    } else {
      await executeBuiltInValidation(_fields);
    }
    unset(_formState.errors, "root");
    if (isEmptyObject(_formState.errors)) {
      _subjects.state.next({
        errors: {}
      });
      try {
        await onValid(fieldValues, e3);
      } catch (error2) {
        onValidError = error2;
      }
    } else {
      if (onInvalid) {
        await onInvalid({ ..._formState.errors }, e3);
      }
      _focusError();
      setTimeout(_focusError);
    }
    _subjects.state.next({
      isSubmitted: true,
      isSubmitting: false,
      isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
      submitCount: _formState.submitCount + 1,
      errors: _formState.errors
    });
    if (onValidError) {
      throw onValidError;
    }
  };
  const resetField = (name, options2 = {}) => {
    if (get2(_fields, name)) {
      if (isUndefined(options2.defaultValue)) {
        setValue(name, cloneObject(get2(_defaultValues, name)));
      } else {
        setValue(name, options2.defaultValue);
        set(_defaultValues, name, cloneObject(options2.defaultValue));
      }
      if (!options2.keepTouched) {
        unset(_formState.touchedFields, name);
      }
      if (!options2.keepDirty) {
        unset(_formState.dirtyFields, name);
        _formState.isDirty = options2.defaultValue ? _getDirty(name, cloneObject(get2(_defaultValues, name))) : _getDirty();
      }
      if (!options2.keepError) {
        unset(_formState.errors, name);
        _proxyFormState.isValid && _updateValid();
      }
      _subjects.state.next({ ..._formState });
    }
  };
  const _reset = (formValues, keepStateOptions = {}) => {
    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
    const cloneUpdatedValues = cloneObject(updatedValues);
    const isEmptyResetValues = isEmptyObject(formValues);
    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
    if (!keepStateOptions.keepDefaultValues) {
      _defaultValues = updatedValues;
    }
    if (!keepStateOptions.keepValues) {
      if (keepStateOptions.keepDirtyValues) {
        for (const fieldName of _names.mount) {
          get2(_formState.dirtyFields, fieldName) ? set(values, fieldName, get2(_formValues, fieldName)) : setValue(fieldName, get2(values, fieldName));
        }
      } else {
        if (isWeb && isUndefined(formValues)) {
          for (const name of _names.mount) {
            const field = get2(_fields, name);
            if (field && field._f) {
              const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
              if (isHTMLElement2(fieldReference)) {
                const form = fieldReference.closest("form");
                if (form) {
                  form.reset();
                  break;
                }
              }
            }
          }
        }
        _fields = {};
      }
      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values);
      _subjects.array.next({
        values: { ...values }
      });
      _subjects.values.next({
        values: { ...values }
      });
    }
    _names = {
      mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set(),
      watchAll: false,
      focus: ""
    };
    _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
    _state.watch = !!props.shouldUnregister;
    _subjects.state.next({
      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
      isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual2(formValues, _defaultValues)),
      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
      dirtyFields: isEmptyResetValues ? [] : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : {},
      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
      errors: keepStateOptions.keepErrors ? _formState.errors : {},
      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
      isSubmitting: false
    });
  };
  const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
  const setFocus = (name, options2 = {}) => {
    const field = get2(_fields, name);
    const fieldReference = field && field._f;
    if (fieldReference) {
      const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
      if (fieldRef.focus) {
        fieldRef.focus();
        options2.shouldSelect && fieldRef.select();
      }
    }
  };
  const _updateFormState = (updatedFormState) => {
    _formState = {
      ..._formState,
      ...updatedFormState
    };
  };
  const _resetDefaultValues = () => isFunction(_options.defaultValues) && _options.defaultValues().then((values) => {
    reset(values, _options.resetOptions);
    _subjects.state.next({
      isLoading: false
    });
  });
  return {
    control: {
      register,
      unregister,
      getFieldState,
      handleSubmit,
      setError,
      _executeSchema,
      _getWatch,
      _getDirty,
      _updateValid,
      _removeUnmounted,
      _updateFieldArray,
      _updateDisabledField,
      _getFieldArray,
      _reset,
      _resetDefaultValues,
      _updateFormState,
      _disableForm,
      _subjects,
      _proxyFormState,
      _setErrors,
      get _fields() {
        return _fields;
      },
      get _formValues() {
        return _formValues;
      },
      get _state() {
        return _state;
      },
      set _state(value) {
        _state = value;
      },
      get _defaultValues() {
        return _defaultValues;
      },
      get _names() {
        return _names;
      },
      set _names(value) {
        _names = value;
      },
      get _formState() {
        return _formState;
      },
      set _formState(value) {
        _formState = value;
      },
      get _options() {
        return _options;
      },
      set _options(value) {
        _options = {
          ..._options,
          ...value
        };
      }
    },
    trigger,
    register,
    handleSubmit,
    watch,
    setValue,
    getValues: getValues2,
    reset,
    resetField,
    clearErrors,
    unregister,
    setError,
    setFocus,
    getFieldState
  };
}
function useForm(props = {}) {
  const _formControl = React6.useRef();
  const _values = React6.useRef();
  const [formState, updateFormState] = React6.useState({
    isDirty: false,
    isValidating: false,
    isLoading: isFunction(props.defaultValues),
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    submitCount: 0,
    dirtyFields: {},
    touchedFields: {},
    validatingFields: {},
    errors: props.errors || {},
    disabled: props.disabled || false,
    defaultValues: isFunction(props.defaultValues) ? void 0 : props.defaultValues
  });
  if (!_formControl.current) {
    _formControl.current = {
      ...createFormControl(props),
      formState
    };
  }
  const control = _formControl.current.control;
  control._options = props;
  useSubscribe({
    subject: control._subjects.state,
    next: (value) => {
      if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
        updateFormState({ ...control._formState });
      }
    }
  });
  React6.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
  React6.useEffect(() => {
    if (control._proxyFormState.isDirty) {
      const isDirty = control._getDirty();
      if (isDirty !== formState.isDirty) {
        control._subjects.state.next({
          isDirty
        });
      }
    }
  }, [control, formState.isDirty]);
  React6.useEffect(() => {
    if (props.values && !deepEqual2(props.values, _values.current)) {
      control._reset(props.values, control._options.resetOptions);
      _values.current = props.values;
      updateFormState((state) => ({ ...state }));
    } else {
      control._resetDefaultValues();
    }
  }, [props.values, control]);
  React6.useEffect(() => {
    if (props.errors) {
      control._setErrors(props.errors);
    }
  }, [props.errors, control]);
  React6.useEffect(() => {
    if (!control._state.mount) {
      control._updateValid();
      control._state.mount = true;
    }
    if (control._state.watch) {
      control._state.watch = false;
      control._subjects.state.next({ ...control._formState });
    }
    control._removeUnmounted();
  });
  React6.useEffect(() => {
    props.shouldUnregister && control._subjects.values.next({
      values: control._getWatch()
    });
  }, [props.shouldUnregister, control]);
  _formControl.current.formState = getProxyFormState(formState, control);
  return _formControl.current;
}

// node_modules/@hookform/error-message/dist/index.esm.js
import * as e2 from "react";
var s2 = function(s3) {
  var t3 = s3.as, a2 = s3.errors, m = s3.name, o = s3.message, i2 = s3.render, l = function(e3, r2) {
    if (null == e3) return {};
    var n2, s4, t4 = {}, a3 = Object.keys(e3);
    for (s4 = 0; s4 < a3.length; s4++) r2.indexOf(n2 = a3[s4]) >= 0 || (t4[n2] = e3[n2]);
    return t4;
  }(s3, ["as", "errors", "name", "message", "render"]), f = useFormContext(), c2 = get2(a2 || f.formState.errors, m);
  if (!c2) return null;
  var g = c2.message, u = c2.types, d = Object.assign({}, l, { children: g || o });
  return e2.isValidElement(t3) ? e2.cloneElement(t3, d) : i2 ? i2({ message: g || o, messages: u }) : e2.createElement(t3 || e2.Fragment, d);
};

// node_modules/@howso/react-tailwind-flowbite-components/lib/index.esm.js
var PrimaryButton = (props) => {
  return jsx113(Button, { color: "primary", ...props });
};
var defaultTranslationNamespace = "react-tailwind-flowbite-components";
var useDefaultTranslation = (options2) => useTranslation(defaultTranslationNamespace, options2);
var ExpandCollapseIcon = ({ isExpanded, ...props }) => {
  return jsx113(HiChevronDown, { ...props, className: twMerge("transition-transform duration-200 ease-in-out", isExpanded && "rotate-180", props.className) });
};
var NewWindowIcon = (props) => {
  return jsx113(HiExternalLink, { ...props });
};
var UpdateIcon = (props) => {
  return jsx113(HiRefresh, { ...props });
};
var WarningIcon = (props) => {
  return jsx113(HiExclamation, { ...props, className: twMerge(props.className, "relative top-[1px]") });
};
var TableHeadCell2 = ({ as = "th", ...props }) => {
  const tableTheme2 = getTheme().table;
  const Element2 = as;
  return jsx113(Element2, { ...props, className: twMerge(tableTheme2.head.cell.base, props.className) });
};
var ErrorAlert = ({ message, error: error2, icon = WarningIcon, color = "failure", ...props }) => {
  const { t: t3 } = useDefaultTranslation();
  return jsx113(Alert, { icon, color, ...props, children: jsx113("span", { children: message || error2?.message || t3("Feedback.ErrorAlert.Generic") }) });
};
var ErrorBoundary = class extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error2) {
    return { hasError: true, error: error2 };
  }
  componentDidCatch(error2) {
    console.error(error2);
  }
  render() {
    if (this.state.hasError) {
      return jsx113(ErrorAlert, { message: this.state.error?.message });
    }
    return this.props.children;
  }
};
var Link = (props) => {
  const { children, ...mergedProps } = getLinkProps(props);
  return jsx113("a", { ...mergedProps, children });
};
var getLinkProps = ({ external, ...props }) => ({
  ...props,
  className: twMerge(linkClasses, props.className),
  children: jsxs48(Fragment19, { children: [props.children, external && jsx113(NewWindowIcon, { className: "inline-block ml-[.25ch] print:hidden" })] })
});
var linkClasses = "text-primary-600 underline dark:text-primary-400";
var ReadabilityConstraint = function(props) {
  return jsx113("div", { ...props, className: twMerge("max-w-[65em]", props.className) });
};
var TextScrambleAnimation = class {
  el;
  chars;
  frame;
  queue;
  frameRequest;
  lastDraw;
  fpsInterval;
  constructor(el, chars2 = "!<>_/[](){}:\u2014=+*^?#%$", fps = 50) {
    this.el = el;
    this.chars = chars2;
    this.fpsInterval = 1e3 / fps;
    this.frame = 0;
    this.queue = [];
    this.lastDraw = 0;
    this.update = this.update.bind(this);
  }
  cancel() {
    if (this.frameRequest != void 0) {
      cancelAnimationFrame(this.frameRequest);
    }
    this.frameRequest = void 0;
    this.lastDraw = 0;
    this.frame = 0;
  }
  setText(newText) {
    if (newText == null)
      return Promise.resolve();
    const oldText = this.el.innerText;
    const length = Math.max(oldText.length, newText.length);
    return new Promise((resolve) => {
      this.queue = [];
      for (let i2 = 0; i2 < length; i2++) {
        const from = oldText[i2] || "";
        const to = newText[i2] || "";
        const start = Math.floor(Math.random() * 40);
        const end = start + Math.floor(Math.random() * 40);
        this.queue.push({ from, to, start, end });
      }
      this.cancel();
      this.update(resolve);
    });
  }
  update(resolve) {
    const now = Date.now();
    const elapsed = now - this.lastDraw;
    if (this.lastDraw != 0 && elapsed <= this.fpsInterval) {
      this.frameRequest = requestAnimationFrame(() => this.update(resolve));
      return;
    }
    let output = "";
    let complete = 0;
    for (let i2 = 0, n2 = this.queue.length; i2 < n2; i2++) {
      const { from, to, start, end, char } = this.queue[i2];
      let character = char;
      if (this.frame >= end) {
        complete++;
        output += to;
      } else if (this.frame >= start) {
        if (!character || Math.random() < 0.28) {
          character = this.randomChar();
          this.queue[i2].char = character;
        }
        output += character;
      } else {
        output += from;
      }
    }
    this.el.innerText = output;
    if (complete === this.queue.length) {
      this.queue = [];
      this.frameRequest = void 0;
      this.lastDraw = 0;
      this.frame = 0;
      resolve();
    } else {
      this.lastDraw = now - elapsed % this.fpsInterval;
      this.frameRequest = requestAnimationFrame(() => this.update(resolve));
      this.frame++;
    }
  }
  randomChar() {
    return this.chars[Math.floor(Math.random() * this.chars.length)];
  }
};
var TextScrambleComponent = ({ texts, characters, className, loop = false, delay = 2e3 }) => {
  const fxRef = useRef13();
  const timeoutRef = useRef13();
  const [index3, setIndex] = useState23(0);
  useEffect17(() => {
    setIndex(0);
    return () => window.clearTimeout(timeoutRef.current);
  }, [texts]);
  const ref = useCallback6(
    async (node) => {
      if (node !== null && texts.length) {
        if (fxRef.current == null) {
          fxRef.current = new TextScrambleAnimation(node, characters);
        }
        await fxRef.current.setText(texts[index3]);
        let nextIndex = index3 + 1;
        if (loop && nextIndex >= texts.length)
          nextIndex = 0;
        if (nextIndex < texts.length) {
          timeoutRef.current = window.setTimeout(() => setIndex(nextIndex), delay);
        }
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [index3]
  );
  return jsx113("span", { role: "status", className, ref });
};
var TextScrambleCalculating = () => jsx113(TextScrambleComponent, { loop: true, delay: 0, texts: [
  "calculating",
  "\u8BA1\u7B97",
  "\u0917\u093F\u0928\u093E \u091C\u093E \u0930\u0939\u093E \u0939\u0948",
  "Calculador",
  "Calculateur",
  "\u062D\u0633\u0627\u0628",
  "\u0420\u0430\u0441\u0447\u0435\u0442"
] });
var TextScramblePercentages = () => jsx113(TextScrambleComponent, { loop: true, delay: 0, texts: ["0%", "25%", "50%", "75%", "100%"] });
var TextScramble = Object.assign(TextScrambleComponent, {
  Calculating: TextScrambleCalculating,
  Percentages: TextScramblePercentages
});
var formSpacingYDefault = "space-y-6";
var FieldContainer = (props) => jsx113("div", { ...props, className: props.className });
var FieldErrorMessage = ({ name }) => {
  const { t: t3 } = useDefaultTranslation();
  const { errors } = useFormState();
  const error2 = errors[name];
  if (!error2) {
    return null;
  }
  let message = error2.message;
  if (!message) {
    const translationKey = `Feedback.FieldErrorMessage.type.${error2?.type}`;
    const translation = t3(translationKey);
    if (translation !== translationKey) {
      message = translation;
    }
  }
  return jsx113(HelperText, { color: "failure", children: jsx113(Fragment19, { children: message || jsx113(s2, { name }) }) });
};
var FieldLabel = ({ required, children, sizing, suffix, tooltipProps, ...props }) => {
  return jsx113(Label, { ...props, className: twMerge("flex items-center", sizing && fieldLabelSizing[sizing], props.className), children: tooltipProps ? jsx113(Tooltip, { ...tooltipProps, children: jsx113(Contents, { children, required, suffix, tooltipProps }) }) : jsx113(Contents, { children, required, suffix }) });
};
var Contents = ({ children, required, suffix, tooltipProps }) => {
  const { t: t3 } = useDefaultTranslation();
  return jsxs48(Fragment19, { children: [jsxs48("div", { className: "flex flex-row", children: [jsx113("div", { className: twMerge(!!tooltipProps && "underline decoration-dotted"), children }), required && jsx113("div", { "aria-hidden": "true", title: t3("Forms.FieldLabel.required"), className: "text-red-600 dark:text-red-400", children: "*" })] }), suffix] });
};
var fieldLabelSizing = {
  sm: "text-xs",
  md: "text-sm",
  lg: "text-md"
};
var FieldCheckbox = forwardRef33(({ color, containerProps, helperText, label, labelProps, name = "", sizing, ...props }, ref) => {
  const { errors } = useFormState();
  const internalId = useId14();
  const id = props.id || internalId;
  const error2 = errors[name];
  const hasError = !!error2;
  color = color ? color : hasError ? "failure" : "blue";
  const additions = {
    "aria-invalid": hasError,
    id,
    name
  };
  return jsx113(FieldContainer, { ...containerProps, children: jsxs48("div", { className: "flex gap-2", children: [jsx113("div", { children: jsx113(Checkbox, { ...props, ...additions, color, ref }) }), jsxs48("div", { className: "space-y-1", children: [jsx113(Label, { ...labelProps, className: twMerge(labelProps?.className, sizing && fieldLabelSizing[sizing]), htmlFor: id, children: label }), jsx113(FieldErrorMessage, { name }), helperText && jsx113(HelperText, { color: "gray", children: helperText })] })] }) });
});
var Styles = { "labelInline": "FieldBase-module_labelInline__SLGo5" };
var FieldBase = ({ containerProps, extras, field, id, label, labelInline, labelProps, required, sizing = "md" }) => {
  return jsxs48(FieldContainer, { ...containerProps, className: twMerge(containerProps?.className, labelInline && twMerge(Styles.labelInline, "gap-x-2"), !labelInline && "space-y-2", `sizing-${sizing}`), children: [label && jsx113(FieldLabel, { sizing, ...labelProps, className: twMerge(labelProps?.className, "labelContainer"), htmlFor: id, required, children: label }), jsx113("div", { className: "fieldContainer", children: field }), extras && jsx113("div", { className: "extrasContainer", children: extras })] });
};
var Radio2 = forwardRef33(({ color = "blue", ...props }, ref) => {
  const theme4 = getTheme();
  return jsx113(Radio, { ...props, className: twMerge(color && theme4.checkbox.root.color[color]), ref });
});
var FieldRadios = forwardRef33(({ containerProps, helperText, label, labelInline, labelProps, name, options: options2, registerOptions, required, sizing = "md", ...props }, ref) => {
  const theme4 = getTheme();
  const { register } = useFormContext();
  const { errors } = useFormState();
  const error2 = errors[name];
  const hasError = !!error2;
  const additions = {
    "aria-invalid": hasError,
    color: props.color || hasError ? "failure" : void 0
  };
  const hasExtras = hasError || !!helperText;
  return jsx113(FieldBase, { containerProps, label, labelInline, labelProps: {
    ...labelProps,
    className: twMerge(labelProps?.className, labelInline && "!mt-0")
  }, sizing, required, field: jsx113("div", { className: twMerge(theme4.textInput.base), children: jsx113("div", { className: twMerge(theme4.textInput.field.base), children: jsx113("div", { className: twMerge(sizing && theme4.textInput.field.input.sizes[sizing], "flex flex-row flex-wrap gap-6 pl-0.5", labelInline && "pt-0"), ref, children: options2.map(({ value, text }) => jsxs48(Label, { className: twMerge("flex flex-row flex-nowrap gap-1.5 items-center", sizing && fieldLabelSizing[sizing]), children: [jsx113(Radio2, { ...additions, ...register(name, registerOptions), value }), jsx113("div", { children: text || value })] }, value)) }) }) }), extras: hasExtras && jsxs48(Fragment19, { children: [jsx113(FieldErrorMessage, { name }), helperText && jsx113(HelperText, { color: "gray", children: helperText })] }) });
});
var FieldSelect = forwardRef33(({ containerProps, helperText, label, labelInline, labelProps, name = "", ...props }, ref) => {
  const { errors } = useFormState();
  const internalId = useId14();
  const id = props.id || internalId;
  const error2 = errors[name];
  const hasError = !!error2;
  const additions = {
    "aria-invalid": hasError,
    color: props.color || hasError ? "failure" : void 0,
    name,
    id
  };
  const hasExtras = hasError || !!helperText;
  return jsx113(FieldBase, { containerProps, label, labelInline, labelProps, id, required: props.required, sizing: props.sizing, field: jsx113(Select, { ...props, ...additions, ref }), extras: hasExtras && jsxs48(Fragment19, { children: [jsx113(FieldErrorMessage, { name }), helperText && jsx113(HelperText, { color: "gray", children: helperText })] }) });
});
var FieldStatic = forwardRef33(({ addon, color = "gray", containerProps, helperText, label, labelInline, labelProps, sizing = "md", value }, ref) => {
  const theme4 = getTheme();
  return jsx113(FieldBase, { containerProps, label, labelInline, labelProps, sizing, field: jsxs48("div", { className: twMerge(theme4.textInput.base), children: [jsx113("div", { className: twMerge(theme4.textInput.field.base), children: jsx113("div", { className: twMerge(theme4.textInput.field.input.base, "text-gray-900 dark:text-white", color && theme4.textInput.field.input.colors[color], sizing && theme4.textInput.field.input.sizes[sizing], addon ? theme4.textInput.field.input.withAddon.on : theme4.textInput.field.input.withAddon.off), ref, children: value }) }), addon && jsx113("div", { className: twMerge(theme4.textInput.addon) })] }), extras: helperText && jsx113(HelperText, { color: "gray", children: helperText }) });
});
var FieldText = forwardRef33(({ containerProps, helperText, label, labelInline, labelProps, name = "", options: options2, ...props }, ref) => {
  const { errors } = useFormState();
  const internalId = useId14();
  const id = props.id || internalId;
  const datalistId = `${id}-datalist`;
  const hasOptions = options2?.length;
  const error2 = errors[name];
  const hasError = !!error2;
  const additions = {
    "aria-invalid": hasError,
    color: props.color || hasError ? "failure" : void 0,
    name,
    id
  };
  const hasExtras = hasError || !!helperText;
  return jsx113(FieldBase, { containerProps, label, labelInline, labelProps, id, required: props.required, sizing: props.sizing, field: jsxs48(Fragment19, { children: [jsx113(TextInput, { ...props, ...additions, ref, list: hasOptions ? datalistId : void 0 }), (options2?.length ?? 0) > 0 && jsx113("datalist", { id: datalistId, children: options2?.map((option) => jsx113("option", { value: option }, option)) })] }), extras: hasExtras && jsxs48(Fragment19, { children: [jsx113(FieldErrorMessage, { name }), helperText && jsx113(HelperText, { color: "gray", children: helperText })] }) });
});
var FieldTextArea = forwardRef33(({ containerProps, helperText, label, labelInline, labelProps, name = "", ...props }, ref) => {
  const { errors } = useFormState();
  const internalId = useId14();
  const id = props.id || internalId;
  const error2 = errors[name];
  const hasError = !!error2;
  const additions = {
    "aria-invalid": hasError,
    color: props.color || hasError ? "failure" : void 0,
    id,
    name
  };
  const hasExtras = hasError || !!helperText;
  return jsx113(FieldBase, { containerProps, label, labelInline, labelProps, id, required: props.required, field: jsx113(Textarea, { ...props, ...additions, ref }), extras: hasExtras && jsxs48(Fragment19, { children: [jsx113(FieldErrorMessage, { name }), helperText && jsx113(HelperText, { color: "gray", children: helperText })] }) });
});
var FieldTextAreaList = forwardRef33(({ containerProps, helperText, label, labelInline, labelProps, onBlur, onChange, placeholder, rows, separator = "\n", spaceAfterSeparator = false, valueAsNumber, ...props }, ref) => {
  return jsx113(Controller, { ...props, render: ({ field }) => jsx113(FieldTextArea, { ...field, ref, containerProps, label, labelInline, labelProps, helperText, required: props.required, rows, onChange: async (event) => {
    const value = event.target.value;
    const values = getValues$1({ separator, value, valueAsNumber });
    field.onChange(values);
    onChange && onChange(event, values);
  }, onBlur: async (event) => {
    field.onBlur();
    if (!onBlur) {
      return;
    }
    const value = event.target.value;
    const values = getValues$1({ separator, value, valueAsNumber });
    onBlur(event, values);
  }, placeholder, value: field.value ? getText$1({
    separator,
    spaceAfterSeparator,
    value: field.value
  }) : void 0 }) });
});
var getText$1 = ({ separator, spaceAfterSeparator, value }) => {
  if (!value) {
    return "";
  }
  const glue = spaceAfterSeparator ? [separator, " "].join("") : separator;
  return value.join(glue);
};
var getValues$1 = ({ separator, value, valueAsNumber }) => {
  if (!value) {
    return [];
  }
  return value.split(separator).map((string) => string.trim()).filter(Boolean).map((string) => valueAsNumber ? Number(string) : string);
};
var FieldTextList = forwardRef33(({ containerProps, helperText, label, labelInline, labelProps, onBlur, onChange, placeholder, separator = ",", spaceAfterSeparator = true, valueAsNumber, ...props }, ref) => {
  return jsx113(Controller, { ...props, render: ({ field }) => jsx113(FieldText, { ...field, ref, containerProps, label, labelInline, labelProps, helperText, onChange: async (event) => {
    const value = event.target.value;
    const values = getValues({ separator, value, valueAsNumber });
    field.onChange(values);
    onChange && onChange(event, values);
  }, onBlur: async (event) => {
    field.onBlur();
    if (!onBlur) {
      return;
    }
    const value = event.target.value;
    const values = getValues({ separator, value, valueAsNumber });
    onBlur(event, values);
  }, placeholder, required: props.required, value: field.value ? getText({
    separator,
    spaceAfterSeparator,
    value: field.value
  }) : void 0 }) });
});
var getText = ({ separator, spaceAfterSeparator, value }) => {
  if (!value) {
    return "";
  }
  const glue = spaceAfterSeparator ? [separator, " "].join("") : separator;
  return value.join(glue);
};
var getValues = ({ separator, value, valueAsNumber }) => {
  if (!value) {
    return [];
  }
  return value.split(separator).map((string) => string.trim()).filter(Boolean).map((string) => valueAsNumber ? Number(string) : string);
};
var theme2 = {
  root: {
    base: "relative inline-flex items-center cursor-pointer"
  },
  toggle: {
    base: "peer rounded-full after:left-[2px] after:content-[''] after:rounded-full after:transition-all after:bg-white after:border after:border-gray-300 after:absolute peer-focus:outline-none peer-focus:ring-2",
    size: {
      sm: "w-9 h-5 after:h-4 after:w-4 after:top-[4px]",
      md: "w-11 h-6 after:h-5 after:w-5 after:top-[2px]",
      lg: "w-14 h-7 after:h-6 after:w-6 after:top-[2px] after:left-[4px]"
    },
    checked: {
      on: "peer-checked:after:translate-x-full peer-checked:after:border-white",
      off: "bg-gray-200 dark:bg-gray-700 dark:border-gray-600",
      color: {
        blue: "peer-checked:bg-blue-600 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800",
        gray: "peer-checked:bg-gray-600 peer-focus:ring-gray-300 dark:peer-focus:ring-gray-800",
        failure: "peer-checked:bg-red-600 peer-focus:ring-red-300 dark:peer-focus:ring-red-800",
        success: "peer-checked:bg-green-600 peer-focus:ring-green-300 dark:peer-focus:ring-green-800",
        warning: "peer-checked:bg-yellow-400 peer-focus:ring-yellow-300 dark:peer-focus:ring-yellow-800",
        info: "peer-checked:bg-cyan-600 peer-focus:ring-cyan-300 dark:peer-focus:ring-cyan-800"
      }
    }
  }
};
var ToggleInput = forwardRef33(({ className, label, labelProps, size: size4 = "md", color = "blue", ...props }, ref) => {
  return jsxs48(Label, { role: "switch", ...labelProps, className: twMerge(theme2.root.base, className, labelProps?.className), children: [jsx113("input", { type: "checkbox", className: "peer sr-only", ref, ...props }), jsx113("div", { className: twMerge(theme2.toggle.base, theme2.toggle.size[size4], theme2.toggle.checked.off, theme2.toggle.checked.on, theme2.toggle.checked.color[color]) }), jsx113("span", { className: "ml-2", children: label })] });
});
var CardComponent = ({ children, className, ...props }) => {
  return jsx113("section", { "data-testid": "card-component", className: twMerge("rounded-lg border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800", className), ...props, children });
};
CardComponent.displayName = "Card";
var CardHeader = ({ children, className, ...props }) => {
  return jsx113("header", { className: twMerge(contentPadding, "border-b border-gray-200 [overflow-wrap:anywhere] dark:border-gray-700 dark:print:border-gray-200", className), ...props, children });
};
CardHeader.displayName = "Card.Header";
var CardTitle = ({ level = 3, ...props }) => {
  const Heading = `h${level}`;
  return jsx113(Heading, {
    ...props,
    // @ts-expect-error Dynamic typing, it's there.
    className: twMerge("text-2xl", props.className)
  });
};
CardTitle.displayName = "Card.Title";
var CardSubtitle = ({ level = 4, ...props }) => {
  const Heading = `h${level}`;
  return jsx113(Heading, {
    ...props,
    // @ts-expect-error Dynamic typing, it's there.
    className: twMerge("text-lg", props.className)
  });
};
CardSubtitle.displayName = "Card.Subtitle";
var CardContent = ({ children, className, ...props }) => {
  return jsx113("div", { className: twMerge(contentPadding, className), ...props, children });
};
CardContent.displayName = "Card.Content";
var contentPadding = "p-4";
var Card2 = Object.assign(CardComponent, {
  Header: CardHeader,
  Title: CardTitle,
  Subtitle: CardSubtitle,
  Content: CardContent
});
var ExpandCollapseControl = ({ children, isExpanded, ...props }) => {
  return jsxs48(Button, { color: "light", type: "button", ...props, children: [jsx113("span", { className: "mr-1", children }), " ", jsx113(ExpandCollapseIcon, { isExpanded })] });
};
var standardFlowbiteTheme = {
  alert: {
    closeButton: {
      color: {
        info: "bg-blue-100 text-blue-500 hover:bg-blue-200 focus:ring-blue-400 dark:bg-blue-200 dark:text-blue-600 dark:hover:bg-blue-300",
        failure: "bg-red-100 text-red-500 hover:bg-red-200 focus:ring-red-400 dark:bg-red-200 dark:text-red-600 dark:hover:bg-red-300",
        success: "bg-green-100 text-green-500 hover:bg-green-200 focus:ring-green-400 dark:bg-green-200 dark:text-green-600 dark:hover:bg-green-300",
        warning: "bg-yellow-100 text-yellow-500 hover:bg-yellow-200 focus:ring-yellow-400 dark:bg-yellow-200 dark:text-yellow-600 dark:hover:bg-yellow-300"
      }
    },
    color: {
      info: "border-blue-500 bg-blue-100 text-blue-700 dark:bg-blue-200 dark:text-blue-800",
      failure: "border-red-500 bg-red-100 text-red-700 dark:bg-red-200 dark:text-red-800",
      success: "border-green-500 bg-green-100 text-green-700 dark:bg-green-200 dark:text-green-800",
      warning: "border-yellow-500 bg-yellow-100 text-yellow-700 dark:bg-yellow-200 dark:text-yellow-800",
      red: "border-red-500 bg-red-100 text-red-700 dark:bg-red-200 dark:text-red-800"
    }
  },
  badge: {
    root: {
      color: {
        blue: "bg-blue-100 text-blue-800 dark:bg-blue-200 dark:text-blue-900 group-hover:bg-blue-200 dark:group-hover:bg-blue-300"
      }
    }
  },
  button: {
    inner: {
      base: "flex items-stretch items-center transition-all duration-200"
    },
    color: {
      light: "border border-gray-300 bg-white text-gray-900 focus:ring-4 focus:ring-gray-200 enabled:hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-600 dark:text-white dark:focus:ring-gray-700 dark:enabled:hover:border-gray-700 dark:enabled:hover:bg-gray-700",
      blue: "text-white bg-blue-600 enabled:hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 dark:bg-blue-900 dark:enabled:hover:bg-blue-800 dark:focus:ring-blue-700",
      failure: "text-white bg-red-600 enabled:hover:bg-red-700 focus:ring-2 focus:ring-red-400 dark:bg-red-900 dark:enabled:hover:bg-red-800 dark:focus:ring-red-700",
      yellow: "text-white bg-yellow-400 enabled:hover:bg-yellow-500 focus:ring-2 focus:ring-yellow-300 dark:bg-yellow-700 dark:enabled:hover:bg-yellow-600 dark:focus:ring-yellow-500",
      primary: "text-white bg-primary-700 enabled:hover:bg-primary-800 focus:ring-2 focus:ring-primary-300 dark:bg-primary-600 dark:enabled:hover:bg-primary-700 dark:focus:ring-primary-800"
    },
    outline: {
      on: "transition-all duration-75 ease-in group-hover:bg-opacity-0 group-hover:text-inherit"
    }
  },
  checkbox: {
    root: {
      base: "h-4 w-4 rounded border border-gray-300 bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600 text-blue-600"
    }
  },
  dropdown: {
    floating: {
      base: "z-10 w-fit rounded-xl divide-y divide-gray-100 shadow overflow-hidden",
      content: "rounded-xl text-sm text-gray-700 dark:text-gray-200",
      target: "w-fit dark:text-white"
    },
    content: ""
  },
  footer: {
    root: {
      base: "w-full bg-white dark:bg-gray-800 md:flex md:items-center md:justify-between"
    },
    divider: {
      base: "w-full my-6 border-gray-200 sm:mx-auto dark:border-gray-700"
    },
    copyright: {
      base: "text-sm"
    }
  },
  helperText: {
    root: {
      base: "mt-1 text-sm"
    }
  },
  label: {
    root: {
      colors: {
        warning: "text-orange-500 dark:text-orange-700"
      }
    }
  },
  navbar: {
    root: {
      base: "z-30 w-full bg-white border-b border-gray-200 dark:bg-gray-800 dark:border-gray-700"
    }
  },
  pagination: {
    pages: {
      selector: {
        active: "font-medium bg-gray-200 hover:bg-gray-200 hover:text-gray-500 dark:bg-gray-700 dark:text-white"
      }
    }
  },
  select: {
    field: {
      select: {
        colors: {
          gray: "bg-gray-50 border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
        }
      }
    }
  },
  textInput: {
    field: {
      input: {
        colors: {
          gray: "bg-gray-50 border-gray-300 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
        }
      }
    }
  }
};
var standardChartColors = {
  blue: {
    100: "#1C64F2"
  },
  purple: {
    100: "#9061F9"
  },
  green: {
    100: "#56D19C"
  },
  pink: {
    100: "#EA5F94"
  },
  gold: {
    100: "#FFD700"
  },
  magenta: {
    100: "#CD34B5"
  },
  orange: {
    100: "#FFB14E"
  },
  lightOrange: {
    100: "#FA8775"
  },
  gray: {
    100: "#D5D5DC",
    700: "#9D9D9F"
  }
};
var standardChartPalette = Object.values(standardChartColors).map((v) => v[100]);

// node_modules/@howso/react-tailwind-flowbite-components/lib/public/locales/react-tailwind-flowbite-components/en.json
var en_default = {
  DataDisplay: {
    BooleanText: {
      yes: "Yes",
      no: "No"
    },
    CodeBlock: {
      copied: "Copied",
      copy: "Copy",
      download: "Download"
    }
  },
  Feedback: {
    ErrorAlert: {
      Generic: "Something went wrong"
    },
    FieldErrorMessage: {
      type: {
        required: "This field is required.",
        min: "Value too small.",
        max: "Value too large.",
        minLength: "Value too short.",
        maxLength: "Value too long."
      }
    },
    Skeleton: {
      loading: "Loading..."
    }
  },
  Forms: {
    FieldLabel: {
      required: "This field is required"
    }
  }
};

// node_modules/@howso/howso-engine-react-display-components/lib/index.esm.js
import { jsx as jsx114, jsxs as jsxs49, Fragment as Fragment20 } from "react/jsx-runtime";
import { useState as useState24, createContext as createContext20, useMemo as useMemo11, useContext as useContext22, forwardRef as forwardRef34, useCallback as useCallback8, Fragment as Fragment$1, useEffect as useEffect19 } from "react";

// node_modules/jotai/esm/react.mjs
import ReactExports, { createContext as createContext19, useContext as useContext21, useRef as useRef14, createElement as createElement8, useReducer as useReducer2, useEffect as useEffect18, useDebugValue, useCallback as useCallback7 } from "react";

// node_modules/jotai/esm/vanilla.mjs
var keyCount = 0;
function atom(read, write) {
  const key = `atom${++keyCount}`;
  const config = {
    toString: () => key
  };
  if (typeof read === "function") {
    config.read = read;
  } else {
    config.init = read;
    config.read = defaultRead;
    config.write = defaultWrite;
  }
  if (write) {
    config.write = write;
  }
  return config;
}
function defaultRead(get3) {
  return get3(this);
}
function defaultWrite(get3, set2, arg) {
  return set2(
    this,
    typeof arg === "function" ? arg(get3(this)) : arg
  );
}
var isSelfAtom = (atom2, a2) => atom2.unstable_is ? atom2.unstable_is(a2) : a2 === atom2;
var hasInitialValue = (atom2) => "init" in atom2;
var isActuallyWritableAtom = (atom2) => !!atom2.write;
var cancelPromiseMap = /* @__PURE__ */ new WeakMap();
var registerCancelPromise = (promise, cancel) => {
  cancelPromiseMap.set(promise, cancel);
  promise.catch(() => {
  }).finally(() => cancelPromiseMap.delete(promise));
};
var cancelPromise = (promise, next) => {
  const cancel = cancelPromiseMap.get(promise);
  if (cancel) {
    cancelPromiseMap.delete(promise);
    cancel(next);
  }
};
var resolvePromise = (promise, value) => {
  promise.status = "fulfilled";
  promise.value = value;
};
var rejectPromise = (promise, e3) => {
  promise.status = "rejected";
  promise.reason = e3;
};
var isPromiseLike = (x) => typeof (x == null ? void 0 : x.then) === "function";
var isEqualAtomValue = (a2, b) => !!a2 && "v" in a2 && "v" in b && Object.is(a2.v, b.v);
var isEqualAtomError = (a2, b) => !!a2 && "e" in a2 && "e" in b && Object.is(a2.e, b.e);
var hasPromiseAtomValue = (a2) => !!a2 && "v" in a2 && a2.v instanceof Promise;
var isEqualPromiseAtomValue = (a2, b) => "v" in a2 && "v" in b && a2.v.orig && a2.v.orig === b.v.orig;
var returnAtomValue = (atomState) => {
  if ("e" in atomState) {
    throw atomState.e;
  }
  return atomState.v;
};
var createStore$1 = () => {
  const atomStateMap = /* @__PURE__ */ new WeakMap();
  const mountedMap = /* @__PURE__ */ new WeakMap();
  const pendingStack = [];
  const pendingMap = /* @__PURE__ */ new WeakMap();
  let devListenersRev2;
  let mountedAtoms;
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
    devListenersRev2 = /* @__PURE__ */ new Set();
    mountedAtoms = /* @__PURE__ */ new Set();
  }
  const getAtomState = (atom2) => atomStateMap.get(atom2);
  const addPendingDependent = (atom2, atomState) => {
    atomState.d.forEach((_, a2) => {
      if (!pendingMap.has(a2)) {
        const aState = getAtomState(a2);
        pendingMap.set(a2, [aState, /* @__PURE__ */ new Set()]);
        if (aState) {
          addPendingDependent(a2, aState);
        }
      }
      pendingMap.get(a2)[1].add(atom2);
    });
  };
  const setAtomState = (atom2, atomState) => {
    var _a;
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      Object.freeze(atomState);
    }
    const prevAtomState = getAtomState(atom2);
    atomStateMap.set(atom2, atomState);
    (_a = pendingStack[pendingStack.length - 1]) == null ? void 0 : _a.add(atom2);
    if (!pendingMap.has(atom2)) {
      pendingMap.set(atom2, [prevAtomState, /* @__PURE__ */ new Set()]);
      addPendingDependent(atom2, atomState);
    }
    if (hasPromiseAtomValue(prevAtomState)) {
      const next = "v" in atomState ? atomState.v instanceof Promise ? atomState.v : Promise.resolve(atomState.v) : Promise.reject(atomState.e);
      if (prevAtomState.v !== next) {
        cancelPromise(prevAtomState.v, next);
      }
    }
  };
  const updateDependencies = (atom2, nextAtomState, nextDependencies, keepPreviousDependencies) => {
    const dependencies = new Map(
      keepPreviousDependencies ? nextAtomState.d : null
    );
    let changed = false;
    nextDependencies.forEach((aState, a2) => {
      if (!aState && isSelfAtom(atom2, a2)) {
        aState = nextAtomState;
      }
      if (aState) {
        dependencies.set(a2, aState);
        if (nextAtomState.d.get(a2) !== aState) {
          changed = true;
        }
      } else if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
        console.warn("[Bug] atom state not found");
      }
    });
    if (changed || nextAtomState.d.size !== dependencies.size) {
      nextAtomState.d = dependencies;
    }
  };
  const setAtomValue = (atom2, value, nextDependencies, keepPreviousDependencies) => {
    const prevAtomState = getAtomState(atom2);
    const nextAtomState = {
      d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),
      v: value
    };
    if (nextDependencies) {
      updateDependencies(
        atom2,
        nextAtomState,
        nextDependencies,
        keepPreviousDependencies
      );
    }
    if (isEqualAtomValue(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {
      return prevAtomState;
    }
    if (hasPromiseAtomValue(prevAtomState) && hasPromiseAtomValue(nextAtomState) && isEqualPromiseAtomValue(prevAtomState, nextAtomState)) {
      if (prevAtomState.d === nextAtomState.d) {
        return prevAtomState;
      } else {
        nextAtomState.v = prevAtomState.v;
      }
    }
    setAtomState(atom2, nextAtomState);
    return nextAtomState;
  };
  const setAtomValueOrPromise = (atom2, valueOrPromise, nextDependencies, abortPromise) => {
    if (isPromiseLike(valueOrPromise)) {
      let continuePromise;
      const updatePromiseDependencies = () => {
        const prevAtomState = getAtomState(atom2);
        if (!hasPromiseAtomValue(prevAtomState) || prevAtomState.v !== promise) {
          return;
        }
        const nextAtomState = setAtomValue(
          atom2,
          promise,
          nextDependencies
        );
        if (mountedMap.has(atom2) && prevAtomState.d !== nextAtomState.d) {
          mountDependencies(atom2, nextAtomState, prevAtomState.d);
        }
      };
      const promise = new Promise((resolve, reject) => {
        let settled = false;
        valueOrPromise.then(
          (v) => {
            if (!settled) {
              settled = true;
              resolvePromise(promise, v);
              resolve(v);
              updatePromiseDependencies();
            }
          },
          (e3) => {
            if (!settled) {
              settled = true;
              rejectPromise(promise, e3);
              reject(e3);
              updatePromiseDependencies();
            }
          }
        );
        continuePromise = (next) => {
          if (!settled) {
            settled = true;
            next.then(
              (v) => resolvePromise(promise, v),
              (e3) => rejectPromise(promise, e3)
            );
            resolve(next);
          }
        };
      });
      promise.orig = valueOrPromise;
      promise.status = "pending";
      registerCancelPromise(promise, (next) => {
        if (next) {
          continuePromise(next);
        }
        abortPromise == null ? void 0 : abortPromise();
      });
      return setAtomValue(atom2, promise, nextDependencies, true);
    }
    return setAtomValue(atom2, valueOrPromise, nextDependencies);
  };
  const setAtomError = (atom2, error2, nextDependencies) => {
    const prevAtomState = getAtomState(atom2);
    const nextAtomState = {
      d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),
      e: error2
    };
    if (nextDependencies) {
      updateDependencies(atom2, nextAtomState, nextDependencies);
    }
    if (isEqualAtomError(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {
      return prevAtomState;
    }
    setAtomState(atom2, nextAtomState);
    return nextAtomState;
  };
  const readAtomState = (atom2, force) => {
    const atomState = getAtomState(atom2);
    if (!(force == null ? void 0 : force(atom2)) && atomState) {
      if (mountedMap.has(atom2)) {
        return atomState;
      }
      if (Array.from(atomState.d).every(([a2, s3]) => {
        if (a2 === atom2) {
          return true;
        }
        const aState = readAtomState(a2, force);
        return aState === s3 || isEqualAtomValue(aState, s3);
      })) {
        return atomState;
      }
    }
    const nextDependencies = /* @__PURE__ */ new Map();
    let isSync = true;
    const getter = (a2) => {
      if (isSelfAtom(atom2, a2)) {
        const aState2 = getAtomState(a2);
        if (aState2) {
          nextDependencies.set(a2, aState2);
          return returnAtomValue(aState2);
        }
        if (hasInitialValue(a2)) {
          nextDependencies.set(a2, void 0);
          return a2.init;
        }
        throw new Error("no atom init");
      }
      const aState = readAtomState(a2, force);
      nextDependencies.set(a2, aState);
      return returnAtomValue(aState);
    };
    let controller;
    let setSelf;
    const options2 = {
      get signal() {
        if (!controller) {
          controller = new AbortController();
        }
        return controller.signal;
      },
      get setSelf() {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !isActuallyWritableAtom(atom2)) {
          console.warn("setSelf function cannot be used with read-only atom");
        }
        if (!setSelf && isActuallyWritableAtom(atom2)) {
          setSelf = (...args) => {
            if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && isSync) {
              console.warn("setSelf function cannot be called in sync");
            }
            if (!isSync) {
              return writeAtom(atom2, ...args);
            }
          };
        }
        return setSelf;
      }
    };
    try {
      const valueOrPromise = atom2.read(getter, options2);
      return setAtomValueOrPromise(
        atom2,
        valueOrPromise,
        nextDependencies,
        () => controller == null ? void 0 : controller.abort()
      );
    } catch (error2) {
      return setAtomError(atom2, error2, nextDependencies);
    } finally {
      isSync = false;
    }
  };
  const readAtom = (atom2) => returnAtomValue(readAtomState(atom2));
  const recomputeDependents = (atom2) => {
    const getDependents = (a2) => {
      var _a, _b;
      const dependents = new Set((_a = mountedMap.get(a2)) == null ? void 0 : _a.t);
      (_b = pendingMap.get(a2)) == null ? void 0 : _b[1].forEach((dependent) => {
        dependents.add(dependent);
      });
      return dependents;
    };
    const topsortedAtoms = new Array();
    const markedAtoms = /* @__PURE__ */ new Set();
    const visit = (n2) => {
      if (markedAtoms.has(n2)) {
        return;
      }
      markedAtoms.add(n2);
      for (const m of getDependents(n2)) {
        if (n2 !== m) {
          visit(m);
        }
      }
      topsortedAtoms.push(n2);
    };
    visit(atom2);
    const changedAtoms = /* @__PURE__ */ new Set([atom2]);
    const isMarked = (a2) => markedAtoms.has(a2);
    for (let i2 = topsortedAtoms.length - 1; i2 >= 0; --i2) {
      const a2 = topsortedAtoms[i2];
      const prevAtomState = getAtomState(a2);
      if (!prevAtomState) {
        continue;
      }
      let hasChangedDeps = false;
      for (const dep of prevAtomState.d.keys()) {
        if (dep !== a2 && changedAtoms.has(dep)) {
          hasChangedDeps = true;
          break;
        }
      }
      if (hasChangedDeps) {
        const nextAtomState = readAtomState(a2, isMarked);
        addPendingDependent(a2, nextAtomState);
        if (!isEqualAtomValue(prevAtomState, nextAtomState)) {
          changedAtoms.add(a2);
        }
      }
      markedAtoms.delete(a2);
    }
  };
  const writeAtomState = (atom2, ...args) => {
    const getter = (a2) => returnAtomValue(readAtomState(a2));
    const setter = (a2, ...args2) => {
      const isSync = pendingStack.length > 0;
      if (!isSync) {
        pendingStack.push(/* @__PURE__ */ new Set([a2]));
      }
      let r2;
      if (isSelfAtom(atom2, a2)) {
        if (!hasInitialValue(a2)) {
          throw new Error("atom not writable");
        }
        const prevAtomState = getAtomState(a2);
        const nextAtomState = setAtomValueOrPromise(a2, args2[0]);
        if (!isEqualAtomValue(prevAtomState, nextAtomState)) {
          recomputeDependents(a2);
        }
      } else {
        r2 = writeAtomState(a2, ...args2);
      }
      if (!isSync) {
        const flushed = flushPending(pendingStack.pop());
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
          devListenersRev2.forEach(
            (l) => l({ type: "async-write", flushed })
          );
        }
      }
      return r2;
    };
    const result = atom2.write(getter, setter, ...args);
    return result;
  };
  const writeAtom = (atom2, ...args) => {
    pendingStack.push(/* @__PURE__ */ new Set([atom2]));
    const result = writeAtomState(atom2, ...args);
    const flushed = flushPending(pendingStack.pop());
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      devListenersRev2.forEach((l) => l({ type: "write", flushed }));
    }
    return result;
  };
  const mountAtom = (atom2, initialDependent, onMountQueue) => {
    var _a;
    const existingMount = mountedMap.get(atom2);
    if (existingMount) {
      if (initialDependent) {
        existingMount.t.add(initialDependent);
      }
      return existingMount;
    }
    const queue = onMountQueue || [];
    (_a = getAtomState(atom2)) == null ? void 0 : _a.d.forEach((_, a2) => {
      if (a2 !== atom2) {
        mountAtom(a2, atom2, queue);
      }
    });
    readAtomState(atom2);
    const mounted = {
      t: new Set(initialDependent && [initialDependent]),
      l: /* @__PURE__ */ new Set()
    };
    mountedMap.set(atom2, mounted);
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      mountedAtoms.add(atom2);
    }
    if (isActuallyWritableAtom(atom2) && atom2.onMount) {
      const { onMount } = atom2;
      queue.push(() => {
        const onUnmount = onMount((...args) => writeAtom(atom2, ...args));
        if (onUnmount) {
          mounted.u = onUnmount;
        }
      });
    }
    if (!onMountQueue) {
      queue.forEach((f) => f());
    }
    return mounted;
  };
  const canUnmountAtom = (atom2, mounted) => !mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom2));
  const tryUnmountAtom = (atom2, mounted) => {
    if (!canUnmountAtom(atom2, mounted)) {
      return;
    }
    const onUnmount = mounted.u;
    if (onUnmount) {
      onUnmount();
    }
    mountedMap.delete(atom2);
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      mountedAtoms.delete(atom2);
    }
    const atomState = getAtomState(atom2);
    if (atomState) {
      if (hasPromiseAtomValue(atomState)) {
        cancelPromise(atomState.v);
      }
      atomState.d.forEach((_, a2) => {
        if (a2 !== atom2) {
          const mountedDep = mountedMap.get(a2);
          if (mountedDep) {
            mountedDep.t.delete(atom2);
            tryUnmountAtom(a2, mountedDep);
          }
        }
      });
    } else if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      console.warn("[Bug] could not find atom state to unmount", atom2);
    }
  };
  const mountDependencies = (atom2, atomState, prevDependencies) => {
    const depSet = new Set(atomState.d.keys());
    const maybeUnmountAtomSet = /* @__PURE__ */ new Set();
    prevDependencies == null ? void 0 : prevDependencies.forEach((_, a2) => {
      if (depSet.has(a2)) {
        depSet.delete(a2);
        return;
      }
      maybeUnmountAtomSet.add(a2);
      const mounted = mountedMap.get(a2);
      if (mounted) {
        mounted.t.delete(atom2);
      }
    });
    depSet.forEach((a2) => {
      mountAtom(a2, atom2);
    });
    maybeUnmountAtomSet.forEach((a2) => {
      const mounted = mountedMap.get(a2);
      if (mounted) {
        tryUnmountAtom(a2, mounted);
      }
    });
  };
  const flushPending = (pendingAtoms) => {
    let flushed;
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      flushed = /* @__PURE__ */ new Set();
    }
    const pending = [];
    const collectPending = (pendingAtom) => {
      var _a;
      if (!pendingMap.has(pendingAtom)) {
        return;
      }
      const [prevAtomState, dependents] = pendingMap.get(pendingAtom);
      pendingMap.delete(pendingAtom);
      pending.push([pendingAtom, prevAtomState]);
      dependents.forEach(collectPending);
      (_a = getAtomState(pendingAtom)) == null ? void 0 : _a.d.forEach((_, a2) => collectPending(a2));
    };
    pendingAtoms.forEach(collectPending);
    pending.forEach(([atom2, prevAtomState]) => {
      const atomState = getAtomState(atom2);
      if (!atomState) {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
          console.warn("[Bug] no atom state to flush");
        }
        return;
      }
      if (atomState !== prevAtomState) {
        const mounted = mountedMap.get(atom2);
        if (mounted && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
          mountDependencies(atom2, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
        }
        if (mounted && !// TODO This seems pretty hacky. Hope to fix it.
        // Maybe we could `mountDependencies` in `setAtomState`?
        (!hasPromiseAtomValue(prevAtomState) && (isEqualAtomValue(prevAtomState, atomState) || isEqualAtomError(prevAtomState, atomState)))) {
          mounted.l.forEach((listener) => listener());
          if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
            flushed.add(atom2);
          }
        }
      }
    });
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      return flushed;
    }
  };
  const subscribeAtom = (atom2, listener) => {
    const mounted = mountAtom(atom2);
    const flushed = flushPending([atom2]);
    const listeners = mounted.l;
    listeners.add(listener);
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      devListenersRev2.forEach(
        (l) => l({ type: "sub", flushed })
      );
    }
    return () => {
      listeners.delete(listener);
      tryUnmountAtom(atom2, mounted);
      if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
        devListenersRev2.forEach((l) => l({ type: "unsub" }));
      }
    };
  };
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
    return {
      get: readAtom,
      set: writeAtom,
      sub: subscribeAtom,
      // store dev methods (these are tentative and subject to change without notice)
      dev_subscribe_store: (l) => {
        devListenersRev2.add(l);
        return () => {
          devListenersRev2.delete(l);
        };
      },
      dev_get_mounted_atoms: () => mountedAtoms.values(),
      dev_get_atom_state: (a2) => atomStateMap.get(a2),
      dev_get_mounted: (a2) => mountedMap.get(a2),
      dev_restore_atoms: (values) => {
        pendingStack.push(/* @__PURE__ */ new Set());
        for (const [atom2, valueOrPromise] of values) {
          if (hasInitialValue(atom2)) {
            setAtomValueOrPromise(atom2, valueOrPromise);
            recomputeDependents(atom2);
          }
        }
        const flushed = flushPending(pendingStack.pop());
        devListenersRev2.forEach(
          (l) => l({ type: "restore", flushed })
        );
      }
    };
  }
  return {
    get: readAtom,
    set: writeAtom,
    sub: subscribeAtom
  };
};
var defaultStore;
var getDefaultStore$1 = () => {
  if (!defaultStore) {
    defaultStore = createStore$1();
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = defaultStore);
      if (globalThis.__JOTAI_DEFAULT_STORE__ !== defaultStore) {
        console.warn(
          "Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044"
        );
      }
    }
  }
  return defaultStore;
};
Symbol(
  (import.meta.env ? import.meta.env.MODE : void 0) !== "production" ? "CONTINUE_PROMISE" : ""
);
var getDefaultStore = getDefaultStore$1;

// node_modules/jotai/esm/react.mjs
var StoreContext = createContext19(
  void 0
);
var useStore = (options2) => {
  const store2 = useContext21(StoreContext);
  return (options2 == null ? void 0 : options2.store) || store2 || getDefaultStore();
};
var isPromiseLike2 = (x) => typeof (x == null ? void 0 : x.then) === "function";
var use2 = ReactExports.use || ((promise) => {
  if (promise.status === "pending") {
    throw promise;
  } else if (promise.status === "fulfilled") {
    return promise.value;
  } else if (promise.status === "rejected") {
    throw promise.reason;
  } else {
    promise.status = "pending";
    promise.then(
      (v) => {
        promise.status = "fulfilled";
        promise.value = v;
      },
      (e3) => {
        promise.status = "rejected";
        promise.reason = e3;
      }
    );
    throw promise;
  }
});
function useAtomValue(atom2, options2) {
  const store2 = useStore(options2);
  const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = useReducer2(
    (prev) => {
      const nextValue = store2.get(atom2);
      if (Object.is(prev[0], nextValue) && prev[1] === store2 && prev[2] === atom2) {
        return prev;
      }
      return [nextValue, store2, atom2];
    },
    void 0,
    () => [store2.get(atom2), store2, atom2]
  );
  let value = valueFromReducer;
  if (storeFromReducer !== store2 || atomFromReducer !== atom2) {
    rerender();
    value = store2.get(atom2);
  }
  const delay = options2 == null ? void 0 : options2.delay;
  useEffect18(() => {
    const unsub = store2.sub(atom2, () => {
      if (typeof delay === "number") {
        setTimeout(rerender, delay);
        return;
      }
      rerender();
    });
    rerender();
    return unsub;
  }, [store2, atom2, delay]);
  useDebugValue(value);
  return isPromiseLike2(value) ? use2(value) : value;
}
function useSetAtom(atom2, options2) {
  const store2 = useStore(options2);
  const setAtom = useCallback7(
    (...args) => {
      if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !("write" in atom2)) {
        throw new Error("not writable atom");
      }
      return store2.set(atom2, ...args);
    },
    [store2, atom2]
  );
  return setAtom;
}
function useAtom(atom2, options2) {
  return [
    useAtomValue(atom2, options2),
    // We do wrong type assertion here, which results in throwing an error.
    useSetAtom(atom2, options2)
  ];
}

// node_modules/jotai/esm/vanilla/utils.mjs
var RESET = Symbol(
  (import.meta.env ? import.meta.env.MODE : void 0) !== "production" ? "RESET" : ""
);
function atomWithReset(initialValue) {
  const anAtom = atom(
    initialValue,
    (get3, set2, update) => {
      const nextValue = typeof update === "function" ? update(get3(anAtom)) : update;
      set2(anAtom, nextValue === RESET ? initialValue : nextValue);
    }
  );
  return anAtom;
}
var isPromiseLike3 = (x) => typeof (x == null ? void 0 : x.then) === "function";
function createJSONStorage(getStringStorage = () => {
  try {
    return window.localStorage;
  } catch (e3) {
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      if (typeof window !== "undefined") {
        console.warn(e3);
      }
    }
    return void 0;
  }
}, options2) {
  var _a;
  let lastStr;
  let lastValue;
  const storage = {
    getItem: (key, initialValue) => {
      var _a2, _b;
      const parse = (str2) => {
        str2 = str2 || "";
        if (lastStr !== str2) {
          try {
            lastValue = JSON.parse(str2, options2 == null ? void 0 : options2.reviver);
          } catch (e3) {
            return initialValue;
          }
          lastStr = str2;
        }
        return lastValue;
      };
      const str = (_b = (_a2 = getStringStorage()) == null ? void 0 : _a2.getItem(key)) != null ? _b : null;
      if (isPromiseLike3(str)) {
        return str.then(parse);
      }
      return parse(str);
    },
    setItem: (key, newValue) => {
      var _a2;
      return (_a2 = getStringStorage()) == null ? void 0 : _a2.setItem(
        key,
        JSON.stringify(newValue, options2 == null ? void 0 : options2.replacer)
      );
    },
    removeItem: (key) => {
      var _a2;
      return (_a2 = getStringStorage()) == null ? void 0 : _a2.removeItem(key);
    }
  };
  const createHandleSubscribe = (subscriber2) => (key, callback, initialValue) => subscriber2(key, (v) => {
    let newValue;
    try {
      newValue = JSON.parse(v || "");
    } catch (e3) {
      newValue = initialValue;
    }
    callback(newValue);
  });
  let subscriber;
  try {
    subscriber = (_a = getStringStorage()) == null ? void 0 : _a.subscribe;
  } catch (e3) {
  }
  if (!subscriber && typeof window !== "undefined" && typeof window.addEventListener === "function" && window.Storage) {
    subscriber = (key, callback) => {
      if (!(getStringStorage() instanceof window.Storage)) {
        return () => {
        };
      }
      const storageEventCallback = (e3) => {
        if (e3.storageArea === getStringStorage() && e3.key === key) {
          callback(e3.newValue);
        }
      };
      window.addEventListener("storage", storageEventCallback);
      return () => {
        window.removeEventListener("storage", storageEventCallback);
      };
    };
  }
  if (subscriber) {
    storage.subscribe = createHandleSubscribe(subscriber);
  }
  return storage;
}
var defaultStorage = createJSONStorage();

// node_modules/@howso/howso-engine-react-display-components/lib/index.esm.js
var defaultTranslationNamespace2 = "howso-engine-react-display-components";
var useDefaultTranslation2 = (options2) => useTranslation(defaultTranslationNamespace2, options2);
var FeatureAttributeSample = ({ attributes, disableModal }) => {
  const [isOpen, setIsOpen] = useState24(false);
  if (!attributes) {
    return null;
  }
  const openModal = () => {
    if (disableModal) {
      return;
    }
    setIsOpen(true);
  };
  const closeModal = () => {
    setIsOpen(false);
  };
  switch (true) {
    case attributes.data_type === "json":
    case attributes.data_type === "yaml":
      return jsxs49(Fragment20, { children: [jsx114("button", { onClick: openModal, className: twMerge("max-w-full", disableModal && "pointer-events-none"), disabled: disableModal, children: jsx114("code", { children: typeof attributes.sample === "string" ? (
        // CSS will handle the dynamic truncation, this is just DOM length protection
        attributes.sample.substring(0, 500)
      ) : JSON.stringify(attributes.sample) }) }), isOpen && jsx114(FeatureAttributeSampleModal, { attributes, onClose: closeModal })] });
    case attributes.sample === null:
      return jsx114("code", { className: "text-red-500 dark:text-red-700", children: "null" });
    case attributes.data_type === "boolean":
      return jsx114("code", { className: "text-blue-500 dark:text-blue-700", children: attributes.sample });
    case attributes.data_type === "amalgam":
    case attributes.data_type === "string":
    case attributes.data_type === "string_mixable":
    case attributes.data_type === "formatted_date_time":
      return jsxs49("code", { children: ['"', attributes.sample, '"'] });
    default:
      return jsx114("code", { children: attributes.sample });
  }
};
var FeatureAttributeSampleModal = ({ attributes, onClose }) => {
  const { t: t3 } = useDefaultTranslation2();
  if (!attributes) {
    return null;
  }
  return jsxs49(Modal, { show: true, onClose, dismissible: true, children: [jsx114(Modal.Header, { children: t3("FeatureAttributes.FeatureAttributeSample.modal.title") }), jsx114(Modal.Body, { children: jsx114("pre", { children: jsx114("code", { children: typeof attributes.sample === "string" ? attributes.sample : JSON.stringify(attributes.sample) }) }) })] });
};
var featureAttributeAllowedValuesFieldNominalLabel = "FeatureAttributes.FeatureAttributeAllowedValuesField.label.nominal";
var featureAttributeAllowedValuesFieldOrdinalLabel = "FeatureAttributes.FeatureAttributeAllowedValuesField.label.ordinal";
var featureAttributeAllowedValuesFieldName = "bounds.allowed";
var featureAttributeDateTimeFormatFieldPlaceholder = "%Y-%m-%dT%H:%M:%S";
var FeaturesAttributesContext = createContext20({});
var FeaturesAttributesContextProvider = ({ children, compact: compact2 }) => {
  const buttonProps = useMemo11(() => ({ size: compact2 ? "sm" : void 0 }), [compact2]);
  const fieldCheckboxProps = useMemo11(() => ({
    containerProps: compact2 ? { className: inlineCheckboxClassName } : void 0,
    sizing: compact2 ? compactFieldSize : void 0
  }), [compact2]);
  const fieldRadiosProps = useMemo11(() => ({
    labelInline: compact2,
    labelProps: compact2 ? { className: twMerge(inlineLabelClassName) } : void 0,
    sizing: compact2 ? compactFieldSize : void 0
  }), [compact2]);
  const fieldSelectProps = useMemo11(() => ({
    labelInline: compact2,
    labelProps: compact2 ? { className: twMerge(inlineLabelClassName) } : void 0,
    sizing: compact2 ? compactFieldSize : void 0
  }), [compact2]);
  const fieldTextProps = useMemo11(() => ({
    labelInline: compact2,
    labelProps: compact2 ? { className: twMerge(inlineLabelClassName) } : void 0,
    sizing: compact2 ? compactFieldSize : void 0
  }), [compact2]);
  const fieldTextAreaProps = useMemo11(() => ({
    labelInline: compact2,
    labelProps: compact2 ? { className: twMerge(inlineLabelClassName) } : void 0,
    sizing: compact2 ? compactFieldSize : void 0
  }), [compact2]);
  const fieldStackProps = useMemo11(() => ({
    fieldTextProps: {
      labelInline: compact2,
      labelProps: compact2 ? { className: twMerge(inlineLabelStackFieldClassName) } : void 0,
      sizing: compact2 ? compactFieldSize : void 0
    },
    stackProps: compact2 ? { className: twMerge(inlineLabelStackClassName) } : void 0
  }), [compact2]);
  const groupBaseProps = useMemo11(() => ({
    titleProps: { className: twMerge(compact2 && "text-md") },
    advancedControlProps: { size: compact2 ? "sm" : void 0 },
    sectionProps: { className: twMerge(compact2 && "ml-0") }
  }), [compact2]);
  return jsx114(FeaturesAttributesContext.Provider, { value: {
    buttonProps,
    fieldCheckboxProps,
    fieldRadiosProps,
    fieldSelectProps,
    fieldTextProps,
    fieldStackProps,
    fieldTextAreaProps,
    groupBaseProps
  }, children: jsx114(ErrorBoundary, { children }) });
};
var inlineLabelClassName = "w-40";
var inlineCheckboxClassName = "ml-40 pl-2";
var inlineLabelStackClassName = `[&_div:nth-child(1)_label]:w-40`;
var inlineLabelStackFieldClassName = "";
var compactFieldSize = "sm";
var FeatureAttributeDateTimeFormatField = ({ dataType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const allowedDataTypes = [
    "formatted_date_time"
  ];
  if (!allowedDataTypes.includes(dataType)) {
    return null;
  }
  const required = true;
  return jsx114(FieldText, { label: t3("FeatureAttributes.FeatureAttributeDateTimeFormatField.label"), placeholder: featureAttributeDateTimeFormatFieldPlaceholder, required, ...fieldTextProps, ...props, ...form.register("date_time_format", { required }), helperText: jsxs49(Trans2, { t: t3, i18nKey: "FeatureAttributes.FeatureAttributeDateTimeFormatField.help", children: ["Any valid", jsx114(Link, { href: "https://en.cppreference.com/w/cpp/chrono/system_clock/formatter", target: "_blank", external: true, children: "standard format specification" }), "format."] }) });
};
var FeatureAttributeAllowedValuesField = ({ featureType, dataType, dateTimeFormat = featureAttributeDateTimeFormatFieldPlaceholder, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextAreaProps } = useContext22(FeaturesAttributesContext);
  const allowedFeatureTypes = [
    "nominal",
    "ordinal"
  ];
  const allowedDataTypes = [
    "string",
    "number",
    "formatted_date_time"
  ];
  if (!featureType || !allowedFeatureTypes.includes(featureType) || !allowedDataTypes.includes(dataType)) {
    return null;
  }
  const label = featureType === "ordinal" ? t3(featureAttributeAllowedValuesFieldOrdinalLabel) : t3(featureAttributeAllowedValuesFieldNominalLabel);
  const helperText = featureType === "ordinal" ? t3("FeatureAttributes.FeatureAttributeAllowedValuesField.help.ordinal") : t3("FeatureAttributes.FeatureAttributeAllowedValuesField.help.nominal");
  const placeholder = getPlaceholder({ featureType, dataType, dateTimeFormat });
  return jsx114(FieldTextAreaList, { ...fieldTextAreaProps, name: featureAttributeAllowedValuesFieldName, label, placeholder, helperText, rows: 4, ...props });
};
var getPlaceholder = ({ featureType, dataType, dateTimeFormat }) => {
  switch (true) {
    case dataType === "formatted_date_time":
      return `${dateTimeFormat}
${dateTimeFormat}
${dateTimeFormat}
${dateTimeFormat}`;
    case (featureType === "nominal" && dataType === "string"):
      return `Fibonacci
Pythagoras
Euclid
Albert Einstein
`;
    case (featureType === "nominal" && dataType === "number"):
      return `400
200
350
100
`;
    case (featureType === "ordinal" && dataType === "string"):
      return `xs
sm
md
lg
xl
`;
    case (featureType === "ordinal" && dataType === "number"):
      return `2
3
5
7
11
13
`;
    default:
      return "";
  }
};
var TextareaList = forwardRef34(({ onChange, value, defaultValue, ...props }, ref) => {
  const handleChange = useCallback8((event) => {
    if (onChange) {
      const newValue = event.currentTarget.value;
      const values = newValue ? newValue.split("\n") : [];
      onChange(values);
    }
  }, [onChange]);
  return jsx114(Textarea, { ref, ...props, value: value ? value.join("\n") : void 0, defaultValue: defaultValue ? defaultValue.join("\n") : void 0, onChange: handleChange });
});
var featureAttributeAllowNullsFieldLabel = "FeatureAttributes.FeatureAttributeAllowNullsField.label";
var featureAttributeAllowNullsFieldName = "bounds.allow_null";
var FeatureAttributeAllowNullsField = () => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldCheckboxProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  return jsx114(Controller, { name: featureAttributeAllowNullsFieldName, defaultValue: true, control: form.control, render: ({ field }) => (
    // @ts-expect-error There's a mismatch here I can't solve for
    jsx114(FieldCheckbox, { ...fieldCheckboxProps, ...field, label: t3(featureAttributeAllowNullsFieldLabel), checked: field.value ?? true })
  ) });
};
var FeatureAttributeCycleLengthField = ({ featureType, dataType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const form = useFormContext();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const allowedFeatureTypes = ["continuous"];
  const allowedDataTypes = ["number"];
  if (!allowedFeatureTypes.includes(featureType) || !allowedDataTypes.includes(dataType)) {
    return null;
  }
  return jsx114(FieldText, { ...fieldTextProps, label: t3("FeatureAttributes.FeatureAttributeCycleLengthField.label"), type: "number", step: "1", placeholder: "1; 7; 365", ...props, ...form.register("cycle_length", { min: 0, valueAsNumber: true }), helperText: t3("FeatureAttributes.FeatureAttributeCycleLengthField.help") });
};
var featureAttributeDataTypeFieldLabel = "FeatureAttributes.FeatureAttributeDataTypeField.label";
var FeatureAttributeDataTypeField = ({ featureType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldSelectProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const dataType = form.getValues("data_type");
  const required = true;
  return jsxs49(FieldSelect, { label: t3(featureAttributeDataTypeFieldLabel), required, helperText: jsx114(HelperText$1, { dataType }), ...fieldSelectProps, ...props, ...form.register("data_type", { required }), children: [jsx114("option", { value: "string", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.string") }), jsx114("option", { value: "number", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.number") }), jsx114("option", { value: "formatted_date_time", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.formatted_date_time") }), jsx114("option", { value: "json", disabled: featureType === "ordinal", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.json") }), jsx114("option", { value: "yaml", disabled: featureType === "ordinal", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.yaml") }), jsx114("option", { value: "amalgam", disabled: featureType === "ordinal", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.amalgam") }), jsx114("optgroup", { label: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.groups.continuous"), children: jsx114("option", { value: "string_mixable", disabled: featureType !== "continuous", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.string_mixable") }) }), jsx114("optgroup", { label: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.groups.nominal"), children: jsx114("option", { value: "boolean", disabled: featureType !== "nominal", children: t3("FeatureAttributes.FeatureAttributeDataTypeField.options.boolean") }) })] });
};
var HelperText$1 = ({ dataType }) => {
  const { t: t3 } = useDefaultTranslation2();
  switch (dataType) {
    case "formatted_date_time":
      return t3("FeatureAttributes.FeatureAttributeDataTypeField.help.formattedDateTime");
    default:
      return null;
  }
};
var FeatureAttributeDecimalPlacesField = ({ featureType, dataType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const allowedFeatureTypes = ["continuous"];
  const allowedDataTypes = ["number"];
  if (!allowedFeatureTypes.includes(featureType) || !allowedDataTypes.includes(dataType)) {
    return null;
  }
  return jsx114(FieldText, { ...fieldTextProps, label: t3("FeatureAttributes.FeatureAttributeDecimalPlacesField.label"), type: "number", step: "1", placeholder: "2; 3; 17", ...props, ...form.register("decimal_places", { min: 0, valueAsNumber: true }), helperText: t3("FeatureAttributes.FeatureAttributeDecimalPlacesField.help") });
};
var FeatureAttributeDerivedFeatureCodeField = (props) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextAreaProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  return jsx114(FieldTextArea, { ...fieldTextAreaProps, label: t3("FeatureAttributes.FeatureAttributeDerivedFeatureCodeField.label"), placeholder: `; Simple example: Use the value for feature 'x' from the previously processed row (offset of 1, one lag value).
#x 1
; Complex example: If 'target' feature for this row is 2, return true if 'sepal-length' feature is less than 4.5, otherwise return true.
(if (= #target 0 2)
  (< #sepal-length 0 4.5) ;must be less than 4.5
  (true)
)
`, rows: 7, ...props, className: twMerge("font-mono", props.className), ...form.register("derived_feature_code"), helperText: jsxs49(Trans2, { t: t3, i18nKey: "FeatureAttributes.FeatureAttributeDerivedFeatureCodeField.help", children: [jsx114(Link, { href: "https://howsoai.github.io/amalgam/", target: "_blank", external: true, children: "Amalgam" }), " ", "code..."] }) });
};
var base$3 = "FeatureAttributes.FeatureAttributeTypeField";
var featureAttributeTypeName = "type";
var featureAttributeTypeLabel = `${base$3}.label`;
var featureAttributeTypeOptions = {
  continuous: {
    value: "continuous",
    translations: {
      label: `${base$3}.options.continuous`,
      help: {
        description: `${base$3}.help.continuous.description`,
        example: `${base$3}.help.continuous.example`
      }
    }
  },
  nominal: {
    value: "nominal",
    translations: {
      label: `${base$3}.options.nominal`,
      help: {
        description: `${base$3}.help.nominal.description`,
        example: `${base$3}.help.nominal.example`
      }
    }
  },
  ordinal: {
    value: "ordinal",
    translations: {
      label: `${base$3}.options.ordinal`,
      help: {
        description: `${base$3}.help.ordinal.description`,
        example: `${base$3}.help.ordinal.example`
      }
    }
  }
};
function isEmpty(obj) {
  if (obj == null || isNull(obj))
    return true;
  if (Array.isArray(obj))
    return obj.length === 0;
  return Object.keys(obj).length === 0;
}
function isNull(value) {
  if (value === void 0 || value === null || Number.isNaN(value)) {
    return true;
  }
  if (value instanceof Date && isNaN(value)) {
    return true;
  }
  return false;
}
var isFormDataEmpty = (value) => {
  if (value === "") {
    return true;
  }
  if (isNull(value)) {
    return true;
  }
  if (Array.isArray(value) && !value.length) {
    return true;
  }
  return false;
};
var isFeatureAttributeSensitiveAttributeAvailable = (attributes) => {
  if (!attributes) {
    return false;
  }
  const { type, data_type } = attributes;
  if (type === "continuous") {
    return false;
  }
  switch (data_type) {
    case "boolean":
      return false;
    default:
      return true;
  }
};
var FeatureAttributeIsSensitiveField = ({ featureType, dataType }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldCheckboxProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  if (!isFeatureAttributeSensitiveAttributeAvailable({
    type: featureType,
    data_type: dataType
  })) {
    return null;
  }
  return jsx114(Controller, { name: "non_sensitive", control: form.control, defaultValue: false, render: ({ field: { onChange, value, ...field } }) => (
    // @ts-expect-error Minimal typing differences
    jsx114(FieldCheckbox, { ...fieldCheckboxProps, label: t3("FeatureAttributes.FeatureAttributeIsSensitiveField.label"), ...field, checked: !value, onChange: async (evt) => onChange(!evt.target.checked), helperText: t3("FeatureAttributes.FeatureAttributeIsSensitiveField.help") })
  ) });
};
var featureAttributeIssues = {
  typeUndefined: {
    translationKey: `FeatureAttributes.ConfigurationIssue.typeUndefined`
  },
  dataTypeUndefined: {
    translationKey: `FeatureAttributes.ConfigurationIssue.dataTypeUndefined`
  },
  sensitiveSubtypeUndefined: {
    translationKey: `FeatureAttributes.ConfigurationIssue.sensitiveSubtypeUndefined`
  },
  dateTimeFormatUndefined: {
    translationKey: `FeatureAttributes.ConfigurationIssue.dateTimeFormatUndefined`
  }
};
var getFeatureAttributeConfigurationIssues = (featureAttributes) => {
  const issues = [];
  if (!featureAttributes?.type) {
    issues.push(featureAttributeIssues.typeUndefined);
  }
  if (!featureAttributes?.data_type) {
    issues.push(featureAttributeIssues.dataTypeUndefined);
  }
  if (isFeatureAttributeSensitiveAttributeAvailable(featureAttributes)) {
    const isSensitive = !featureAttributes?.non_sensitive;
    if (isSensitive && !featureAttributes?.subtype) {
      issues.push(featureAttributeIssues.sensitiveSubtypeUndefined);
    }
  }
  if (featureAttributes?.data_type === "formatted_date_time" && !featureAttributes?.date_time_format) {
    issues.push(featureAttributeIssues.sensitiveSubtypeUndefined);
  }
  return issues.length ? issues : void 0;
};
var getFeatureAttributesForType = (attributes) => {
  const isContinuous = attributes?.type === "continuous";
  const data_type = getDataTypeFromFeatureAttributes(attributes);
  return {
    ...attributes,
    // Reset fields on change
    id_feature: isContinuous ? void 0 : attributes?.id_feature,
    data_type,
    decimal_places: data_type === "number" ? attributes?.decimal_places : void 0
  };
};
var getDataTypeFromFeatureAttributes = (attributes) => {
  if (attributes?.data_type) {
    return attributes.data_type;
  }
  if (attributes?.original_type?.data_type) {
    return getDataTypeFromOriginalType(attributes.original_type);
  }
  if (attributes?.type === "continuous") {
    return "number";
  }
  return void 0;
};
var getDataTypeFromOriginalType = (original) => {
  switch (original.data_type) {
    case "integer":
    case "numeric":
      return "number";
    case "boolean":
      return "boolean";
    default:
      return "string";
  }
};
var getInferFeatureAttributeParamsWithFeatureBoundingMode = (params, feature, mode) => {
  const tightBoundsSet = new Set(params.tight_bounds);
  let newParams;
  switch (mode) {
    case "userDefined":
      tightBoundsSet.delete(feature);
      newParams = {
        ...params,
        tight_bounds: Array.from(tightBoundsSet)
        // features: {
        //   ...params.features,
        // TODO, can I find the bounds we had originally somewhere...? Probably in the calculated features...
        // [feature]: getFeatureAttributesCalculatedBounds(
        //   params.features?.[feature]
        // ),
        // },
      };
      break;
    case "tightBounds":
      tightBoundsSet.add(feature);
      newParams = {
        ...params,
        tight_bounds: Array.from(tightBoundsSet),
        features: {
          ...params.features,
          [feature]: getFeatureAttributesUnbound(params.features?.[feature])
        }
      };
      break;
    case "auto":
    case void 0:
      tightBoundsSet.delete(feature);
      newParams = {
        ...params,
        tight_bounds: Array.from(tightBoundsSet),
        features: {
          ...params.features,
          [feature]: getFeatureAttributesUnbound(params.features?.[feature])
        }
      };
      break;
    default:
      throw new Error(`Unhandled bounding mode: ${mode}`);
  }
  return newParams;
};
var getFeatureAttributesBoundingMode = (params, feature) => {
  if (params.tight_bounds?.includes(feature)) {
    return "tightBounds";
  }
  const attributes = params.features?.[feature];
  if (typeof attributes?.bounds?.min === "number" || typeof attributes?.bounds?.max === "number") {
    return "userDefined";
  }
  return "auto";
};
var getFeatureAttributesUnbound = (featureAttributes) => {
  const type = featureAttributes?.type || "continuous";
  const adjustedFeature = {
    ...featureAttributes,
    type
  };
  if (adjustedFeature.bounds) {
    delete adjustedFeature.bounds.max;
    delete adjustedFeature.bounds.min;
  }
  return adjustedFeature;
};
function shouldInferAgain(fields) {
  if (fields == null)
    return false;
  for (const field of Object.keys(fields)) {
    if (field === "bounds")
      continue;
    if (field === "cycle_length")
      continue;
    if (field === "dependent_features")
      continue;
    if (field === "derived_feature_code")
      continue;
    if (field === "post_process")
      continue;
    if (field === "non_sensitive")
      continue;
    if (field === "null_is_dependent")
      continue;
    if (field === "observational_error")
      continue;
    if (field === "original_type")
      continue;
    if (field === "original_format")
      continue;
    return true;
  }
  return false;
}
var getInferFeatureAttributesFromFormData = (data) => {
  const attributes = Object.entries(data).reduce((attributes2, [key, value]) => {
    const skipKeys = [
      "reserved",
      "sample"
    ];
    const keyAs = key;
    if (skipKeys.includes(keyAs)) {
      return attributes2;
    }
    if (isFormDataEmpty(value)) {
      return attributes2;
    }
    attributes2[keyAs] = sanitizeFeatureAttributeValue(value);
    return attributes2;
  }, {});
  if (attributes.time_series) {
    attributes.time_series = Object.entries(attributes.time_series).reduce((attributes2, [key, value]) => {
      if (isFormDataEmpty(value)) {
        return attributes2;
      }
      attributes2[key] = sanitizeFeatureAttributeValue(value);
      return attributes2;
    }, {});
  }
  if (attributes.bounds) {
    attributes.bounds = Object.entries(attributes.bounds).reduce((attributes2, [key, value]) => {
      if (isFormDataEmpty(value)) {
        return attributes2;
      }
      attributes2[key] = sanitizeFeatureAttributeValue(value);
      return attributes2;
    }, {});
  }
  if (!attributes.id_feature || attributes.type === "continuous")
    attributes.id_feature = void 0;
  return attributes;
};
var sanitizeFeatureAttributeValue = (value) => {
  if (typeof value === "string") {
    return value.trim();
  }
  if (Array.isArray(value)) {
    return value.map(sanitizeFeatureAttributeValue);
  }
  return value;
};
var getInferFeatureAttributeParamsFormValuesOnSubmit = ({ data, feature, params }) => {
  const attributes = getInferFeatureAttributesFromFormData(data);
  const paramsUpdatedWithFeatureAttributes = getParamsWithUpdatedFeatureAttributes(params, feature, attributes);
  const paramsWithBoundingMode = getInferFeatureAttributeParamsWithFeatureBoundingMode(paramsUpdatedWithFeatureAttributes, feature, data.reserved?.boundingMode);
  return paramsWithBoundingMode;
};
var getParamsWithUpdatedFeatureAttributes = (params, feature, attributes) => ({
  ...params,
  features: {
    ...params.features,
    [feature]: {
      ...params.features?.[feature],
      ...attributes
    }
  }
});
var FeatureAttributeTypeField = ({ fieldType, onChange, required, ...props }) => {
  const form = useFormContext();
  const registerOptions = useMemo11(() => ({
    required,
    onChange: async (event) => {
      const currentValues = form.getValues();
      const newValues = getFeatureAttributesForType({
        ...currentValues,
        type: event.target.value
      });
      form.setValue("id_feature", newValues.id_feature);
      form.setValue("data_type", newValues.data_type);
      form.setValue("date_time_format", newValues.date_time_format);
      form.setValue("decimal_places", newValues.decimal_places);
      if (onChange) {
        await onChange(event);
      }
    }
  }), [form, required, onChange]);
  switch (fieldType) {
    case "radios":
      return (
        // @ts-expect-error WTB proper infer in 5.5 please.
        jsx114(FieldTypeRadios, { required, ...props, registerOptions })
      );
    case "select":
      return (
        // @ts-expect-error WTB proper infer in 5.5 please.
        jsx114(FieldTypeSelect, { required, ...props, registerOptions })
      );
  }
};
var FieldTypeRadios = ({ required = true, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldRadiosProps } = useContext22(FeaturesAttributesContext);
  return jsx114(FieldRadios, { ...fieldRadiosProps, label: t3(featureAttributeTypeLabel), labelInline: true, ...props, labelProps: {
    ...fieldRadiosProps?.labelProps,
    ...props.labelProps,
    tooltipProps: { content: jsx114(TooltipContents, {}) }
  }, required, name: featureAttributeTypeName, options: Object.values(featureAttributeTypeOptions).map(({ value, translations: translations2 }) => ({
    value,
    text: t3(translations2.label)
  })) });
};
var FieldTypeSelect = ({ required = true, registerOptions, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldSelectProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  return jsxs49(FieldSelect, { ...fieldSelectProps, label: t3(featureAttributeTypeLabel), ...props, labelProps: {
    ...fieldSelectProps?.labelProps,
    ...props.labelProps,
    tooltipProps: { content: jsx114(TooltipContents, {}) }
  }, required, ...form.register(featureAttributeTypeName, registerOptions), children: [jsx114("option", { value: "" }), Object.values(featureAttributeTypeOptions).map(({ value, translations: translations2 }) => jsx114("option", { value, children: t3(translations2.label) }, value))] });
};
var TooltipContents = () => {
  const { t: t3 } = useDefaultTranslation2();
  return jsx114("dl", { children: Object.entries(featureAttributeTypeOptions).filter(([, { translations: translations2 }]) => !!translations2.help).map(([type, { translations: translations2 }], index3) => jsxs49(Fragment$1, { children: [jsx114("dt", { className: twMerge(index3 > 0 && "mt-2"), children: t3(translations2.label) }), jsxs49("dd", { children: [t3(translations2.help.description), " (", t3(translations2.help.example), ")"] })] }, type)) });
};
var FeatureAttributeIdFeatureField = ({ featureType, dataType }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldCheckboxProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const allowedFeatureTypes = ["nominal"];
  const allowedDataTypes = [
    "string",
    "number"
  ];
  if (!featureType || !allowedFeatureTypes.includes(featureType) || !allowedDataTypes.includes(dataType)) {
    return null;
  }
  return jsx114(FieldCheckbox, { ...fieldCheckboxProps, label: t3("FeatureAttributes.FeatureAttributeIdFeatureField.label"), ...form.register("id_feature"), helperText: t3("FeatureAttributes.FeatureAttributeIdFeatureField.help") });
};
var featureAttributeLocaleFieldLabel = "FeatureAttributes.FeatureAttributeLocaleField.label";
var FeatureAttributeLocaleField = ({ dataType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const required = false;
  if (dataType !== "formatted_date_time") {
    return null;
  }
  return jsx114(FieldText, { ...fieldTextProps, type: "text", label: t3(featureAttributeLocaleFieldLabel), placeholder: "en; en_US; zh_CN", required, ...props, ...form.register("locale", { required }), helperText: jsxs49(Trans2, { t: t3, i18nKey: "FeatureAttributes.FeatureAttributeLocaleField.help", children: ["The", jsx114(Link, { href: "https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes", target: "_blank", external: true, children: "ISO-639 Language Code" }), "with optional", jsx114(Link, { href: "https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes", target: "_blank", external: true, children: "ISO-3166 Country Code" }), "..."] }) });
};
var FeatureAttributeMinMaxFields = ({ type, dataType, boundingMode, dateTimeFormat = featureAttributeDateTimeFormatFieldPlaceholder, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldStackProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  if (boundingMode !== "userDefined") {
    return null;
  }
  const isContinuousNumber = type === "continuous" && dataType === "number";
  const isContinuousDateTime = type === "continuous" && dataType === "formatted_date_time";
  if (!isContinuousNumber && !isContinuousDateTime) {
    return null;
  }
  const inputType = isContinuousDateTime ? "text" : "number";
  return jsxs49("div", { ...fieldStackProps?.stackProps, className: twMerge("flex gap-4", fieldStackProps?.stackProps?.className), children: [jsx114(FieldText, { ...fieldStackProps?.fieldTextProps, containerProps: { className: "basis-1/2" }, label: t3("FeatureAttributes.FeatureAttributeMinMaxFields.label.min"), type: inputType, placeholder: isContinuousDateTime ? dateTimeFormat : "-100", ...props, ...form.register("bounds.min", { valueAsNumber: isContinuousNumber }) }), jsx114(FieldText, { ...fieldStackProps?.fieldTextProps, containerProps: { className: "basis-1/2" }, label: t3("FeatureAttributes.FeatureAttributeMinMaxFields.label.max"), type: inputType, placeholder: isContinuousDateTime ? dateTimeFormat : "100", ...props, ...form.register("bounds.max", { valueAsNumber: isContinuousNumber }) })] });
};
var FeatureAttributeNullIsDependentField = ({ dependentFeatures }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldCheckboxProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  if (!dependentFeatures?.length) {
    return null;
  }
  return jsx114(FieldCheckbox, { ...fieldCheckboxProps, label: t3("FeatureAttributes.FeatureAttributeNullIsDependentField.label"), ...form.register("null_is_dependent"), helperText: jsxs49(Fragment20, { children: [t3("FeatureAttributes.FeatureAttributeNullIsDependentField.help.dependencies"), ": ", dependentFeatures.join(", "), jsx114("br", {}), t3("FeatureAttributes.FeatureAttributeNullIsDependentField.help.description")] }) });
};
var translations$4 = {
  label: "FeatureAttributes.FeatureAttributeObservationalErrorField.label",
  help: {
    ordinal: "FeatureAttributes.FeatureAttributeObservationalErrorField.help.ordinal",
    nominal: "FeatureAttributes.FeatureAttributeObservationalErrorField.help.nominal",
    string: "FeatureAttributes.FeatureAttributeObservationalErrorField.help.string",
    default: "FeatureAttributes.FeatureAttributeObservationalErrorField.help.default"
  }
};
var FeatureAttributeObservationalErrorField = ({ featureType, dataType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const max2 = featureType === "nominal" ? 1 : void 0;
  return jsx114(FieldText, { ...fieldTextProps, label: t3(translations$4.label), inputMode: "numeric", placeholder: "0.0", ...props, ...form.register("observational_error", {
    min: 0,
    max: max2,
    valueAsNumber: true
  }), helperText: jsx114(HelperText2, { featureType, dataType }) });
};
var HelperText2 = ({ featureType, dataType }) => {
  const { t: t3 } = useDefaultTranslation2();
  switch (true) {
    case featureType === "ordinal":
      return t3(translations$4.help.ordinal);
    case featureType === "nominal":
      return t3(translations$4.help.nominal);
    case [
      "string",
      "string_mixable",
      "json",
      "yaml",
      "formatted_date_time"
    ].includes(dataType || ""):
      return t3(translations$4.help.string);
    default:
      return t3(translations$4.help.default);
  }
};
var FeatureAttributePostProcessField = (props) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextAreaProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  return jsx114(FieldTextArea, { ...fieldTextAreaProps, label: t3("FeatureAttributes.FeatureAttributePostProcessField.label"), placeholder: `; Simple example: Included standard text prefixing 'target'.
(concat "PROCESSED: " #target 0)
; Complex example: Generate a nickname using 'name' based on 'age' feature.
(if (< #age 0 18) ; If the person is under 18
  (concat "Lil " #name 0) ; Prefix with a Diminutive
  #name 0 ; Don't adjust other names
)`, rows: 7, ...props, ...form.register("post_process"), className: twMerge("font-mono", props.className), helperText: jsxs49(Trans2, { t: t3, i18nKey: "FeatureAttributes.FeatureAttributePostProcessField.help", children: [jsx114(Link, { href: "https://howsoai.github.io/amalgam/", target: "_blank", external: true, children: "Amalgam" }), "code that is called on resulting values of this feature during `react` operations."] }) });
};
var base$2 = "FeatureAttributes.FeatureAttributeReservedBoundingModeField";
var translations$3 = {
  label: `${base$2}.label`,
  options: {
    auto: `${base$2}.options.auto`,
    tightBounds: `${base$2}.options.tightBounds`,
    userDefined: `${base$2}.options.userDefined`
  },
  help: {
    auto: `${base$2}.help.auto`,
    tightBounds: `${base$2}.help.tightBounds`,
    userDefined: `${base$2}.help.userDefined`
  }
};
var options = [
  {
    value: "auto",
    translations: {
      label: translations$3.options.auto,
      help: translations$3.help.auto
    }
  },
  {
    value: "tightBounds",
    translations: {
      label: translations$3.options.tightBounds,
      help: translations$3.help.tightBounds
    }
  },
  {
    value: "userDefined",
    translations: {
      label: translations$3.options.userDefined,
      help: translations$3.help.userDefined
    }
  }
];
var FeatureAttributeReservedBoundingModeField = ({ featureType, dataType, required = true, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldRadiosProps } = useContext22(FeaturesAttributesContext);
  const registerOptions = useMemo11(() => ({
    required
  }), [required]);
  const allowedFeatureTypes = ["continuous"];
  const allowedDataTypes = [
    "number",
    "formatted_date_time"
  ];
  if (!featureType || !allowedFeatureTypes.includes(featureType) || !allowedDataTypes.includes(dataType)) {
    return null;
  }
  return jsx114(FieldRadios, { ...fieldRadiosProps, label: t3(translations$3.label), labelInline: true, ...props, labelProps: {
    ...fieldRadiosProps?.labelProps,
    ...props.labelProps,
    tooltipProps: {
      content: jsx114("dl", { children: options.filter(({ translations: translations2 }) => !!translations2.help).map(({ value, translations: translations2 }, index3) => jsxs49(Fragment$1, { children: [jsx114("dt", { className: twMerge(index3 > 0 && "mt-2"), children: t3(translations2.label) }), jsx114("dd", { children: t3(translations2.help) })] }, value)) })
    }
  }, required, registerOptions, name: "reserved.boundingMode", options: options.map(({ value, translations: translations2 }) => ({
    value,
    text: t3(translations2.label)
  })) });
};
var FeatureAttributeSignificantDigitsField = ({ featureType, dataType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const allowedFeatureTypes = ["continuous"];
  const allowedDataTypes = ["number"];
  if (!allowedFeatureTypes.includes(featureType) || !allowedDataTypes.includes(dataType)) {
    return null;
  }
  return jsx114(FieldText, { ...fieldTextProps, label: t3("FeatureAttributes.FeatureAttributeSignificantDigitsField.label"), type: "number", step: "1", placeholder: "2; 3; 17", ...props, ...form.register("significant_digits", { min: 0, valueAsNumber: true }), helperText: t3("FeatureAttributes.FeatureAttributeSignificantDigitsField.help") });
};
var featureAttributeSubtypeFieldLabel = "FeatureAttributes.FeatureAttributeSubtypeField.label";
var FeatureAttributeSubtypeField = ({ featureType, dataType, nonSensitive, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const subtype = form.getValues("subtype");
  if (featureType === "continuous" || nonSensitive) {
    return null;
  }
  const required = true;
  const isSubtypeValueInOptions = !!dataType && subtypes[dataType] && subtypes[dataType].includes(subtype);
  const isSubtypeCustom = !!subtype && !isSubtypeValueInOptions;
  return jsxs49(FieldSelect, { ...fieldTextProps, required, label: t3(featureAttributeSubtypeFieldLabel), ...props, ...form.register("subtype", { required }), helperText: t3("FeatureAttributes.FeatureAttributeSubtypeField.help"), children: [isSubtypeCustom && jsx114("option", { value: subtype, children: subtype }), dataType && subtypes[dataType].map((subtype2) => jsx114("option", { value: subtype2, children: subtype2 }, subtype2))] });
};
var subtypes = {
  number: [
    "int-id",
    "integer",
    // TODO nominal_substitution_config
    "sliding-win-int-id",
    // TODO nominal_substitution_config
    "seq-int-id"
    // TODO nominal_substitution_config
  ],
  string: [
    "int-id",
    "address",
    "city",
    "company",
    "country",
    // TODO nominal_substitution_config
    "country-code",
    // TODO nominal_substitution_config
    "credit-card-num",
    // TODO nominal_substitution_config
    "email",
    // TODO nominal_substitution_config
    "extended-name",
    // TODO nominal_substitution_config
    "first-name",
    // TODO nominal_substitution_config
    "full-name",
    // TODO nominal_substitution_config
    "gender",
    // TODO nominal_substitution_config
    "last-name",
    // "list",  // TODO required nominal_substitution_config
    //   nominal_substitution_config = {
    //     "features": {
    //         "RAINBOW": {
    //             "substitution": "naive",
    //             "tags": ["red", "orange", "yellow", "green", "blue", "indigo", "violet"]
    //         },
    //         "DOMINANT HAND": {
    //             "substitution": "naive",
    //             "tags": ["right handed", "left handed"],
    //             "weights": [90.0, 10.0]
    //         }
    //     },
    // }
    "phone-number",
    "postcode",
    "ssn",
    // TODO nominal_substitution_config
    "state",
    "state-abbr",
    "street-address",
    "text",
    // TODO nominal_substitution_config
    "us-address-line2",
    "uuid"
  ],
  yaml: ["int-id"],
  json: ["int-id"],
  formatted_date_time: ["int-id"],
  string_mixable: ["int-id"],
  // A TS typing requirement, wont' actually be used.
  boolean: ["int-id"],
  amalgam: ["int-id"]
};
var FeatureAttributeTimeSeriesLagsField = (props) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  return jsx114(FieldTextList, { ...fieldTextProps, name: "time_series.lags", containerProps: { className: "basis-1/2" }, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesLagsField.label"), placeholder: "1,2,3,5,7", valueAsNumber: true, helperText: t3("FeatureAttributes.FeatureAttributeTimeSeriesLagsField.help"), ...props });
};
var FeatureAttributeTimeSeriesDerivedOrdersField = ({ timeSeriesOrder, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  return jsx114(FieldText, { ...fieldTextProps, type: "number", label: t3("FeatureAttributes.FeatureAttributeTimeSeriesDerivedOrdersField.label"), placeholder: "1", ...props, ...form.register("time_series.derived_orders", {
    min: 0,
    valueAsNumber: true
  }), disabled: !!timeSeriesOrder, helperText: t3("FeatureAttributes.FeatureAttributeTimeSeriesDerivedOrdersField.help") });
};
var FeatureAttributeTimeSeriesDeltaMinMaxFields = ({ timeSeriesType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  if (timeSeriesType !== "delta") {
    return null;
  }
  return jsxs49("div", { className: "space-y-1", children: [jsxs49("div", { className: "flex gap-4", children: [jsx114(FieldTextList, { ...fieldTextProps, name: "time_series.delta_min", containerProps: { className: "basis-1/2" }, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesDeltaMinMaxFields.label.min"), placeholder: "-1,-2,-3,-5,-7", valueAsNumber: true, ...props }), jsx114(FieldTextList, { ...fieldTextProps, name: "time_series.delta_max", containerProps: { className: "basis-1/2" }, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesDeltaMinMaxFields.label.max"), placeholder: "1,2,3,5,7", valueAsNumber: true, ...props })] }), jsx114(HelperText, { color: "gray", children: t3("FeatureAttributes.FeatureAttributeTimeSeriesDeltaMinMaxFields.help") })] });
};
var FeatureAttributeTimeSeriesHasTerminatorsField = ({ isIdFeature }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldCheckboxProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  if (!isIdFeature) {
    return null;
  }
  return jsx114(FieldCheckbox, { ...fieldCheckboxProps, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesHasTerminatorsField.label"), ...form.register("time_series.series_has_terminators"), helperText: t3("FeatureAttributes.FeatureAttributeTimeSeriesHasTerminatorsField.help") });
};
var FeatureAttributeTimeSeriesStopOnTerminatorsField = ({ isIdFeature }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldCheckboxProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  if (!isIdFeature) {
    return null;
  }
  return jsx114(FieldCheckbox, { ...fieldCheckboxProps, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesStopOnTerminatorsField.label"), ...form.register("time_series.stop_on_terminator"), helperText: t3("FeatureAttributes.FeatureAttributeTimeSeriesStopOnTerminatorsField.help") });
};
var FeatureAttributeTimeSeriesNumLagsField = ({ timeSeriesLags, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  return jsx114(FieldText, { ...fieldTextProps, type: "number", label: t3("FeatureAttributes.FeatureAttributeTimeSeriesNumLagsField.label"), placeholder: "1", ...props, ...form.register("time_series.num_lags", {
    min: 0,
    valueAsNumber: true
  }), disabled: !!timeSeriesLags?.length, helperText: t3("FeatureAttributes.FeatureAttributeTimeSeriesNumLagsField.help") });
};
var FeatureAttributeTimeSeriesOrderField = (props) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  return jsx114(FieldText, { ...fieldTextProps, type: "number", label: t3("FeatureAttributes.FeatureAttributeTimeSeriesOrderField.label"), placeholder: "1", ...props, ...form.register("time_series.order", { min: 0, valueAsNumber: true }), helperText: t3("FeatureAttributes.FeatureAttributeTimeSeriesOrderField.help") });
};
var FeatureAttributeTimeSeriesRateMinMaxFields = ({ timeSeriesType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldTextProps } = useContext22(FeaturesAttributesContext);
  if (timeSeriesType !== "rate") {
    return null;
  }
  return jsxs49("div", { className: "space-y-1", children: [jsxs49("div", { className: "flex gap-4", children: [jsx114(FieldTextList, { ...fieldTextProps, name: "time_series.rate_min", containerProps: { className: "basis-1/2" }, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesRateMinMaxFields.label.min"), placeholder: "-1,-2,-3,-5,-7", valueAsNumber: true, ...props }), jsx114(FieldTextList, { ...fieldTextProps, name: "time_series.rate_max", containerProps: { className: "basis-1/2" }, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesRateMinMaxFields.label.max"), placeholder: "1,2,3,5,7", valueAsNumber: true, ...props })] }), jsx114(HelperText, { color: "gray", children: t3("FeatureAttributes.FeatureAttributeTimeSeriesRateMinMaxFields.help") })] });
};
var FeatureAttributeTimeSeriesTypeField = ({ featureType, isTimeFeature, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldSelectProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const required = false;
  const rateTypes = ["continuous", "ordinal"];
  const deltaTypes = [
    "continuous",
    "nominal",
    "ordinal"
  ];
  return jsxs49(FieldSelect, { ...fieldSelectProps, label: t3("FeatureAttributes.FeatureAttributeTimeSeriesTypeField.label"), required, ...props, ...form.register("time_series.type", {
    required,
    value: isTimeFeature ? "delta" : "rate"
  }), disabled: isTimeFeature, helperText: t3("FeatureAttributes.FeatureAttributeTimeSeriesTypeField.help"), children: [jsx114("option", { value: "" }), featureType && rateTypes.includes(featureType) && jsx114("option", { value: "rate", children: t3("FeatureAttributes.FeatureAttributeTimeSeriesTypeField.options.rate") }), featureType && deltaTypes.includes(featureType) && jsx114("option", { value: "delta", children: t3("FeatureAttributes.FeatureAttributeTimeSeriesTypeField.options.delta") })] });
};
var FeatureAttributeUniqueField = ({ featureType, dataType }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { fieldCheckboxProps } = useContext22(FeaturesAttributesContext);
  const form = useFormContext();
  const allowedFeatureTypes = ["nominal"];
  const unAllowedDataTypes = ["boolean"];
  if (!featureType || !allowedFeatureTypes.includes(featureType) || unAllowedDataTypes.includes(dataType)) {
    return null;
  }
  return jsx114(FieldCheckbox, { ...fieldCheckboxProps, label: t3("FeatureAttributes.FeatureAttributeUniqueField.label"), ...form.register("unique") });
};
var FeatureAttributesGroupBase = ({ title, sectionProps, basic, advanced, isAdvancedOpen, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { groupBaseProps: contextProps } = useContext22(FeaturesAttributesContext);
  const [isOpen, setIsOpen] = useState24(isAdvancedOpen ?? false);
  return jsxs49("section", { ...props, className: twMerge("border-t border-solid pt-2", formSpacingYDefault, contextProps?.className, props.className), children: [title && jsx114("header", { className: "mb-4 flex items-center justify-between gap-4", children: jsx114("div", { ...contextProps?.titleProps, className: twMerge("text-lg font-medium dark:text-white", contextProps?.titleProps?.className), children: title }) }), basic && jsx114("div", { ...contextProps?.sectionProps, ...sectionProps, className: twMerge(defaultSectionProps, contextProps?.sectionProps?.className, sectionProps?.className), children: basic }), advanced && jsxs49("div", { ...contextProps?.sectionProps, ...sectionProps, className: twMerge(defaultSectionProps, contextProps?.sectionProps?.className, sectionProps?.className), children: [jsx114(ExpandCollapseControl, { ...contextProps?.advancedControlProps, isExpanded: isOpen, className: twMerge("mb-4 p-0 text-sm font-normal", contextProps?.advancedControlProps?.className), fullSized: true, onClick: advanced ? () => {
    setIsOpen((previous) => !previous);
  } : void 0, children: t3("FeatureAttributes.FeatureAttributesGroupBase.expandControl") }), jsx114("div", { className: twMerge("max-h-0 overflow-hidden transition-[max-height] duration-200 ease-in-out", isOpen && "max-h-[99rem]"), children: advanced })] })] });
};
var defaultSectionProps = "ml-7";
var FeatureAttributesBoundsGroup = ({ featureType, dataType, boundingMode, dateTimeFormat, isTimeFeature, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  return jsx114(FeatureAttributesGroupBase, { ...props, title: t3("FeatureAttributes.FeatureAttributesBoundsGroup.title"), basic: jsxs49("div", { className: formSpacingYDefault, children: [jsx114(FeatureAttributeAllowNullsField, {}), jsx114(FeatureAttributeReservedBoundingModeField, { featureType, dataType }), jsx114(FeatureAttributeMinMaxFields, { type: featureType, dataType, boundingMode, dateTimeFormat }), jsx114(FeatureAttributeAllowedValuesField, { featureType, dataType, dateTimeFormat })] }) });
};
var FeatureAttributesContinuousNumbersGroup = ({ featureType, dataType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  const allowedFeatureTypes = ["continuous"];
  const allowedDataTypes = ["number"];
  if (!featureType || !allowedFeatureTypes.includes(featureType) || !allowedDataTypes.includes(dataType)) {
    return null;
  }
  return jsx114(FeatureAttributesGroupBase, { ...props, title: t3("FeatureAttributes.FeatureAttributesContinuousNumbersGroup.title"), advanced: jsxs49("div", { className: formSpacingYDefault, children: [jsx114(FeatureAttributeCycleLengthField, { featureType, dataType }), jsx114(FeatureAttributeSignificantDigitsField, { featureType, dataType }), jsx114(FeatureAttributeDecimalPlacesField, { featureType, dataType })] }) });
};
var FeatureAttributesProgrammableGroup = ({ ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  return jsx114(FeatureAttributesGroupBase, { ...props, title: t3("FeatureAttributes.FeatureAttributesProgrammableGroup.title"), advanced: jsxs49("div", { className: formSpacingYDefault, children: [jsx114(FeatureAttributeDerivedFeatureCodeField, {}), jsx114(FeatureAttributePostProcessField, {})] }) });
};
var translations$2 = {
  title: "FeatureAttributes.FeatureAttributesTemporalityGroup.title"
};
var testId = "FeatureAttributes.FeatureAttributesTemporalityGroup";
var FeatureAttributesTemporalityGroup = ({ featuresHaveTimeFeature, featureType, isIdFeature, isTimeFeature, timeSeriesLags, timeSeriesOrder, timeSeriesType, ...props }) => {
  const { t: t3 } = useDefaultTranslation2();
  if (!featuresHaveTimeFeature) {
    return null;
  }
  return jsx114(FeatureAttributesGroupBase, { ...props, "data-testid": testId, title: t3(translations$2.title), advanced: jsxs49("div", { className: formSpacingYDefault, children: [jsx114(FeatureAttributeTimeSeriesTypeField, { featureType, isTimeFeature }), jsx114(FeatureAttributeTimeSeriesDeltaMinMaxFields, { timeSeriesType }), jsx114(FeatureAttributeTimeSeriesRateMinMaxFields, { timeSeriesType }), !isTimeFeature && jsxs49(Fragment20, { children: [jsx114(FeatureAttributeTimeSeriesOrderField, {}), jsx114(FeatureAttributeTimeSeriesDerivedOrdersField, { timeSeriesOrder })] }), jsx114(FeatureAttributeTimeSeriesLagsField, {}), jsx114(FeatureAttributeTimeSeriesNumLagsField, { timeSeriesLags }), jsx114(FeatureAttributeTimeSeriesHasTerminatorsField, { isIdFeature }), jsx114(FeatureAttributeTimeSeriesStopOnTerminatorsField, { isIdFeature })] }) });
};
var useFormValues = () => {
  const { getValues: getValues2 } = useFormContext();
  return {
    ...useWatch(),
    // subscribe to form value updates
    ...getValues2()
    // always merge with latest form values
  };
};
var FeatureAttributesConfiguration = ({ children, className, featuresHaveTimeFeature }) => {
  const values = useFormValues();
  const { type: featureType, data_type: dataType, id_feature: isIdFeature, date_time_format: dateTimeFormat, dependent_features: dependentFeatures, non_sensitive: nonSensitive, reserved, time_series: timeSeries } = values;
  const isTimeFeature = timeSeries?.time_feature;
  const { boundingMode } = reserved || {};
  return jsxs49("div", { className: twMerge(formSpacingYDefault, className), children: [jsx114(FeatureAttributeTypeField, { fieldType: "radios" }), jsx114(FeatureAttributeDataTypeField, { featureType }), jsx114(FeatureAttributeDateTimeFormatField, { dataType }), jsx114(FeatureAttributeLocaleField, { dataType }), jsx114(FeatureAttributeIsSensitiveField, { featureType, dataType }), jsx114(FeatureAttributeSubtypeField, { featureType, dataType, nonSensitive }), jsx114(FeatureAttributeIdFeatureField, { featureType, dataType }), jsx114(FeatureAttributeUniqueField, { featureType, dataType }), jsx114(FeatureAttributeObservationalErrorField, { featureType, dataType }), jsx114(FeatureAttributesBoundsGroup, { featureType, dataType, boundingMode, dateTimeFormat, isTimeFeature }), jsx114(FeatureAttributeNullIsDependentField, { dependentFeatures }), jsx114(FeatureAttributesTemporalityGroup, { featuresHaveTimeFeature, featureType, isIdFeature, isTimeFeature, timeSeriesLags: timeSeries?.lags, timeSeriesOrder: timeSeries?.order, timeSeriesType: timeSeries?.type }), jsx114(FeatureAttributesContinuousNumbersGroup, { featureType, dataType }), jsx114(FeatureAttributesProgrammableGroup, {}), children] });
};
var FeatureAttributesConfigurationIssues = ({ issues }) => {
  const { t: t3 } = useDefaultTranslation2();
  if (!issues?.length) {
    return null;
  }
  return jsx114("ul", { className: "list-disc list-outside pl-4", children: issues.map((issue) => jsx114("li", { children: t3(issue.translationKey) }, issue.translationKey)) });
};
var MapDependentFeatureAttributesIcon = function(props) {
  return jsx114(HiMap, { ...props });
};
var base$1 = "FeatureAttributes.FeaturesAttributesCompact";
var translations$1 = {
  header: {
    fields: {
      feature: {
        label: `${base$1}.header.fields.feature.label`
      },
      timeFeature: {
        label: `${base$1}.header.fields.timeFeature.label`
      }
    }
  },
  actions: {
    configure: `${base$1}.actions.configure`,
    configureName: `${base$1}.actions.configure_{{name}}`,
    mapDependents: `${base$1}.actions.mapDependents`,
    update: `${base$1}.actions.update`,
    updateAndGoToTarget: `${base$1}.actions.updateAndGoTo_{{target}}`
  },
  form: {
    label: `${base$1}.form.label`
  },
  labels: {
    density: {
      compact: `${base$1}.labels.density.compact`,
      comfortable: `${base$1}.labels.density.comfortable`
    },
    invalidConfiguration: `${base$1}.labels.invalidConfiguration`,
    sample: `${base$1}.labels.sample`
  },
  state: {
    empty: `${base$1}.state.empty`,
    unselected: `${base$1}.state.unselected`
  }
};
var useFeatureAttributesActiveFeatureAtom = (feature = null) => useMemo11(() => getFeatureAttributesActiveFeatureAtom(feature), [feature]);
var getFeatureAttributesActiveFeatureAtom = (feature = null) => atom(feature);
var useInferFeatureAttributesRunRequiredFields = (required = false) => useMemo11(() => getInferFeatureAttributesRunRequiredFields(required), [required]);
var getInferFeatureAttributesRunRequiredFields = (required = false) => atom(required);
var useFeatureAttributesForm = (params, feature) => {
  return useForm({
    defaultValues: getFeatureAttributesFormDefaultValues(params, feature),
    shouldUnregister: true
  });
};
var getFeatureAttributesFormDefaultValues = (params, feature) => {
  const attributes = params.features?.[feature];
  return {
    ...getFeatureAttributesForType(attributes),
    reserved: {
      boundingMode: getFeatureAttributesBoundingMode(params, feature),
      isDateTime: !!attributes?.date_time_format
    }
  };
};
var useInferFeatureAttributesParamsTimeFeatureAtom = ({ paramsAtom, runRequiredAtom }) => useMemo11(() => getInferFeatureAttributesParamsTimeFeatureAtom({
  paramsAtom,
  runRequiredAtom
}), [paramsAtom, runRequiredAtom]);
var getInferFeatureAttributesParamsTimeFeatureAtom = ({ paramsAtom, runRequiredAtom }) => atom((get3) => {
  const params = get3(paramsAtom);
  return getTimeFeature(params);
}, (get3, set2, featureName) => {
  const params = get3(paramsAtom);
  setTimeFeature({
    featureName,
    params,
    setParams: (params2) => set2(paramsAtom, params2),
    setRunRequired: (required) => set2(runRequiredAtom, required)
  });
});
var getTimeFeature = (params) => {
  const features = params?.features || {};
  for (const [name, attributes] of Object.entries(features)) {
    if (attributes?.time_series?.time_feature) {
      return { name, attributes };
    }
  }
};
var setTimeFeature = ({ featureName, params, setParams, setRunRequired }) => {
  const features = { ...params?.features };
  for (const name of Object.keys(params?.features || {})) {
    const attributes = { ...features[name] };
    if (name === featureName) {
      attributes.time_series = {
        ...attributes.time_series,
        time_feature: true
      };
    } else {
      delete attributes.time_series?.time_feature;
      if (isEmpty(attributes.time_series))
        delete attributes.time_series;
    }
    features[name] = attributes;
  }
  setParams({ ...params, features });
  setRunRequired(true);
};
var useInferFeatureAttributesParamsAtom = (params) => useMemo11(() => getInferFeatureAttributesParamsAtom(params), [params]);
var getInferFeatureAttributesParamsAtom = (params) => atomWithReset(params);
var FeaturesAttributesDependencies = (props) => {
  const { t: t3 } = useDefaultTranslation2();
  const [params, setParams] = useAtom(props.paramsAtom);
  const [dependencies, setDependencies] = useState24(getDependencies(params.features || {}));
  const features = Object.keys(params.features || {});
  const [isInfoOpen, setIsInfoOpen] = useState24(false);
  const onUpdate = (event) => {
    event.preventDefault();
    setParams((params2) => {
      const updates = { ...params2 };
      updates.features ||= {};
      Object.keys(updates).forEach((feature) => {
        delete updates.features[feature].dependent_features;
      });
      Object.entries(dependencies).forEach(([key, value]) => {
        if (!value) {
          return;
        }
        const [featureA, featureB] = key.split(":");
        if (featureA === featureB) {
          return;
        }
        updates.features[featureA].dependent_features ||= [];
        updates.features[featureB].dependent_features ||= [];
        updates.features[featureA].dependent_features.push(featureB);
        updates.features[featureB].dependent_features.push(featureA);
      });
      return updates;
    });
    props.onUpdate && props.onUpdate(event);
  };
  return jsxs49(Fragment20, { children: [jsx114(ReadabilityConstraint, { className: "mx-auto", children: jsx114(HelperText, { className: "mb-4", color: "gray", children: t3("FeatureAttributes.FeaturesAttributesDependencies.help") }) }), features.length > 0 ? jsxs49(Fragment20, { children: [jsx114("div", { className: "mb-2 overflow-x-auto", children: jsxs49(Table, { className: "mx-auto w-auto text-gray-700 dark:text-gray-400", striped: true, children: [jsxs49(Table.Head, { className: "text-sm text-inherit", children: [jsx114(TableHeadCell2, { as: "td" }), features.map((feature) => jsx114(Table.HeadCell, { className: "w-[1lh] p-1 align-bottom normal-case", children: jsx114("div", { className: "ml-1 max-h-16 max-w-16 truncate [writing-mode:vertical-rl]", children: feature }) }, feature))] }), jsx114(Table.Body, { children: features.map((featureA, indexA) => jsxs49(Table.Row, { children: [jsx114(TableHeadCell2, { as: "th", className: "p-1 text-right text-sm  text-inherit", children: jsx114("div", { className: "max-w-30 truncate", children: featureA }) }), features.map((featureB, indexB) => {
    const key = indexB < indexA ? `${featureB}:${featureA}` : `${featureA}:${featureB}`;
    return jsx114(Table.Cell, { className: "p-1 text-center *:mx-auto", children: featureA !== featureB && jsx114(Tooltip, { content: [featureA, featureB].join(" and "), children: jsx114(Checkbox, { onChange: (event) => {
      setDependencies((dependencies2) => ({
        ...dependencies2,
        [key]: event.target.checked
      }));
    }, color: "blue", checked: dependencies[key], "data-feature-a": featureA, "data-feature-b": featureB }) }) }, featureB);
  })] }, featureA)) })] }) }), jsxs49(ReadabilityConstraint, { className: "mx-auto", children: [jsxs49("div", { className: "flex justify-between mb-4", children: [jsx114("div", { children: jsx114(ExpandCollapseControl, {
    isExpanded: isInfoOpen,
    // className={twMerge("mb-4 p-0 text-sm font-normal")}
    onClick: () => {
      setIsInfoOpen((previous) => !previous);
    },
    children: t3("FeatureAttributes.FeaturesAttributesDependencies.guidance.expandControl")
  }) }), jsx114("div", { children: jsxs49(PrimaryButton, { disabled: !features.length, onClick: onUpdate, children: [jsx114(UpdateIcon, { className: "mr-1 h-5 w-5" }), jsx114("span", { children: t3("FeatureAttributes.FeaturesAttributesDependencies.actions.update") })] }) })] }), jsx114("div", { children: jsxs49("div", { className: twMerge("max-h-0 overflow-hidden transition-[max-height] duration-200 ease-in-out", isInfoOpen && "max-h-[99rem]"), children: [jsx114(HelperText, { className: "mb-4", color: "gray", children: t3("FeatureAttributes.FeaturesAttributesDependencies.guidance.1") }), jsx114(HelperText, { color: "gray", children: t3("FeatureAttributes.FeaturesAttributesDependencies.guidance.2") })] }) })] })] }) : jsx114(Alert, { color: "warning", icon: WarningIcon, children: t3("FeatureAttributes.FeaturesAttributesDependencies.state.empty") })] });
};
var getDependencies = (featureAttributesIndex) => {
  const features = Object.keys(featureAttributesIndex);
  return features.reduce((dependencies, featureA) => {
    features.forEach((featureB) => {
      const key = `${featureA}:${featureB}`;
      if (dependencies[key]) {
        return;
      }
      dependencies[key] = !!featureAttributesIndex[featureA].dependent_features?.includes(featureB) || !!featureAttributesIndex[featureB].dependent_features?.includes(featureA);
    });
    return dependencies;
  }, {});
};
var FeaturesAttributesCompact = (props) => {
  const { t: t3 } = useDefaultTranslation2();
  const { activeFeatureAtom, paramsAtom, timeFeatureAtom } = props;
  const activeFeature = useAtomValue(activeFeatureAtom);
  const params = useAtomValue(paramsAtom);
  const features = Object.keys(params.features || {});
  const [isMappingOpen, setIsMappingOpen] = useState24(false);
  const [areConfigurationsDirty, setAreConfigurationsDirty] = useState24(false);
  const [isCompact, setIsCompact] = useState24(true);
  return jsxs49(FeaturesAttributesContextProvider, { compact: isCompact, children: [jsx114(Header, {
    activeFeatureAtom,
    areConfigurationsDirty,
    paramsAtom,
    // is compact
    isCompact,
    setIsCompact,
    toggleIsMappingOpen: () => setIsMappingOpen((previous) => !previous),
    timeFeatureAtom
  }), jsx114("hr", { className: "my-4" }), !features.length ? jsx114(Alert, { color: "warning", icon: WarningIcon, children: t3(translations$1.state.empty) }) : isMappingOpen ? jsx114(FeaturesAttributesDependencies, { ...props, onUpdate: () => setIsMappingOpen(false) }) : !activeFeature ? jsx114(Alert, { color: "info", children: t3(translations$1.state.unselected) }) : jsx114(Configuration, { ...props, areConfigurationsDirty, setAreConfigurationsDirty })] });
};
var Header = ({ activeFeatureAtom, areConfigurationsDirty, paramsAtom: inferFeatureAttributesParamsAtom, isCompact, setIsCompact, toggleIsMappingOpen, timeFeatureAtom }) => {
  const { t: t3 } = useDefaultTranslation2();
  const params = useAtomValue(inferFeatureAttributesParamsAtom);
  const featuresAttributes = params.features || {};
  const features = Object.keys(featuresAttributes);
  const [activeFeature, setActiveFeature] = useAtom(activeFeatureAtom);
  const [timeFeature, setTimeFeature2] = useAtom(timeFeatureAtom);
  const form = useForm({
    defaultValues: { feature: features.at(0) }
  });
  return jsxs49("header", { className: "flex flow-row gap-4 justify-between items-end", children: [jsx114("div", { className: "flex gap-4 items-center", children: jsxs49(FormProvider, { ...form, children: [jsxs49(FieldSelect, { required: true, label: t3(translations$1.header.fields.feature.label), labelInline: true, sizing: "sm", name: "feature", onChange: async (event) => {
    setActiveFeature(event.target.value);
  }, value: activeFeature || "", disabled: areConfigurationsDirty || !features.length, children: [jsx114("option", { value: "" }), features.map((feature) => jsx114("option", { value: feature, children: feature }, feature))] }), jsxs49(FieldLabel, { sizing: "sm", children: [jsx114(Checkbox, { color: "blue", disabled: !activeFeature, onChange: async (event) => {
    setTimeFeature2(event.target.checked ? activeFeature : void 0);
  }, checked: activeFeature === timeFeature?.name }), " ", t3(translations$1.header.fields.timeFeature.label)] })] }) }), jsxs49("div", { className: "flex gap-4 items-end", children: [jsxs49(Button, { color: "light", size: "sm", disabled: !features.length, onClick: toggleIsMappingOpen, children: [jsx114(MapDependentFeatureAttributesIcon, { className: "mr-1" }), t3(translations$1.actions.mapDependents)] }), jsxs49(Button.Group, { children: [jsx114(Button, { size: "sm", color: isCompact ? "info" : "gray", onClick: () => setIsCompact(true), children: t3(translations$1.labels.density.compact) }), jsx114(Button, { size: "sm", color: !isCompact ? "info" : "gray", onClick: () => setIsCompact(false), children: t3(translations$1.labels.density.comfortable) })] })] })] });
};
var Configuration = (props) => {
  const { activeFeatureAtom, paramsAtom: inferFeatureAttributesParamsAtom } = props;
  const { t: t3 } = useDefaultTranslation2();
  const theme4 = getTheme();
  const activeFeature = useAtomValue(activeFeatureAtom);
  const params = useAtomValue(inferFeatureAttributesParamsAtom);
  const attributes = activeFeature ? params.features?.[activeFeature] : void 0;
  if (!attributes) {
    throw new Error(`attributes are not defined for ${activeFeature}`);
  }
  const issues = getFeatureAttributeConfigurationIssues(attributes);
  return jsxs49("section", { "data-testid": "configuration-container", children: [jsx114("header", { className: "mb-2 flex gap-4 items-baseline justify-between", children: jsxs49("div", { className: "flex gap-1 items-center", children: [jsx114("h3", { className: "text-lg", children: t3(translations$1.actions.configureName, {
    name: activeFeature
  }) }), issues && jsx114(Tooltip, { content: jsx114(FeatureAttributesConfigurationIssues, { issues }), children: jsx114(WarningIcon, { className: twMerge("ml-1 text-lg", theme4.label.root.colors.warning) }) })] }) }), jsx114(Form$1, { ...props }, activeFeature)] });
};
var Form$1 = ({ areConfigurationsDirty, setAreConfigurationsDirty, activeFeatureAtom, runRequiredAtom, paramsAtom, timeFeatureAtom }) => {
  const { t: t3 } = useDefaultTranslation2();
  const { buttonProps, fieldTextProps } = useContext22(FeaturesAttributesContext);
  const [activeFeature, setActiveFeature] = useAtom(activeFeatureAtom);
  if (!activeFeature) {
    throw new Error("activeFeature is undefined");
  }
  const setRunRequired = useSetAtom(runRequiredAtom);
  const [params, setParams] = useAtom(paramsAtom);
  const features = Object.keys(params.features || {});
  const attributes = params.features?.[activeFeature];
  const timeFeature = useAtomValue(timeFeatureAtom);
  const form = useFeatureAttributesForm(params, activeFeature);
  const { dirtyFields } = form.formState;
  const values = form.getValues();
  useEffect19(() => {
    setAreConfigurationsDirty(
      // Super weird. Unless the values is a dependency, after the first form.reset() dirty fields stop being tracked
      values && Object.keys(dirtyFields).length > 0
    );
  }, [setAreConfigurationsDirty, values, dirtyFields]);
  const nextFeature = features[features.indexOf(activeFeature) + 1];
  const onSave = (data) => {
    save(data);
  };
  const onSaveAndContinue = (data) => {
    save(data);
    setActiveFeature(nextFeature);
  };
  const save = (data) => {
    const newParams = getInferFeatureAttributeParamsFormValuesOnSubmit({
      data,
      feature: activeFeature,
      params
    });
    setParams(newParams);
    if (shouldInferAgain(dirtyFields))
      setRunRequired(true);
    const newDefaults = getFeatureAttributesFormDefaultValues(newParams, activeFeature);
    form.reset(newDefaults);
  };
  return jsxs49(FormProvider, { ...form, children: [attributes?.sample && jsx114(FieldStatic, { ...fieldTextProps, label: t3(translations$1.labels.sample), value: jsx114(FeatureAttributeSample, { attributes, disableModal: true }), containerProps: { className: "mb-6" } }), jsxs49("form", { noValidate: true, "data-feature": activeFeature, "aria-label": t3(translations$1.form.label), children: [jsx114(ErrorBoundary, { children: jsx114(FeatureAttributesConfiguration, { featuresHaveTimeFeature: !!timeFeature }) }), jsxs49("div", { className: "flex grow flex-nowrap items-center justify-end gap-4 overflow-hidden", children: [jsxs49(Button, { ...buttonProps, color: "primary", onClick: form.handleSubmit(onSave), disabled: !areConfigurationsDirty, children: [jsx114(UpdateIcon, { className: "mr-1 h-5 w-5" }), jsx114("span", { children: t3(translations$1.actions.update) })] }), nextFeature && jsxs49(Button, { ...buttonProps, color: "primary", onClick: form.handleSubmit(onSaveAndContinue), disabled: !areConfigurationsDirty, children: [jsx114(UpdateIcon, { className: "mr-1 h-5 w-5" }), jsx114("div", { className: "max-w-60 truncate", children: t3(translations$1.actions.updateAndGoToTarget, {
    target: nextFeature
  }) })] })] })] })] });
};
var base = "FeatureAttributes.FeaturesAttributesRows";
var translations = {
  actions: {
    configure: `${base}.actions.configure`,
    configureName: `${base}.actions.configure_{{name}}`,
    mapDependents: `${base}.actions.mapDependents`,
    update: `${base}.actions.update`,
    updateAndGoToTarget: `${base}.actions.updateAndGoTo_{{target}}`
  },
  headings: {
    configuration: `${base}.headings.configuration`,
    feature: `${base}.headings.feature`,
    sample: `${base}.headings.sample`,
    timeFeature: `${base}.headings.timeFeature`,
    timeSeries: `${base}.headings.timeSeries`
  },
  form: {
    label: `${base}.form.label`
  },
  state: {
    empty: `${base}.state.empty`
  }
};

// node_modules/@howso/howso-engine-react-display-components/lib/public/locales/howso-engine-react-display-components/en.json
var en_default2 = {
  FeatureAttributes: {
    ConfigurationIssue: {
      dataTypeUndefined: "Data type is required",
      dateTimeFormatUndefined: "Formatted date times require Date Time Format",
      sensitiveSubtypeUndefined: "Sensitive attributes require a Subtype for substitution",
      typeUndefined: "Type is required"
    },
    FeatureAttributeAllowedValuesField: {
      help: {
        nominal: "Use a new line for each value.",
        ordinal: "Use a new line for each value. Order matters."
      },
      label: {
        nominal: "Allowed Values in Order",
        ordinal: "Allowed Values"
      }
    },
    FeatureAttributeAllowNullsField: {
      label: "Allow Nulls"
    },
    FeatureAttributeCycleLengthField: {
      help: "Only required if your feature is cyclical, such as days of the week.",
      label: "Cycle Length"
    },
    FeatureAttributeDataTypeField: {
      help: {
        formattedDateTime: "Formatted Date Time supports string based features such as ISO 8601 or your own custom formats. For numeric date times such as epoch numbers, use a Continuous Number."
      },
      label: "Data Type",
      options: {
        amalgam: "Amalgam",
        boolean: "Boolean",
        formatted_date_time: "Formatted Date Time",
        groups: {
          continuous: "Continuous",
          nominal: "Nominal"
        },
        json: "JSON",
        number: "Number",
        string: "String",
        string_mixable: "String Mixable",
        yaml: "YAML"
      }
    },
    FeatureAttributeDateTimeFormatField: {
      help: "Any valid <1>standard format specification</1> format.",
      label: "Date Time Format"
    },
    FeatureAttributeDecimalPlacesField: {
      help: "Round to the specified decimal places. An empty value will result in no rounding. If Significant Digits is also specified, the number will be rounded to the specified number of significant digits first, then rounded to the number of decimal points as specified by this parameter.",
      label: "Decimal Places"
    },
    FeatureAttributeDerivedFeatureCodeField: {
      help: "<0>Amalgam</0> code defining how the value for this feature could be derived if this feature is specified as a `derived_context_feature` or a `derived_action_feature` during `react` flows.",
      label: "Derived Feature Code"
    },
    FeatureAttributeIdFeatureField: {
      help: "Set to true for nominal features containing nominal IDs, specifying that this feature should be used to compute case weights for id based privacy. For time series, this feature will be used as the id for each time series generation.",
      label: "ID Feature"
    },
    FeatureAttributeIsSensitiveField: {
      help: "By default, all data is treated as sensitive, you can change data to be non-sensitive, allowing the values to be re-used in the generation of synthetic data.",
      label: "Sensitive"
    },
    FeatureAttributeLocaleField: {
      help: "The <1>ISO-639 Language Code</1> with optional <3>ISO-3166 Country Code</3>. Locales are used during synthesis. Defaults for the data set will be used if not explicitly defined for this feature. Additional locale options may be specified during synthesis configuration.",
      label: "Locale"
    },
    FeatureAttributeMinMaxFields: {
      label: {
        max: "Max",
        min: "Min"
      }
    },
    FeatureAttributeNullIsDependentField: {
      help: {
        dependencies: "Dependent Features",
        description: "Modify how dependent features with `null`s are treated during a `react`, specifically when they use `null` as a context value. When `false` (default), the feature will be treated as a non-dependent context feature. When `true` for nominal types, treats null as an individual dependent class value, only cases that also have `null`s as this feature's value will be considered. When true for continuous types, only the cases with the same dependent feature values as the cases that also have nulls as this feature's value will be considered."
      },
      label: "Null is Dependent"
    },
    FeatureAttributeObservationalErrorField: {
      help: {
        default: "Specify the mean absolute error for this feature. Defaults to 0.",
        nominal: "Specify known probability (0-1) of misclassification. Defaults to 0.",
        ordinal: "Specify known probability of misclassification through one or more adjacent values. Defaults to 0.",
        string: "Specify known probability (0-1) of misclassification. Defaults to 0."
      },
      label: "Observational Error"
    },
    FeatureAttributePostProcessField: {
      help: "<0>Amalgam</0> code that is called on resulting values of this feature during `react` operations.",
      label: "Post Process Code"
    },
    FeatureAttributeReservedBoundingModeField: {
      help: {
        auto: "Extend the bounds of the feature for synthesis. Best for Privacy.",
        tightBounds: "Use the exact min and max found in the data. Best for Utility.",
        userDefined: "Specify min and max manually (not recommended)."
      },
      label: "Bounding mode",
      options: {
        auto: "Auto",
        tightBounds: "Tight bounds",
        userDefined: "User defined"
      }
    },
    FeatureAttributeReservedTightTimeBoundField: {
      label: "Tight time bounds"
    },
    FeatureAttributeSample: {
      modal: {
        title: "Sample"
      }
    },
    FeatureAttributesBoundsGroup: {
      title: "Bounds"
    },
    FeatureAttributesContinuousNumbersGroup: {
      title: "Continuous Numbers"
    },
    FeatureAttributesGroupBase: {
      expandControl: "Advanced options"
    },
    FeatureAttributeSignificantDigitsField: {
      help: "Round to the specified significant digits. An empty value will result in no rounding.",
      label: "Significant Digits"
    },
    FeatureAttributesProgrammableGroup: {
      title: "Programmatic Features"
    },
    FeatureAttributesTemporalityGroup: {
      title: "Temporality"
    },
    FeatureAttributeSubtypeField: {
      help: "Your platform supports a default list of options. Refer to documentation for creation of a custom subtype.",
      label: "Subtype"
    },
    FeatureAttributeTimeSeriesDeltaMinMaxFields: {
      help: "Constraints for the delta of this feature. No value means no boundary. The length of the list must match the number of derivatives as specified by Order.",
      label: {
        max: "Delta Max",
        min: "Delta Min"
      }
    },
    FeatureAttributeTimeSeriesDerivedOrdersField: {
      help: "The number of orders of derivatives that should be derived instead of synthesized. Ignored if Order is not provided.",
      label: "Derived Orders"
    },
    FeatureAttributeTimeSeriesHasTerminatorsField: {
      help: "Require the model identify and learn values that explicitly denote the end of a series.",
      label: "Series has Terminators"
    },
    FeatureAttributeTimeSeriesLagsField: {
      help: "If specified, generates lag features containing previous values using the enumerated lag offsets. Takes precedence over Number of Lags. If neither Number of Lags nor Lags is specified for a feature, then a single lag feature is generated.",
      label: "Lags"
    },
    FeatureAttributeTimeSeriesNumLagsField: {
      help: "If provided, will generate the specified number of derivatives and boundary values.",
      label: "Number of Lags"
    },
    FeatureAttributeTimeSeriesOrderField: {
      help: "If provided, will generate the specified number of derivatives and boundary values.",
      label: "Order"
    },
    FeatureAttributeTimeSeriesRateMinMaxFields: {
      help: "Constraints for the rate or delta (the difference quotient, the discrete version of derivative) of this feature. A `null` value means no min boundary. The value must be in epoch format for the time feature. The length of the list must match the number of derivatives as specified by order.",
      label: {
        max: "Max",
        min: "Min"
      }
    },
    FeatureAttributeTimeSeriesStopOnTerminatorsField: {
      help: "Require that a series ends on a terminator value.",
      label: "Stop on Terminator"
    },
    FeatureAttributeTimeSeriesTypeField: {
      help: "When `rate` is specified, uses the difference of the current value from its previous value divided by the change in time since the previous value. When `delta` is specified, uses the difference of the current value from its previous value regardless of the elapsed time.",
      label: "Type",
      options: {
        delta: "Delta",
        rate: "Rate"
      }
    },
    FeatureAttributeTypeField: {
      help: {
        continuous: {
          description: "A continuous numeric value.",
          example: "e.g. Temperature or humidity."
        },
        empty: {
          description: "Please select a type to continue."
        },
        nominal: {
          description: "A qualitative representation of something that is not quantitative or ordered.",
          example: "e.g. The name of a fruit."
        },
        ordinal: {
          description: "A nominal value with specific ordering.",
          example: "e.g. Rating scale, 1-5 stars."
        }
      },
      label: "Type",
      options: {
        continuous: "Continuous",
        nominal: "Nominal",
        ordinal: "Ordinal"
      }
    },
    FeatureAttributeUniqueField: {
      label: "Unique"
    },
    FeaturesAttributesCompact: {
      actions: {
        configure: "Configure",
        "configure_{{name}}": "Configure {{name}}",
        mapDependents: "Map dependents",
        update: "Update",
        "updateAndGoTo_{{target}}": "Update & go to: {{target}}"
      },
      form: {
        label: "Configure feature"
      },
      header: {
        fields: {
          feature: {
            label: "Feature"
          },
          timeFeature: {
            label: "Time Feature"
          }
        }
      },
      labels: {
        density: {
          comfortable: "Comfortable",
          compact: "Compact"
        },
        sample: "Sample"
      },
      state: {
        empty: "No features were found in the dataset.",
        unselected: "Please select a feature to configure its attributes"
      }
    },
    FeaturesAttributesDependencies: {
      actions: {
        update: "Update"
      },
      help: "Select features with inter-dependent relationships. This should be used when there are multi-type features that tightly depend on other multi-type features. Setting `null` values may effect dependencies. `Null`s can be managed through the feature's configurations.",
      guidance: {
        expandControl: "More information",
        "1": "Be aware that dependencies introduce further constrains to data and so several dependencies or dependencies on already constrained datasets may restrict which operations are possible while maintaining the dependency. This restricts the cases that can be selected as neighbors to ones that satisfy the dependency, if possible. When not possible, the dependency may not be maintained. ",
        "2": "As a rule of thumb, sets of features that have dependency relationships should generally not include more than 1 continuous feature, unless the continuous features have a small number of values that are commonly used."
      },
      state: {
        empty: "No features were found in the dataset."
      }
    },
    FeaturesAttributesRows: {
      actions: {
        configure: "Configure",
        "configure_{{name}}": "Configure {{name}}",
        mapDependents: "Map dependents",
        update: "Update",
        "updateAndGoTo_{{target}}": "Update & go to: {{target}}"
      },
      form: {
        label: "Configure feature"
      },
      headings: {
        configuration: "Configuration",
        feature: "Feature",
        sample: "Sample",
        timeFeature: "Time feature",
        timeSeries: "Time series",
        type: "Type"
      },
      state: {
        empty: "No features were found in the dataset."
      }
    }
  }
};

// src/il8n.ts
var ns = [
  defaultTranslationNamespace,
  defaultTranslationNamespace2
];
var supportedLngs = ["en"];
var il8n_default = instance.use(initReactI18next).use(Browser).init({
  lng: supportedLngs[0],
  ns,
  interpolation: { escapeValue: false },
  // react: { useSuspense: true },
  supportedLngs,
  resources: {
    en: {
      [defaultTranslationNamespace]: en_default,
      [defaultTranslationNamespace2]: en_default2
    }
  }
});

// src/theme.ts
var theme3 = {
  ...standardFlowbiteTheme
};
var theme_default = theme3;

// src/Providers.tsx
import { jsx as jsx115 } from "react/jsx-runtime";
var Providers = ({
  children,
  themeMode = "auto"
}) => {
  try {
    localStorage.removeItem("flowbite-theme-mode");
  } finally {
  }
  return /* @__PURE__ */ jsx115(Flowbite, { theme: { theme: theme_default, mode: themeMode }, children });
};

// src/FeatureAttributes/FeaturesAttributesControl/FeaturesAttributesControl.tsx
import { useEffect as useEffect20 } from "react";
import { jsx as jsx116 } from "react/jsx-runtime";
var FeaturesAttributesControl = ({
  value: unknownValue,
  setValue: setJSONValue
}) => {
  const runRequiredAtom = useInferFeatureAttributesRunRequiredFields();
  const activeFeatureAtom = useFeatureAttributesActiveFeatureAtom();
  const paramsAtom = useInferFeatureAttributesParamsAtom(emptyObject);
  const timeFeatureAtom = useInferFeatureAttributesParamsTimeFeatureAtom({
    paramsAtom,
    runRequiredAtom
  });
  const [params, setParams] = useAtom(paramsAtom);
  useEffect20(() => {
    if (typeof unknownValue !== "string") {
      throw new Error(`Unhandled value: ${unknownValue}`);
    }
    const params2 = JSON.parse(unknownValue);
    setParams(params2);
  }, [unknownValue, setParams]);
  useEffect20(() => {
    setJSONValue(JSON.stringify(params));
  }, [params, setJSONValue]);
  return /* @__PURE__ */ jsx116("div", { className: "dark:text-white", children: /* @__PURE__ */ jsx116(
    FeaturesAttributesCompact,
    {
      runRequiredAtom,
      activeFeatureAtom,
      paramsAtom,
      timeFeatureAtom
    }
  ) });
};
var emptyObject = {};

// src/Index.tsx
import { jsx as jsx117 } from "react/jsx-runtime";
var Index = ({ themeMode = "auto", ...props }) => /* @__PURE__ */ jsx117(Providers, { themeMode, children: /* @__PURE__ */ jsx117("div", { className: "p-2 dark:bg-slate-800 dark:[color-scheme:dark]", children: /* @__PURE__ */ jsx117(Switch, { ...props }) }) });
var Index_default = Index;
var Switch = ({ control, ...props }) => {
  switch (control) {
    case "FeaturesAttributesControl":
      return /* @__PURE__ */ jsx117(FeaturesAttributesControl, { ...props });
    default:
      throw new Error(`Unhandled control: ${control}`);
  }
};
export {
  Index_default as default
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/

typeof document<'u'&&document.head.appendChild(document.createElement('style')).appendChild(document.createTextNode("/* temp_stylePlugin:src/styles.css */\n*,\n::before,\n::after {\n  box-sizing: border-box;\n  border-width: 0;\n  border-style: solid;\n  border-color: #E5E7EB;\n}\n::before,\n::after {\n  --tw-content: \"\";\n}\nhtml,\n:host {\n  line-height: 1.5;\n  -webkit-text-size-adjust: 100%;\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n  font-family:\n    ui-sans-serif,\n    system-ui,\n    sans-serif,\n    \"Apple Color Emoji\",\n    \"Segoe UI Emoji\",\n    \"Segoe UI Symbol\",\n    \"Noto Color Emoji\";\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n  -webkit-tap-highlight-color: transparent;\n}\nbody {\n  margin: 0;\n  line-height: inherit;\n}\nhr {\n  height: 0;\n  color: inherit;\n  border-top-width: 1px;\n}\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n  text-decoration: underline dotted;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\na {\n  color: inherit;\n  text-decoration: inherit;\n}\nb,\nstrong {\n  font-weight: bolder;\n}\ncode,\nkbd,\nsamp,\npre {\n  font-family:\n    ui-monospace,\n    SFMono-Regular,\n    Menlo,\n    Monaco,\n    Consolas,\n    \"Liberation Mono\",\n    \"Courier New\",\n    monospace;\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n  font-size: 1em;\n}\nsmall {\n  font-size: 80%;\n}\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nsub {\n  bottom: -0.25em;\n}\nsup {\n  top: -0.5em;\n}\ntable {\n  text-indent: 0;\n  border-color: inherit;\n  border-collapse: collapse;\n}\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  font-feature-settings: inherit;\n  font-variation-settings: inherit;\n  font-size: 100%;\n  font-weight: inherit;\n  line-height: inherit;\n  letter-spacing: inherit;\n  color: inherit;\n  margin: 0;\n  padding: 0;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\ninput:where([type=button]),\ninput:where([type=reset]),\ninput:where([type=submit]) {\n  -webkit-appearance: button;\n  background-color: transparent;\n  background-image: none;\n}\n:-moz-focusring {\n  outline: auto;\n}\n:-moz-ui-invalid {\n  box-shadow: none;\n}\nprogress {\n  vertical-align: baseline;\n}\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n[type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\nsummary {\n  display: list-item;\n}\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\nfieldset {\n  margin: 0;\n  padding: 0;\n}\nlegend {\n  padding: 0;\n}\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\ndialog {\n  padding: 0;\n}\ntextarea {\n  resize: vertical;\n}\ninput::-moz-placeholder,\ntextarea::-moz-placeholder {\n  opacity: 1;\n  color: #9CA3AF;\n}\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  color: #9CA3AF;\n}\nbutton,\n[role=button] {\n  cursor: pointer;\n}\n:disabled {\n  cursor: default;\n}\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  vertical-align: middle;\n}\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n[hidden] {\n  display: none;\n}\n[data-tooltip-style^=light] + .tooltip > .tooltip-arrow:before {\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n[data-tooltip-style^=light] + .tooltip[data-popper-placement^=top] > .tooltip-arrow:before {\n  border-bottom-width: 1px;\n  border-right-width: 1px;\n}\n[data-tooltip-style^=light] + .tooltip[data-popper-placement^=right] > .tooltip-arrow:before {\n  border-bottom-width: 1px;\n  border-left-width: 1px;\n}\n[data-tooltip-style^=light] + .tooltip[data-popper-placement^=bottom] > .tooltip-arrow:before {\n  border-top-width: 1px;\n  border-left-width: 1px;\n}\n[data-tooltip-style^=light] + .tooltip[data-popper-placement^=left] > .tooltip-arrow:before {\n  border-top-width: 1px;\n  border-right-width: 1px;\n}\n.tooltip[data-popper-placement^=top] > .tooltip-arrow {\n  bottom: -4px;\n}\n.tooltip[data-popper-placement^=bottom] > .tooltip-arrow {\n  top: -4px;\n}\n.tooltip[data-popper-placement^=left] > .tooltip-arrow {\n  right: -4px;\n}\n.tooltip[data-popper-placement^=right] > .tooltip-arrow {\n  left: -4px;\n}\n.tooltip.invisible > .tooltip-arrow:before {\n  visibility: hidden;\n}\n[data-popper-arrow],\n[data-popper-arrow]:before {\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: inherit;\n}\n[data-popper-arrow] {\n  visibility: hidden;\n}\n[data-popper-arrow]:before {\n  content: \"\";\n  visibility: visible;\n  transform: rotate(45deg);\n}\n[data-popper-arrow]:after {\n  content: \"\";\n  visibility: visible;\n  transform: rotate(45deg);\n  position: absolute;\n  width: 9px;\n  height: 9px;\n  background: inherit;\n}\n[role=tooltip] > [data-popper-arrow]:before {\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n.dark [role=tooltip] > [data-popper-arrow]:before {\n  border-style: solid;\n  border-color: #4b5563;\n}\n[role=tooltip] > [data-popper-arrow]:after {\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n.dark [role=tooltip] > [data-popper-arrow]:after {\n  border-style: solid;\n  border-color: #4b5563;\n}\n[data-popover][role=tooltip][data-popper-placement^=top] > [data-popper-arrow]:before {\n  border-bottom-width: 1px;\n  border-right-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=top] > [data-popper-arrow]:after {\n  border-bottom-width: 1px;\n  border-right-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=right] > [data-popper-arrow]:before {\n  border-bottom-width: 1px;\n  border-left-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=right] > [data-popper-arrow]:after {\n  border-bottom-width: 1px;\n  border-left-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=bottom] > [data-popper-arrow]:before {\n  border-top-width: 1px;\n  border-left-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=bottom] > [data-popper-arrow]:after {\n  border-top-width: 1px;\n  border-left-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=left] > [data-popper-arrow]:before {\n  border-top-width: 1px;\n  border-right-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=left] > [data-popper-arrow]:after {\n  border-top-width: 1px;\n  border-right-width: 1px;\n}\n[data-popover][role=tooltip][data-popper-placement^=top] > [data-popper-arrow] {\n  bottom: -5px;\n}\n[data-popover][role=tooltip][data-popper-placement^=bottom] > [data-popper-arrow] {\n  top: -5px;\n}\n[data-popover][role=tooltip][data-popper-placement^=left] > [data-popper-arrow] {\n  right: -5px;\n}\n[data-popover][role=tooltip][data-popper-placement^=right] > [data-popper-arrow] {\n  left: -5px;\n}\n[role=tooltip].invisible > [data-popper-arrow]:before {\n  visibility: hidden;\n}\n[role=tooltip].invisible > [data-popper-arrow]:after {\n  visibility: hidden;\n}\n[type=text],\n[type=email],\n[type=url],\n[type=password],\n[type=number],\n[type=date],\n[type=datetime-local],\n[type=month],\n[type=search],\n[type=tel],\n[type=time],\n[type=week],\n[multiple],\ntextarea,\nselect {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background-color: #fff;\n  border-color: #6B7280;\n  border-width: 1px;\n  border-radius: 0px;\n  padding-top: 0.5rem;\n  padding-right: 0.75rem;\n  padding-bottom: 0.5rem;\n  padding-left: 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5rem;\n  --tw-shadow: 0 0 #0000;\n}\n[type=text]:focus,\n[type=email]:focus,\n[type=url]:focus,\n[type=password]:focus,\n[type=number]:focus,\n[type=date]:focus,\n[type=datetime-local]:focus,\n[type=month]:focus,\n[type=search]:focus,\n[type=tel]:focus,\n[type=time]:focus,\n[type=week]:focus,\n[multiple]:focus,\ntextarea:focus,\nselect:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-inset: var(--tw-empty, );\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: #1C64F2;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow);\n  border-color: #1C64F2;\n}\ninput::-moz-placeholder,\ntextarea::-moz-placeholder {\n  color: #6B7280;\n  opacity: 1;\n}\ninput::placeholder,\ntextarea::placeholder {\n  color: #6B7280;\n  opacity: 1;\n}\n::-webkit-datetime-edit-fields-wrapper {\n  padding: 0;\n}\n::-webkit-date-and-time-value {\n  min-height: 1.5em;\n}\nselect:not([size]) {\n  background-image: url(\"data:image/svg+xml,%3csvg aria-hidden='true' xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 10 6'%3e %3cpath stroke='%236B7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 1 4 4 4-4'/%3e %3c/svg%3e\");\n  background-position: right 0.75rem center;\n  background-repeat: no-repeat;\n  background-size: 0.75em 0.75em;\n  padding-right: 2.5rem;\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n}\n:is([dir=rtl]) select:not([size]) {\n  background-position: left 0.75rem center;\n  padding-right: 0.75rem;\n  padding-left: 0;\n}\n[multiple] {\n  background-image: initial;\n  background-position: initial;\n  background-repeat: unset;\n  background-size: initial;\n  padding-right: 0.75rem;\n  -webkit-print-color-adjust: unset;\n  print-color-adjust: unset;\n}\n[type=checkbox],\n[type=radio] {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  padding: 0;\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n  display: inline-block;\n  vertical-align: middle;\n  background-origin: border-box;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  flex-shrink: 0;\n  height: 1rem;\n  width: 1rem;\n  color: #1C64F2;\n  background-color: #fff;\n  border-color: #6B7280;\n  border-width: 1px;\n  --tw-shadow: 0 0 #0000;\n}\n[type=checkbox] {\n  border-radius: 0px;\n}\n[type=radio] {\n  border-radius: 100%;\n}\n[type=checkbox]:focus,\n[type=radio]:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-inset: var(--tw-empty, );\n  --tw-ring-offset-width: 2px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: #1C64F2;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow);\n}\n[type=checkbox]:checked,\n[type=radio]:checked,\n.dark [type=checkbox]:checked,\n.dark [type=radio]:checked {\n  border-color: transparent;\n  background-color: currentColor;\n  background-size: 0.55em 0.55em;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n[type=checkbox]:checked {\n  background-image: url(\"data:image/svg+xml,%3csvg aria-hidden='true' xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 16 12'%3e %3cpath stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M1 5.917 5.724 10.5 15 1.5'/%3e %3c/svg%3e\");\n  background-repeat: no-repeat;\n  background-size: 0.55em 0.55em;\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n}\n[type=radio]:checked {\n  background-image: url(\"data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='8' cy='8' r='3'/%3e%3c/svg%3e\");\n  background-size: 1em 1em;\n}\n.dark [type=radio]:checked {\n  background-image: url(\"data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='8' cy='8' r='3'/%3e%3c/svg%3e\");\n  background-size: 1em 1em;\n}\n[type=checkbox]:indeterminate {\n  background-image: url(\"data:image/svg+xml,%3csvg aria-hidden='true' xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 16 12'%3e %3cpath stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M0.5 6h14'/%3e %3c/svg%3e\");\n  background-color: currentColor;\n  border-color: transparent;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 0.55em 0.55em;\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n}\n[type=checkbox]:indeterminate:hover,\n[type=checkbox]:indeterminate:focus {\n  border-color: transparent;\n  background-color: currentColor;\n}\n[type=file] {\n  background: unset;\n  border-color: inherit;\n  border-width: 0;\n  border-radius: 0;\n  padding: 0;\n  font-size: unset;\n  line-height: inherit;\n}\n[type=file]:focus {\n  outline: 1px auto inherit;\n}\ninput[type=file]::file-selector-button {\n  color: white;\n  background: #1F2937;\n  border: 0;\n  font-weight: 500;\n  font-size: 0.875rem;\n  cursor: pointer;\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n  padding-left: 2rem;\n  padding-right: 1rem;\n  margin-inline-start: -1rem;\n  margin-inline-end: 1rem;\n}\ninput[type=file]::file-selector-button:hover {\n  background: #374151;\n}\n:is([dir=rtl]) input[type=file]::file-selector-button {\n  padding-right: 2rem;\n  padding-left: 1rem;\n}\n.dark input[type=file]::file-selector-button {\n  color: white;\n  background: #4B5563;\n}\n.dark input[type=file]::file-selector-button:hover {\n  background: #6B7280;\n}\ninput[type=range]::-webkit-slider-thumb {\n  height: 1.25rem;\n  width: 1.25rem;\n  background: #1C64F2;\n  border-radius: 9999px;\n  border: 0;\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  cursor: pointer;\n}\ninput[type=range]:disabled::-webkit-slider-thumb {\n  background: #9CA3AF;\n}\n.dark input[type=range]:disabled::-webkit-slider-thumb {\n  background: #6B7280;\n}\ninput[type=range]:focus::-webkit-slider-thumb {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n  --tw-ring-opacity: 1px;\n  --tw-ring-color: rgb(164 202 254 / var(--tw-ring-opacity));\n}\ninput[type=range]::-moz-range-thumb {\n  height: 1.25rem;\n  width: 1.25rem;\n  background: #1C64F2;\n  border-radius: 9999px;\n  border: 0;\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  cursor: pointer;\n}\ninput[type=range]:disabled::-moz-range-thumb {\n  background: #9CA3AF;\n}\n.dark input[type=range]:disabled::-moz-range-thumb {\n  background: #6B7280;\n}\ninput[type=range]::-moz-range-progress {\n  background: #3F83F8;\n}\ninput[type=range]::-ms-fill-lower {\n  background: #3F83F8;\n}\n*,\n::before,\n::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(63 131 248 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(63 131 248 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n.container {\n  width: 100%;\n}\n@media (min-width: 640px) {\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n  .container {\n    max-width: 1536px;\n  }\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n.pointer-events-none {\n  pointer-events: none;\n}\n.invisible {\n  visibility: hidden;\n}\n.collapse {\n  visibility: collapse;\n}\n.static {\n  position: static;\n}\n.fixed {\n  position: fixed;\n}\n.absolute {\n  position: absolute;\n}\n.relative {\n  position: relative;\n}\n.inset-0 {\n  inset: 0px;\n}\n.inset-x-0 {\n  left: 0px;\n  right: 0px;\n}\n.inset-y-0 {\n  top: 0px;\n  bottom: 0px;\n}\n.-bottom-1 {\n  bottom: -0.25rem;\n}\n.-left-1 {\n  left: -0.25rem;\n}\n.-left-1\\.5 {\n  left: -0.375rem;\n}\n.-left-3 {\n  left: -0.75rem;\n}\n.-right-1 {\n  right: -0.25rem;\n}\n.-top-1 {\n  top: -0.25rem;\n}\n.bottom-0 {\n  bottom: 0px;\n}\n.bottom-16 {\n  bottom: 4rem;\n}\n.bottom-5 {\n  bottom: 1.25rem;\n}\n.end-2 {\n  inset-inline-end: 0.5rem;\n}\n.end-2\\.5 {\n  inset-inline-end: 0.625rem;\n}\n.left-0 {\n  left: 0px;\n}\n.left-1 {\n  left: 0.25rem;\n}\n.left-1\\/2 {\n  left: 50%;\n}\n.left-2 {\n  left: 0.5rem;\n}\n.left-2\\.5 {\n  left: 0.625rem;\n}\n.left-3 {\n  left: 0.75rem;\n}\n.left-4 {\n  left: 1rem;\n}\n.left-5 {\n  left: 1.25rem;\n}\n.left-6 {\n  left: 1.5rem;\n}\n.right-0 {\n  right: 0px;\n}\n.top-0 {\n  top: 0px;\n}\n.top-1\\/2 {\n  top: 50%;\n}\n.top-10 {\n  top: 2.5rem;\n}\n.top-2 {\n  top: 0.5rem;\n}\n.top-2\\.5 {\n  top: 0.625rem;\n}\n.top-3 {\n  top: 0.75rem;\n}\n.top-4 {\n  top: 1rem;\n}\n.top-\\[1px\\] {\n  top: 1px;\n}\n.-z-10 {\n  z-index: -10;\n}\n.z-0 {\n  z-index: 0;\n}\n.z-10 {\n  z-index: 10;\n}\n.z-20 {\n  z-index: 20;\n}\n.z-30 {\n  z-index: 30;\n}\n.z-40 {\n  z-index: 40;\n}\n.z-50 {\n  z-index: 50;\n}\n.z-auto {\n  z-index: auto;\n}\n.float-right {\n  float: right;\n}\n.-m-1 {\n  margin: -0.25rem;\n}\n.-m-1\\.5 {\n  margin: -0.375rem;\n}\n.mx-1 {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n.mx-4 {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.my-1 {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n.my-4 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n.my-6 {\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n.my-8 {\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n.\\!mt-0 {\n  margin-top: 0px !important;\n}\n.-mb-px {\n  margin-bottom: -1px;\n}\n.mb-1 {\n  margin-bottom: 0.25rem;\n}\n.mb-10 {\n  margin-bottom: 2.5rem;\n}\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\n.mb-4 {\n  margin-bottom: 1rem;\n}\n.mb-5 {\n  margin-bottom: 1.25rem;\n}\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\n.me-1 {\n  margin-inline-end: 0.25rem;\n}\n.me-1\\.5 {\n  margin-inline-end: 0.375rem;\n}\n.me-2 {\n  margin-inline-end: 0.5rem;\n}\n.me-2\\.5 {\n  margin-inline-end: 0.625rem;\n}\n.me-4 {\n  margin-inline-end: 1rem;\n}\n.ml-0 {\n  margin-left: 0px;\n}\n.ml-1 {\n  margin-left: 0.25rem;\n}\n.ml-2 {\n  margin-left: 0.5rem;\n}\n.ml-3 {\n  margin-left: 0.75rem;\n}\n.ml-40 {\n  margin-left: 10rem;\n}\n.ml-6 {\n  margin-left: 1.5rem;\n}\n.ml-7 {\n  margin-left: 1.75rem;\n}\n.ml-\\[\\.25ch\\] {\n  margin-left: .25ch;\n}\n.ml-auto {\n  margin-left: auto;\n}\n.mr-1 {\n  margin-right: 0.25rem;\n}\n.mr-2 {\n  margin-right: 0.5rem;\n}\n.mr-3 {\n  margin-right: 0.75rem;\n}\n.ms-3 {\n  margin-inline-start: 0.75rem;\n}\n.mt-0 {\n  margin-top: 0px;\n}\n.mt-0\\.5 {\n  margin-top: 0.125rem;\n}\n.mt-1 {\n  margin-top: 0.25rem;\n}\n.mt-1\\.5 {\n  margin-top: 0.375rem;\n}\n.mt-2 {\n  margin-top: 0.5rem;\n}\n.mt-3 {\n  margin-top: 0.75rem;\n}\n.mt-4 {\n  margin-top: 1rem;\n}\n.mt-6 {\n  margin-top: 1.5rem;\n}\n.block {\n  display: block;\n}\n.inline-block {\n  display: inline-block;\n}\n.\\!inline {\n  display: inline !important;\n}\n.inline {\n  display: inline;\n}\n.flex {\n  display: flex;\n}\n.inline-flex {\n  display: inline-flex;\n}\n.table {\n  display: table;\n}\n.grid {\n  display: grid;\n}\n.hidden {\n  display: none;\n}\n.h-0 {\n  height: 0px;\n}\n.h-0\\.5 {\n  height: 0.125rem;\n}\n.h-1 {\n  height: 0.25rem;\n}\n.h-1\\.5 {\n  height: 0.375rem;\n}\n.h-10 {\n  height: 2.5rem;\n}\n.h-2 {\n  height: 0.5rem;\n}\n.h-2\\.5 {\n  height: 0.625rem;\n}\n.h-20 {\n  height: 5rem;\n}\n.h-3 {\n  height: 0.75rem;\n}\n.h-3\\.5 {\n  height: 0.875rem;\n}\n.h-36 {\n  height: 9rem;\n}\n.h-4 {\n  height: 1rem;\n}\n.h-5 {\n  height: 1.25rem;\n}\n.h-6 {\n  height: 1.5rem;\n}\n.h-7 {\n  height: 1.75rem;\n}\n.h-8 {\n  height: 2rem;\n}\n.h-9 {\n  height: 2.25rem;\n}\n.h-96 {\n  height: 24rem;\n}\n.h-auto {\n  height: auto;\n}\n.h-fit {\n  height: -moz-fit-content;\n  height: fit-content;\n}\n.h-full {\n  height: 100%;\n}\n.h-px {\n  height: 1px;\n}\n.h-screen {\n  height: 100vh;\n}\n.max-h-0 {\n  max-height: 0px;\n}\n.max-h-16 {\n  max-height: 4rem;\n}\n.max-h-\\[50vh\\] {\n  max-height: 50vh;\n}\n.max-h-\\[90dvh\\] {\n  max-height: 90dvh;\n}\n.max-h-\\[99rem\\] {\n  max-height: 99rem;\n}\n.max-h-full {\n  max-height: 100%;\n}\n.min-h-12 {\n  min-height: 3rem;\n}\n.min-h-\\[\\.9lh\\] {\n  min-height: .9lh;\n}\n.min-h-\\[1lh\\] {\n  min-height: 1lh;\n}\n.w-1\\/2 {\n  width: 50%;\n}\n.w-10 {\n  width: 2.5rem;\n}\n.w-11 {\n  width: 2.75rem;\n}\n.w-12 {\n  width: 3rem;\n}\n.w-14 {\n  width: 3.5rem;\n}\n.w-16 {\n  width: 4rem;\n}\n.w-2 {\n  width: 0.5rem;\n}\n.w-2\\/4 {\n  width: 50%;\n}\n.w-20 {\n  width: 5rem;\n}\n.w-3 {\n  width: 0.75rem;\n}\n.w-3\\.5 {\n  width: 0.875rem;\n}\n.w-36 {\n  width: 9rem;\n}\n.w-4 {\n  width: 1rem;\n}\n.w-40 {\n  width: 10rem;\n}\n.w-48 {\n  width: 12rem;\n}\n.w-5 {\n  width: 1.25rem;\n}\n.w-6 {\n  width: 1.5rem;\n}\n.w-64 {\n  width: 16rem;\n}\n.w-7 {\n  width: 1.75rem;\n}\n.w-8 {\n  width: 2rem;\n}\n.w-80 {\n  width: 20rem;\n}\n.w-9 {\n  width: 2.25rem;\n}\n.w-\\[1\\%\\] {\n  width: 1%;\n}\n.w-\\[1lh\\] {\n  width: 1lh;\n}\n.w-auto {\n  width: auto;\n}\n.w-fit {\n  width: -moz-fit-content;\n  width: fit-content;\n}\n.w-full {\n  width: 100%;\n}\n.w-max {\n  width: -moz-max-content;\n  width: max-content;\n}\n.min-w-11 {\n  min-width: 2.75rem;\n}\n.min-w-14 {\n  min-width: 3.5rem;\n}\n.min-w-32 {\n  min-width: 8rem;\n}\n.min-w-48 {\n  min-width: 12rem;\n}\n.min-w-9 {\n  min-width: 2.25rem;\n}\n.min-w-\\[1ch\\] {\n  min-width: 1ch;\n}\n.max-w-16 {\n  max-width: 4rem;\n}\n.max-w-2xl {\n  max-width: 42rem;\n}\n.max-w-3xl {\n  max-width: 48rem;\n}\n.max-w-4xl {\n  max-width: 56rem;\n}\n.max-w-52 {\n  max-width: 13rem;\n}\n.max-w-5xl {\n  max-width: 64rem;\n}\n.max-w-60 {\n  max-width: 15rem;\n}\n.max-w-6xl {\n  max-width: 72rem;\n}\n.max-w-7xl {\n  max-width: 80rem;\n}\n.max-w-\\[100vw\\] {\n  max-width: 100vw;\n}\n.max-w-\\[65em\\] {\n  max-width: 65em;\n}\n.max-w-full {\n  max-width: 100%;\n}\n.max-w-lg {\n  max-width: 32rem;\n}\n.max-w-md {\n  max-width: 28rem;\n}\n.max-w-sm {\n  max-width: 24rem;\n}\n.max-w-xl {\n  max-width: 36rem;\n}\n.max-w-xs {\n  max-width: 20rem;\n}\n.flex-1 {\n  flex: 1 1 0%;\n}\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\n.shrink-0 {\n  flex-shrink: 0;\n}\n.grow {\n  flex-grow: 1;\n}\n.basis-1\\/2 {\n  flex-basis: 50%;\n}\n.origin-\\[0\\] {\n  transform-origin: 0;\n}\n.-translate-x-1\\/2 {\n  --tw-translate-x: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.-translate-x-full {\n  --tw-translate-x: -100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.-translate-y-1\\/2 {\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.-translate-y-4 {\n  --tw-translate-y: -1rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.-translate-y-6 {\n  --tw-translate-y: -1.5rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.-translate-y-full {\n  --tw-translate-y: -100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-x-full {\n  --tw-translate-x: 100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-y-full {\n  --tw-translate-y: 100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.rotate-180 {\n  --tw-rotate: 180deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.rotate-45 {\n  --tw-rotate: 45deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.scale-75 {\n  --tw-scale-x: .75;\n  --tw-scale-y: .75;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.transform {\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.transform-none {\n  transform: none;\n}\n@keyframes pulse {\n  50% {\n    opacity: .5;\n  }\n}\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n.cursor-default {\n  cursor: default;\n}\n.cursor-grab {\n  cursor: grab;\n}\n.cursor-not-allowed {\n  cursor: not-allowed;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n.cursor-wait {\n  cursor: wait;\n}\n.resize {\n  resize: both;\n}\n.snap-x {\n  scroll-snap-type: x var(--tw-scroll-snap-strictness);\n}\n.snap-mandatory {\n  --tw-scroll-snap-strictness: mandatory;\n}\n.snap-center {\n  scroll-snap-align: center;\n}\n.list-inside {\n  list-style-position: inside;\n}\n.list-outside {\n  list-style-position: outside;\n}\n.list-decimal {\n  list-style-type: decimal;\n}\n.list-disc {\n  list-style-type: disc;\n}\n.list-none {\n  list-style-type: none;\n}\n.appearance-none {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n.grid-flow-col {\n  grid-auto-flow: column;\n}\n.grid-cols-4 {\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n}\n.grid-cols-7 {\n  grid-template-columns: repeat(7, minmax(0, 1fr));\n}\n.flex-row {\n  flex-direction: row;\n}\n.flex-col {\n  flex-direction: column;\n}\n.flex-wrap {\n  flex-wrap: wrap;\n}\n.flex-nowrap {\n  flex-wrap: nowrap;\n}\n.items-start {\n  align-items: flex-start;\n}\n.items-end {\n  align-items: flex-end;\n}\n.items-center {\n  align-items: center;\n}\n.items-baseline {\n  align-items: baseline;\n}\n.items-stretch {\n  align-items: stretch;\n}\n.justify-start {\n  justify-content: flex-start;\n}\n.justify-end {\n  justify-content: flex-end;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.gap-1 {\n  gap: 0.25rem;\n}\n.gap-1\\.5 {\n  gap: 0.375rem;\n}\n.gap-2 {\n  gap: 0.5rem;\n}\n.gap-3 {\n  gap: 0.75rem;\n}\n.gap-4 {\n  gap: 1rem;\n}\n.gap-6 {\n  gap: 1.5rem;\n}\n.gap-x-2 {\n  -moz-column-gap: 0.5rem;\n  column-gap: 0.5rem;\n}\n.-space-x-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(-1rem * var(--tw-space-x-reverse));\n  margin-left: calc(-1rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.-space-x-px > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(-1px * var(--tw-space-x-reverse));\n  margin-left: calc(-1px * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-3 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.75rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1rem * var(--tw-space-x-reverse));\n  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-0 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0px * var(--tw-space-y-reverse));\n}\n.space-y-1 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.25rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.25rem * var(--tw-space-y-reverse));\n}\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\n}\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1rem * var(--tw-space-y-reverse));\n}\n.space-y-6 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));\n}\n.divide-x > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-x-reverse: 0;\n  border-right-width: calc(1px * var(--tw-divide-x-reverse));\n  border-left-width: calc(1px * calc(1 - var(--tw-divide-x-reverse)));\n}\n.divide-y > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-y-reverse: 0;\n  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n}\n.divide-gray-100 > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgb(243 244 246 / var(--tw-divide-opacity));\n}\n.divide-gray-200 > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-divide-opacity));\n}\n.self-center {\n  align-self: center;\n}\n.overflow-auto {\n  overflow: auto;\n}\n.overflow-hidden {\n  overflow: hidden;\n}\n.overflow-x-auto {\n  overflow-x: auto;\n}\n.overflow-y-auto {\n  overflow-y: auto;\n}\n.\\!overflow-x-hidden {\n  overflow-x: hidden !important;\n}\n.overflow-x-hidden {\n  overflow-x: hidden;\n}\n.overflow-y-hidden {\n  overflow-y: hidden;\n}\n.overflow-x-scroll {\n  overflow-x: scroll;\n}\n.\\!scroll-auto {\n  scroll-behavior: auto !important;\n}\n.scroll-smooth {\n  scroll-behavior: smooth;\n}\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.text-ellipsis {\n  text-overflow: ellipsis;\n}\n.whitespace-nowrap {\n  white-space: nowrap;\n}\n.whitespace-pre {\n  white-space: pre;\n}\n.text-wrap {\n  text-wrap: wrap;\n}\n.rounded {\n  border-radius: 0.25rem;\n}\n.rounded-\\[7px\\] {\n  border-radius: 7px;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-md {\n  border-radius: 0.375rem;\n}\n.rounded-none {\n  border-radius: 0px;\n}\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n.rounded-b {\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n.rounded-e-lg {\n  border-start-end-radius: 0.5rem;\n  border-end-end-radius: 0.5rem;\n}\n.rounded-l-lg {\n  border-top-left-radius: 0.5rem;\n  border-bottom-left-radius: 0.5rem;\n}\n.rounded-l-md {\n  border-top-left-radius: 0.375rem;\n  border-bottom-left-radius: 0.375rem;\n}\n.rounded-l-none {\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\n.rounded-r-lg {\n  border-top-right-radius: 0.5rem;\n  border-bottom-right-radius: 0.5rem;\n}\n.rounded-r-none {\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n}\n.rounded-s-lg {\n  border-start-start-radius: 0.5rem;\n  border-end-start-radius: 0.5rem;\n}\n.rounded-t {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n.rounded-t-lg {\n  border-top-left-radius: 0.5rem;\n  border-top-right-radius: 0.5rem;\n}\n.border {\n  border-width: 1px;\n}\n.border-0 {\n  border-width: 0px;\n}\n.border-2 {\n  border-width: 2px;\n}\n.border-b {\n  border-bottom-width: 1px;\n}\n.border-b-0 {\n  border-bottom-width: 0px;\n}\n.border-b-2 {\n  border-bottom-width: 2px;\n}\n.border-l {\n  border-left-width: 1px;\n}\n.border-l-0 {\n  border-left-width: 0px;\n}\n.border-r-0 {\n  border-right-width: 0px;\n}\n.border-t {\n  border-top-width: 1px;\n}\n.border-t-4 {\n  border-top-width: 4px;\n}\n.border-solid {\n  border-style: solid;\n}\n.border-blue-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(63 131 248 / var(--tw-border-opacity));\n}\n.border-cyan-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(103 232 249 / var(--tw-border-opacity));\n}\n.border-cyan-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(6 182 212 / var(--tw-border-opacity));\n}\n.border-cyan-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(8 145 178 / var(--tw-border-opacity));\n}\n.border-cyan-700 {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 116 144 / var(--tw-border-opacity));\n}\n.border-gray-100 {\n  --tw-border-opacity: 1;\n  border-color: rgb(243 244 246 / var(--tw-border-opacity));\n}\n.border-gray-200 {\n  --tw-border-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\n}\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n.border-gray-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(156 163 175 / var(--tw-border-opacity));\n}\n.border-gray-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(107 114 128 / var(--tw-border-opacity));\n}\n.border-gray-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\n.border-gray-900 {\n  --tw-border-opacity: 1;\n  border-color: rgb(17 24 39 / var(--tw-border-opacity));\n}\n.border-green-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(132 225 188 / var(--tw-border-opacity));\n}\n.border-green-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 159 110 / var(--tw-border-opacity));\n}\n.border-green-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(5 122 85 / var(--tw-border-opacity));\n}\n.border-green-700 {\n  --tw-border-opacity: 1;\n  border-color: rgb(4 108 78 / var(--tw-border-opacity));\n}\n.border-indigo-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(180 198 252 / var(--tw-border-opacity));\n}\n.border-indigo-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(141 162 251 / var(--tw-border-opacity));\n}\n.border-indigo-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(104 117 245 / var(--tw-border-opacity));\n}\n.border-lime-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(190 242 100 / var(--tw-border-opacity));\n}\n.border-lime-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(163 230 53 / var(--tw-border-opacity));\n}\n.border-lime-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(132 204 22 / var(--tw-border-opacity));\n}\n.border-pink-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(248 180 217 / var(--tw-border-opacity));\n}\n.border-pink-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(231 70 148 / var(--tw-border-opacity));\n}\n.border-pink-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(214 31 105 / var(--tw-border-opacity));\n}\n.border-purple-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(144 97 249 / var(--tw-border-opacity));\n}\n.border-purple-900 {\n  --tw-border-opacity: 1;\n  border-color: rgb(74 29 150 / var(--tw-border-opacity));\n}\n.border-red-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(248 180 180 / var(--tw-border-opacity));\n}\n.border-red-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(240 82 82 / var(--tw-border-opacity));\n}\n.border-red-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(224 36 36 / var(--tw-border-opacity));\n}\n.border-red-900 {\n  --tw-border-opacity: 1;\n  border-color: rgb(119 29 29 / var(--tw-border-opacity));\n}\n.border-teal-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(126 220 226 / var(--tw-border-opacity));\n}\n.border-teal-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(6 148 162 / var(--tw-border-opacity));\n}\n.border-transparent {\n  border-color: transparent;\n}\n.border-white {\n  --tw-border-opacity: 1;\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n.border-yellow-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(250 202 21 / var(--tw-border-opacity));\n}\n.border-yellow-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(227 160 8 / var(--tw-border-opacity));\n}\n.border-yellow-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(194 120 3 / var(--tw-border-opacity));\n}\n.border-yellow-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(159 88 10 / var(--tw-border-opacity));\n}\n.\\!bg-transparent {\n  background-color: transparent !important;\n}\n.bg-blue-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(225 239 254 / var(--tw-bg-opacity));\n}\n.bg-blue-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(28 100 242 / var(--tw-bg-opacity));\n}\n.bg-blue-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(26 86 219 / var(--tw-bg-opacity));\n}\n.bg-cyan-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(207 250 254 / var(--tw-bg-opacity));\n}\n.bg-cyan-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(165 243 252 / var(--tw-bg-opacity));\n}\n.bg-cyan-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(236 254 255 / var(--tw-bg-opacity));\n}\n.bg-cyan-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(6 182 212 / var(--tw-bg-opacity));\n}\n.bg-cyan-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(8 145 178 / var(--tw-bg-opacity));\n}\n.bg-cyan-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(14 116 144 / var(--tw-bg-opacity));\n}\n.bg-gray-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n.bg-gray-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(156 163 175 / var(--tw-bg-opacity));\n}\n.bg-gray-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\n.bg-gray-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n.bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.bg-gray-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n.bg-gray-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n.bg-gray-900 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\n.bg-gray-900\\/50 {\n  background-color: rgb(17 24 39 / 0.5);\n}\n.bg-green-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(222 247 236 / var(--tw-bg-opacity));\n}\n.bg-green-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(49 196 141 / var(--tw-bg-opacity));\n}\n.bg-green-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 250 247 / var(--tw-bg-opacity));\n}\n.bg-green-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(14 159 110 / var(--tw-bg-opacity));\n}\n.bg-green-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(5 122 85 / var(--tw-bg-opacity));\n}\n.bg-green-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(4 108 78 / var(--tw-bg-opacity));\n}\n.bg-indigo-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 237 255 / var(--tw-bg-opacity));\n}\n.bg-indigo-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(141 162 251 / var(--tw-bg-opacity));\n}\n.bg-indigo-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(88 80 236 / var(--tw-bg-opacity));\n}\n.bg-lime-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(236 252 203 / var(--tw-bg-opacity));\n}\n.bg-lime-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(163 230 53 / var(--tw-bg-opacity));\n}\n.bg-lime-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(101 163 13 / var(--tw-bg-opacity));\n}\n.bg-pink-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(252 232 243 / var(--tw-bg-opacity));\n}\n.bg-pink-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(231 70 148 / var(--tw-bg-opacity));\n}\n.bg-pink-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(214 31 105 / var(--tw-bg-opacity));\n}\n.bg-primary-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(26 86 219 / var(--tw-bg-opacity));\n}\n.bg-purple-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(237 235 254 / var(--tw-bg-opacity));\n}\n.bg-purple-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(246 245 255 / var(--tw-bg-opacity));\n}\n.bg-purple-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(126 58 242 / var(--tw-bg-opacity));\n}\n.bg-purple-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(108 43 217 / var(--tw-bg-opacity));\n}\n.bg-red-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 232 232 / var(--tw-bg-opacity));\n}\n.bg-red-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 128 128 / var(--tw-bg-opacity));\n}\n.bg-red-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 242 242 / var(--tw-bg-opacity));\n}\n.bg-red-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(224 36 36 / var(--tw-bg-opacity));\n}\n.bg-red-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(200 30 30 / var(--tw-bg-opacity));\n}\n.bg-teal-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(213 245 246 / var(--tw-bg-opacity));\n}\n.bg-teal-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(4 116 129 / var(--tw-bg-opacity));\n}\n.bg-transparent {\n  background-color: transparent;\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.bg-white\\/30 {\n  background-color: rgb(255 255 255 / 0.3);\n}\n.bg-white\\/50 {\n  background-color: rgb(255 255 255 / 0.5);\n}\n.bg-yellow-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 246 178 / var(--tw-bg-opacity));\n}\n.bg-yellow-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(227 160 8 / var(--tw-bg-opacity));\n}\n.bg-yellow-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 253 234 / var(--tw-bg-opacity));\n}\n.bg-yellow-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(159 88 10 / var(--tw-bg-opacity));\n}\n.bg-opacity-50 {\n  --tw-bg-opacity: 0.5;\n}\n.bg-gradient-to-br {\n  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));\n}\n.bg-gradient-to-r {\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\n}\n.from-cyan-400 {\n  --tw-gradient-from: #22d3ee var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(34 211 238 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-cyan-500 {\n  --tw-gradient-from: #06b6d4 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(6 182 212 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-green-400 {\n  --tw-gradient-from: #31C48D var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(49 196 141 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-lime-200 {\n  --tw-gradient-from: #d9f99d var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(217 249 157 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-pink-400 {\n  --tw-gradient-from: #F17EB8 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(241 126 184 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-pink-500 {\n  --tw-gradient-from: #E74694 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(231 70 148 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-purple-500 {\n  --tw-gradient-from: #9061F9 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(144 97 249 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-purple-600 {\n  --tw-gradient-from: #7E3AF2 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(126 58 242 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-red-200 {\n  --tw-gradient-from: #FBD5D5 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(251 213 213 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-red-400 {\n  --tw-gradient-from: #F98080 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(249 128 128 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-teal-200 {\n  --tw-gradient-from: #AFECEF var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(175 236 239 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.from-teal-400 {\n  --tw-gradient-from: #16BDCA var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(22 189 202 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.via-cyan-500 {\n  --tw-gradient-to: rgb(6 182 212 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #06b6d4 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-cyan-600 {\n  --tw-gradient-to: rgb(8 145 178 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #0891b2 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-green-500 {\n  --tw-gradient-to: rgb(14 159 110 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #0E9F6E var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-lime-400 {\n  --tw-gradient-to: rgb(163 230 53 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #a3e635 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-pink-500 {\n  --tw-gradient-to: rgb(231 70 148 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #E74694 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-purple-600 {\n  --tw-gradient-to: rgb(126 58 242 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #7E3AF2 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-red-300 {\n  --tw-gradient-to: rgb(248 180 180 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #F8B4B4 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-red-500 {\n  --tw-gradient-to: rgb(240 82 82 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #F05252 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.via-teal-500 {\n  --tw-gradient-to: rgb(6 148 162 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops:\n    var(--tw-gradient-from),\n    #0694A2 var(--tw-gradient-via-position),\n    var(--tw-gradient-to);\n}\n.to-cyan-500 {\n  --tw-gradient-to: #06b6d4 var(--tw-gradient-to-position);\n}\n.to-cyan-600 {\n  --tw-gradient-to: #0891b2 var(--tw-gradient-to-position);\n}\n.to-cyan-700 {\n  --tw-gradient-to: #0e7490 var(--tw-gradient-to-position);\n}\n.to-green-600 {\n  --tw-gradient-to: #057A55 var(--tw-gradient-to-position);\n}\n.to-lime-200 {\n  --tw-gradient-to: #d9f99d var(--tw-gradient-to-position);\n}\n.to-lime-500 {\n  --tw-gradient-to: #84cc16 var(--tw-gradient-to-position);\n}\n.to-orange-400 {\n  --tw-gradient-to: #FF8A4C var(--tw-gradient-to-position);\n}\n.to-pink-500 {\n  --tw-gradient-to: #E74694 var(--tw-gradient-to-position);\n}\n.to-pink-600 {\n  --tw-gradient-to: #D61F69 var(--tw-gradient-to-position);\n}\n.to-purple-700 {\n  --tw-gradient-to: #6C2BD9 var(--tw-gradient-to-position);\n}\n.to-red-600 {\n  --tw-gradient-to: #E02424 var(--tw-gradient-to-position);\n}\n.to-teal-600 {\n  --tw-gradient-to: #047481 var(--tw-gradient-to-position);\n}\n.to-yellow-200 {\n  --tw-gradient-to: #FCE96A var(--tw-gradient-to-position);\n}\n.fill-current {\n  fill: currentColor;\n}\n.fill-cyan-600 {\n  fill: #0891b2;\n}\n.fill-gray-600 {\n  fill: #4B5563;\n}\n.fill-green-500 {\n  fill: #0E9F6E;\n}\n.fill-pink-600 {\n  fill: #D61F69;\n}\n.fill-purple-600 {\n  fill: #7E3AF2;\n}\n.fill-red-600 {\n  fill: #E02424;\n}\n.fill-yellow-400 {\n  fill: #E3A008;\n}\n.object-cover {\n  -o-object-fit: cover;\n  object-fit: cover;\n}\n.p-0 {\n  padding: 0px;\n}\n.p-0\\.5 {\n  padding: 0.125rem;\n}\n.p-1 {\n  padding: 0.25rem;\n}\n.p-1\\.5 {\n  padding: 0.375rem;\n}\n.p-2 {\n  padding: 0.5rem;\n}\n.p-2\\.5 {\n  padding: 0.625rem;\n}\n.p-4 {\n  padding: 1rem;\n}\n.p-5 {\n  padding: 1.25rem;\n}\n.p-6 {\n  padding: 1.5rem;\n}\n.px-0 {\n  padding-left: 0px;\n  padding-right: 0px;\n}\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n.px-2\\.5 {\n  padding-left: 0.625rem;\n  padding-right: 0.625rem;\n}\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n.py-0 {\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n.py-0\\.5 {\n  padding-top: 0.125rem;\n  padding-bottom: 0.125rem;\n}\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n.py-1\\.5 {\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.py-2\\.5 {\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n}\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n.py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n.pb-2 {\n  padding-bottom: 0.5rem;\n}\n.pb-2\\.5 {\n  padding-bottom: 0.625rem;\n}\n.pl-0 {\n  padding-left: 0px;\n}\n.pl-0\\.5 {\n  padding-left: 0.125rem;\n}\n.pl-10 {\n  padding-left: 2.5rem;\n}\n.pl-12 {\n  padding-left: 3rem;\n}\n.pl-16 {\n  padding-left: 4rem;\n}\n.pl-2 {\n  padding-left: 0.5rem;\n}\n.pl-2\\.5 {\n  padding-left: 0.625rem;\n}\n.pl-20 {\n  padding-left: 5rem;\n}\n.pl-3 {\n  padding-left: 0.75rem;\n}\n.pl-4 {\n  padding-left: 1rem;\n}\n.pl-8 {\n  padding-left: 2rem;\n}\n.pr-10 {\n  padding-right: 2.5rem;\n}\n.pr-3 {\n  padding-right: 0.75rem;\n}\n.pr-4 {\n  padding-right: 1rem;\n}\n.ps-5 {\n  padding-inline-start: 1.25rem;\n}\n.pt-0 {\n  padding-top: 0px;\n}\n.pt-2 {\n  padding-top: 0.5rem;\n}\n.pt-4 {\n  padding-top: 1rem;\n}\n.pt-5 {\n  padding-top: 1.25rem;\n}\n.text-left {\n  text-align: left;\n}\n.text-center {\n  text-align: center;\n}\n.text-right {\n  text-align: right;\n}\n.text-start {\n  text-align: start;\n}\n.align-middle {\n  vertical-align: middle;\n}\n.align-bottom {\n  vertical-align: bottom;\n}\n.font-mono {\n  font-family:\n    ui-monospace,\n    SFMono-Regular,\n    Menlo,\n    Monaco,\n    Consolas,\n    \"Liberation Mono\",\n    \"Courier New\",\n    monospace;\n}\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.font-bold {\n  font-weight: 700;\n}\n.font-medium {\n  font-weight: 500;\n}\n.font-normal {\n  font-weight: 400;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.uppercase {\n  text-transform: uppercase;\n}\n.normal-case {\n  text-transform: none;\n}\n.italic {\n  font-style: italic;\n}\n.ordinal {\n  --tw-ordinal: ordinal;\n  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction);\n}\n.leading-6 {\n  line-height: 1.5rem;\n}\n.leading-9 {\n  line-height: 2.25rem;\n}\n.leading-none {\n  line-height: 1;\n}\n.leading-tight {\n  line-height: 1.25;\n}\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(63 131 248 / var(--tw-text-opacity));\n}\n.text-blue-600 {\n  --tw-text-opacity: 1;\n  color: rgb(28 100 242 / var(--tw-text-opacity));\n}\n.text-blue-700 {\n  --tw-text-opacity: 1;\n  color: rgb(26 86 219 / var(--tw-text-opacity));\n}\n.text-blue-800 {\n  --tw-text-opacity: 1;\n  color: rgb(30 66 159 / var(--tw-text-opacity));\n}\n.text-cyan-300 {\n  --tw-text-opacity: 1;\n  color: rgb(103 232 249 / var(--tw-text-opacity));\n}\n.text-cyan-500 {\n  --tw-text-opacity: 1;\n  color: rgb(6 182 212 / var(--tw-text-opacity));\n}\n.text-cyan-600 {\n  --tw-text-opacity: 1;\n  color: rgb(8 145 178 / var(--tw-text-opacity));\n}\n.text-cyan-700 {\n  --tw-text-opacity: 1;\n  color: rgb(14 116 144 / var(--tw-text-opacity));\n}\n.text-cyan-800 {\n  --tw-text-opacity: 1;\n  color: rgb(21 94 117 / var(--tw-text-opacity));\n}\n.text-cyan-900 {\n  --tw-text-opacity: 1;\n  color: rgb(22 78 99 / var(--tw-text-opacity));\n}\n.text-gray-100 {\n  --tw-text-opacity: 1;\n  color: rgb(243 244 246 / var(--tw-text-opacity));\n}\n.text-gray-200 {\n  --tw-text-opacity: 1;\n  color: rgb(229 231 235 / var(--tw-text-opacity));\n}\n.text-gray-300 {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\n.text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n.text-gray-800 {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n.text-green-500 {\n  --tw-text-opacity: 1;\n  color: rgb(14 159 110 / var(--tw-text-opacity));\n}\n.text-green-600 {\n  --tw-text-opacity: 1;\n  color: rgb(5 122 85 / var(--tw-text-opacity));\n}\n.text-green-700 {\n  --tw-text-opacity: 1;\n  color: rgb(4 108 78 / var(--tw-text-opacity));\n}\n.text-green-800 {\n  --tw-text-opacity: 1;\n  color: rgb(3 84 63 / var(--tw-text-opacity));\n}\n.text-green-900 {\n  --tw-text-opacity: 1;\n  color: rgb(1 71 55 / var(--tw-text-opacity));\n}\n.text-indigo-500 {\n  --tw-text-opacity: 1;\n  color: rgb(104 117 245 / var(--tw-text-opacity));\n}\n.text-indigo-700 {\n  --tw-text-opacity: 1;\n  color: rgb(81 69 205 / var(--tw-text-opacity));\n}\n.text-indigo-800 {\n  --tw-text-opacity: 1;\n  color: rgb(66 56 157 / var(--tw-text-opacity));\n}\n.text-indigo-900 {\n  --tw-text-opacity: 1;\n  color: rgb(54 47 120 / var(--tw-text-opacity));\n}\n.text-inherit {\n  color: inherit;\n}\n.text-lime-500 {\n  --tw-text-opacity: 1;\n  color: rgb(132 204 22 / var(--tw-text-opacity));\n}\n.text-lime-700 {\n  --tw-text-opacity: 1;\n  color: rgb(77 124 15 / var(--tw-text-opacity));\n}\n.text-lime-800 {\n  --tw-text-opacity: 1;\n  color: rgb(63 98 18 / var(--tw-text-opacity));\n}\n.text-lime-900 {\n  --tw-text-opacity: 1;\n  color: rgb(54 83 20 / var(--tw-text-opacity));\n}\n.text-orange-500 {\n  --tw-text-opacity: 1;\n  color: rgb(255 90 31 / var(--tw-text-opacity));\n}\n.text-pink-500 {\n  --tw-text-opacity: 1;\n  color: rgb(231 70 148 / var(--tw-text-opacity));\n}\n.text-pink-600 {\n  --tw-text-opacity: 1;\n  color: rgb(214 31 105 / var(--tw-text-opacity));\n}\n.text-pink-700 {\n  --tw-text-opacity: 1;\n  color: rgb(191 18 93 / var(--tw-text-opacity));\n}\n.text-pink-800 {\n  --tw-text-opacity: 1;\n  color: rgb(153 21 75 / var(--tw-text-opacity));\n}\n.text-pink-900 {\n  --tw-text-opacity: 1;\n  color: rgb(117 26 61 / var(--tw-text-opacity));\n}\n.text-primary-500 {\n  --tw-text-opacity: 1;\n  color: rgb(63 131 248 / var(--tw-text-opacity));\n}\n.text-primary-600 {\n  --tw-text-opacity: 1;\n  color: rgb(28 100 242 / var(--tw-text-opacity));\n}\n.text-purple-500 {\n  --tw-text-opacity: 1;\n  color: rgb(144 97 249 / var(--tw-text-opacity));\n}\n.text-purple-600 {\n  --tw-text-opacity: 1;\n  color: rgb(126 58 242 / var(--tw-text-opacity));\n}\n.text-purple-700 {\n  --tw-text-opacity: 1;\n  color: rgb(108 43 217 / var(--tw-text-opacity));\n}\n.text-purple-800 {\n  --tw-text-opacity: 1;\n  color: rgb(85 33 181 / var(--tw-text-opacity));\n}\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(240 82 82 / var(--tw-text-opacity));\n}\n.text-red-600 {\n  --tw-text-opacity: 1;\n  color: rgb(224 36 36 / var(--tw-text-opacity));\n}\n.text-red-700 {\n  --tw-text-opacity: 1;\n  color: rgb(200 30 30 / var(--tw-text-opacity));\n}\n.text-red-800 {\n  --tw-text-opacity: 1;\n  color: rgb(155 28 28 / var(--tw-text-opacity));\n}\n.text-red-900 {\n  --tw-text-opacity: 1;\n  color: rgb(119 29 29 / var(--tw-text-opacity));\n}\n.text-teal-500 {\n  --tw-text-opacity: 1;\n  color: rgb(6 148 162 / var(--tw-text-opacity));\n}\n.text-teal-600 {\n  --tw-text-opacity: 1;\n  color: rgb(4 116 129 / var(--tw-text-opacity));\n}\n.text-teal-700 {\n  --tw-text-opacity: 1;\n  color: rgb(3 102 114 / var(--tw-text-opacity));\n}\n.text-teal-800 {\n  --tw-text-opacity: 1;\n  color: rgb(5 80 92 / var(--tw-text-opacity));\n}\n.text-teal-900 {\n  --tw-text-opacity: 1;\n  color: rgb(1 68 81 / var(--tw-text-opacity));\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.text-yellow-400 {\n  --tw-text-opacity: 1;\n  color: rgb(227 160 8 / var(--tw-text-opacity));\n}\n.text-yellow-500 {\n  --tw-text-opacity: 1;\n  color: rgb(194 120 3 / var(--tw-text-opacity));\n}\n.text-yellow-700 {\n  --tw-text-opacity: 1;\n  color: rgb(142 75 16 / var(--tw-text-opacity));\n}\n.text-yellow-800 {\n  --tw-text-opacity: 1;\n  color: rgb(114 59 19 / var(--tw-text-opacity));\n}\n.text-yellow-900 {\n  --tw-text-opacity: 1;\n  color: rgb(99 49 18 / var(--tw-text-opacity));\n}\n.underline {\n  text-decoration-line: underline;\n}\n.decoration-dotted {\n  text-decoration-style: dotted;\n}\n.placeholder-cyan-700::-moz-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(14 116 144 / var(--tw-placeholder-opacity));\n}\n.placeholder-cyan-700::placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(14 116 144 / var(--tw-placeholder-opacity));\n}\n.placeholder-green-700::-moz-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(4 108 78 / var(--tw-placeholder-opacity));\n}\n.placeholder-green-700::placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(4 108 78 / var(--tw-placeholder-opacity));\n}\n.placeholder-red-700::-moz-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(200 30 30 / var(--tw-placeholder-opacity));\n}\n.placeholder-red-700::placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(200 30 30 / var(--tw-placeholder-opacity));\n}\n.placeholder-yellow-700::-moz-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(142 75 16 / var(--tw-placeholder-opacity));\n}\n.placeholder-yellow-700::placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(142 75 16 / var(--tw-placeholder-opacity));\n}\n.opacity-0 {\n  opacity: 0;\n}\n.opacity-50 {\n  opacity: 0.5;\n}\n.mix-blend-lighten {\n  mix-blend-mode: lighten;\n}\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.outline {\n  outline-style: solid;\n}\n.ring-2 {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.ring-8 {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(8px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.ring-cyan-400 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(34 211 238 / var(--tw-ring-opacity));\n}\n.ring-cyan-700 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 116 144 / var(--tw-ring-opacity));\n}\n.ring-gray-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(209 213 219 / var(--tw-ring-opacity));\n}\n.ring-gray-500 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(107 114 128 / var(--tw-ring-opacity));\n}\n.ring-gray-800 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(31 41 55 / var(--tw-ring-opacity));\n}\n.ring-green-500 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 159 110 / var(--tw-ring-opacity));\n}\n.ring-pink-500 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(231 70 148 / var(--tw-ring-opacity));\n}\n.ring-purple-500 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(144 97 249 / var(--tw-ring-opacity));\n}\n.ring-red-500 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(240 82 82 / var(--tw-ring-opacity));\n}\n.ring-white {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(255 255 255 / var(--tw-ring-opacity));\n}\n.ring-yellow-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(250 202 21 / var(--tw-ring-opacity));\n}\n.drop-shadow-md {\n  --tw-drop-shadow: drop-shadow(0 4px 3px rgb(0 0 0 / 0.07)) drop-shadow(0 2px 2px rgb(0 0 0 / 0.06));\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.invert {\n  --tw-invert: invert(100%);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.transition {\n  transition-property:\n    color,\n    background-color,\n    border-color,\n    text-decoration-color,\n    fill,\n    stroke,\n    opacity,\n    box-shadow,\n    transform,\n    filter,\n    -webkit-backdrop-filter;\n  transition-property:\n    color,\n    background-color,\n    border-color,\n    text-decoration-color,\n    fill,\n    stroke,\n    opacity,\n    box-shadow,\n    transform,\n    filter,\n    backdrop-filter;\n  transition-property:\n    color,\n    background-color,\n    border-color,\n    text-decoration-color,\n    fill,\n    stroke,\n    opacity,\n    box-shadow,\n    transform,\n    filter,\n    backdrop-filter,\n    -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-\\[color\\,background-color\\,border-color\\,text-decoration-color\\,fill\\,stroke\\,box-shadow\\] {\n  transition-property:\n    color,\n    background-color,\n    border-color,\n    text-decoration-color,\n    fill,\n    stroke,\n    box-shadow;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-\\[max-height\\] {\n  transition-property: max-height;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-all {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-opacity {\n  transition-property: opacity;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-transform {\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.delay-0 {\n  transition-delay: 0s;\n}\n.duration-100 {\n  transition-duration: 100ms;\n}\n.duration-1000 {\n  transition-duration: 1000ms;\n}\n.duration-150 {\n  transition-duration: 150ms;\n}\n.duration-200 {\n  transition-duration: 200ms;\n}\n.duration-300 {\n  transition-duration: 300ms;\n}\n.duration-500 {\n  transition-duration: 500ms;\n}\n.duration-700 {\n  transition-duration: 700ms;\n}\n.duration-75 {\n  transition-duration: 75ms;\n}\n.ease-in {\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n.ease-in-out {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n.ease-out {\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n.\\[overflow-wrap\\:anywhere\\] {\n  overflow-wrap: anywhere;\n}\n.\\[overflow\\:-moz-scrollbars-none\\] {\n  overflow: -moz-scrollbars-none;\n}\n.\\[scrollbar-width\\:none\\] {\n  scrollbar-width: none;\n}\n.\\[writing-mode\\:vertical-rl\\] {\n  writing-mode: vertical-rl;\n}\n.cell-output-ipywidget-background {\n  background: transparent !important;\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n}\n.jupyter-react-widget {\n  margin: 0;\n  padding: 0;\n}\n.\\*\\:mx-auto > * {\n  margin-left: auto;\n  margin-right: auto;\n}\n.\\*\\:flex > * {\n  display: flex;\n}\n.\\*\\:h-full > * {\n  height: 100%;\n}\n.\\*\\:max-h-full > * {\n  max-height: 100%;\n}\n.\\*\\:flex-col > * {\n  flex-direction: column;\n}\n.\\*\\:overflow-hidden > * {\n  overflow: hidden;\n}\n.after\\:absolute::after {\n  content: var(--tw-content);\n  position: absolute;\n}\n.after\\:left-1::after {\n  content: var(--tw-content);\n  left: 0.25rem;\n}\n.after\\:left-\\[2px\\]::after {\n  content: var(--tw-content);\n  left: 2px;\n}\n.after\\:left-\\[4px\\]::after {\n  content: var(--tw-content);\n  left: 4px;\n}\n.after\\:left-px::after {\n  content: var(--tw-content);\n  left: 1px;\n}\n.after\\:top-0::after {\n  content: var(--tw-content);\n  top: 0px;\n}\n.after\\:top-0\\.5::after {\n  content: var(--tw-content);\n  top: 0.125rem;\n}\n.after\\:top-\\[2px\\]::after {\n  content: var(--tw-content);\n  top: 2px;\n}\n.after\\:top-\\[4px\\]::after {\n  content: var(--tw-content);\n  top: 4px;\n}\n.after\\:top-px::after {\n  content: var(--tw-content);\n  top: 1px;\n}\n.after\\:h-4::after {\n  content: var(--tw-content);\n  height: 1rem;\n}\n.after\\:h-5::after {\n  content: var(--tw-content);\n  height: 1.25rem;\n}\n.after\\:h-6::after {\n  content: var(--tw-content);\n  height: 1.5rem;\n}\n.after\\:w-4::after {\n  content: var(--tw-content);\n  width: 1rem;\n}\n.after\\:w-5::after {\n  content: var(--tw-content);\n  width: 1.25rem;\n}\n.after\\:w-6::after {\n  content: var(--tw-content);\n  width: 1.5rem;\n}\n.after\\:translate-x-full::after {\n  content: var(--tw-content);\n  --tw-translate-x: 100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.after\\:rounded-full::after {\n  content: var(--tw-content);\n  border-radius: 9999px;\n}\n.after\\:border::after {\n  content: var(--tw-content);\n  border-width: 1px;\n}\n.after\\:border-gray-300::after {\n  content: var(--tw-content);\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n.after\\:border-white::after {\n  content: var(--tw-content);\n  --tw-border-opacity: 1;\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n.after\\:bg-white::after {\n  content: var(--tw-content);\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.after\\:transition-all::after {\n  content: var(--tw-content);\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.after\\:content-\\[\\'\\'\\]::after {\n  --tw-content: \"\";\n  content: var(--tw-content);\n}\n.first\\:ml-0:first-child {\n  margin-left: 0px;\n}\n.first\\:mt-0:first-child {\n  margin-top: 0px;\n}\n.first\\:rounded-t-lg:first-child {\n  border-top-left-radius: 0.5rem;\n  border-top-right-radius: 0.5rem;\n}\n.first\\:border-t-0:first-child {\n  border-top-width: 0px;\n}\n.first\\:pt-0:first-child {\n  padding-top: 0px;\n}\n.last\\:mr-0:last-child {\n  margin-right: 0px;\n}\n.last\\:rounded-b-lg:last-child {\n  border-bottom-right-radius: 0.5rem;\n  border-bottom-left-radius: 0.5rem;\n}\n.odd\\:bg-white:nth-child(odd) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.even\\:bg-gray-50:nth-child(even) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\n.hover\\:cursor-not-allowed:hover {\n  cursor: not-allowed;\n}\n.hover\\:border-gray-300:hover {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n.hover\\:bg-blue-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(195 221 253 / var(--tw-bg-opacity));\n}\n.hover\\:bg-blue-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 66 159 / var(--tw-bg-opacity));\n}\n.hover\\:bg-cyan-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(207 250 254 / var(--tw-bg-opacity));\n}\n.hover\\:bg-cyan-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(165 243 252 / var(--tw-bg-opacity));\n}\n.hover\\:bg-cyan-600:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(8 145 178 / var(--tw-bg-opacity));\n}\n.hover\\:bg-cyan-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(21 94 117 / var(--tw-bg-opacity));\n}\n.hover\\:bg-gray-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n.hover\\:bg-gray-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n.hover\\:bg-gray-50:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\n.hover\\:bg-gray-600:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.hover\\:bg-green-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(188 240 218 / var(--tw-bg-opacity));\n}\n.hover\\:bg-indigo-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(205 219 254 / var(--tw-bg-opacity));\n}\n.hover\\:bg-lime-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(217 249 157 / var(--tw-bg-opacity));\n}\n.hover\\:bg-pink-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(250 209 232 / var(--tw-bg-opacity));\n}\n.hover\\:bg-purple-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 215 254 / var(--tw-bg-opacity));\n}\n.hover\\:bg-red-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(251 213 213 / var(--tw-bg-opacity));\n}\n.hover\\:bg-teal-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(175 236 239 / var(--tw-bg-opacity));\n}\n.hover\\:bg-white:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.hover\\:bg-yellow-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(252 233 106 / var(--tw-bg-opacity));\n}\n.hover\\:bg-gradient-to-br:hover {\n  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));\n}\n.hover\\:text-cyan-700:hover {\n  --tw-text-opacity: 1;\n  color: rgb(14 116 144 / var(--tw-text-opacity));\n}\n.hover\\:text-gray-500:hover {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n.hover\\:text-gray-600:hover {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n.hover\\:text-gray-700:hover {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n.hover\\:text-gray-900:hover {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n.hover\\:underline:hover {\n  text-decoration-line: underline;\n}\n.focus\\:z-10:focus {\n  z-index: 10;\n}\n.focus\\:border-blue-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(63 131 248 / var(--tw-border-opacity));\n}\n.focus\\:border-blue-600:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(28 100 242 / var(--tw-border-opacity));\n}\n.focus\\:border-cyan-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(6 182 212 / var(--tw-border-opacity));\n}\n.focus\\:border-green-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 159 110 / var(--tw-border-opacity));\n}\n.focus\\:border-green-600:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(5 122 85 / var(--tw-border-opacity));\n}\n.focus\\:border-red-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(240 82 82 / var(--tw-border-opacity));\n}\n.focus\\:border-red-600:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(224 36 36 / var(--tw-border-opacity));\n}\n.focus\\:border-yellow-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(194 120 3 / var(--tw-border-opacity));\n}\n.focus\\:bg-gray-100:focus {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n.focus\\:text-cyan-700:focus {\n  --tw-text-opacity: 1;\n  color: rgb(14 116 144 / var(--tw-text-opacity));\n}\n.focus\\:text-gray-900:focus {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.focus\\:ring-0:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.focus\\:ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.focus\\:ring-4:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.focus\\:ring-blue-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(164 202 254 / var(--tw-ring-opacity));\n}\n.focus\\:ring-blue-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(118 169 250 / var(--tw-ring-opacity));\n}\n.focus\\:ring-blue-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(63 131 248 / var(--tw-ring-opacity));\n}\n.focus\\:ring-blue-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(28 100 242 / var(--tw-ring-opacity));\n}\n.focus\\:ring-cyan-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(103 232 249 / var(--tw-ring-opacity));\n}\n.focus\\:ring-cyan-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(34 211 238 / var(--tw-ring-opacity));\n}\n.focus\\:ring-cyan-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(6 182 212 / var(--tw-ring-opacity));\n}\n.focus\\:ring-cyan-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(8 145 178 / var(--tw-ring-opacity));\n}\n.focus\\:ring-cyan-700:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 116 144 / var(--tw-ring-opacity));\n}\n.focus\\:ring-cyan-800:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(21 94 117 / var(--tw-ring-opacity));\n}\n.focus\\:ring-gray-200:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(229 231 235 / var(--tw-ring-opacity));\n}\n.focus\\:ring-gray-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(209 213 219 / var(--tw-ring-opacity));\n}\n.focus\\:ring-gray-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(156 163 175 / var(--tw-ring-opacity));\n}\n.focus\\:ring-gray-800:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(31 41 55 / var(--tw-ring-opacity));\n}\n.focus\\:ring-gray-900:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(17 24 39 / var(--tw-ring-opacity));\n}\n.focus\\:ring-green-200:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(188 240 218 / var(--tw-ring-opacity));\n}\n.focus\\:ring-green-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(132 225 188 / var(--tw-ring-opacity));\n}\n.focus\\:ring-green-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(49 196 141 / var(--tw-ring-opacity));\n}\n.focus\\:ring-green-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 159 110 / var(--tw-ring-opacity));\n}\n.focus\\:ring-green-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(5 122 85 / var(--tw-ring-opacity));\n}\n.focus\\:ring-green-800:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(3 84 63 / var(--tw-ring-opacity));\n}\n.focus\\:ring-indigo-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(180 198 252 / var(--tw-ring-opacity));\n}\n.focus\\:ring-indigo-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(141 162 251 / var(--tw-ring-opacity));\n}\n.focus\\:ring-indigo-700:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(81 69 205 / var(--tw-ring-opacity));\n}\n.focus\\:ring-lime-200:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(217 249 157 / var(--tw-ring-opacity));\n}\n.focus\\:ring-lime-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(190 242 100 / var(--tw-ring-opacity));\n}\n.focus\\:ring-lime-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(163 230 53 / var(--tw-ring-opacity));\n}\n.focus\\:ring-lime-700:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(77 124 15 / var(--tw-ring-opacity));\n}\n.focus\\:ring-pink-200:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(250 209 232 / var(--tw-ring-opacity));\n}\n.focus\\:ring-pink-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(248 180 217 / var(--tw-ring-opacity));\n}\n.focus\\:ring-pink-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(241 126 184 / var(--tw-ring-opacity));\n}\n.focus\\:ring-pink-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(214 31 105 / var(--tw-ring-opacity));\n}\n.focus\\:ring-primary-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(164 202 254 / var(--tw-ring-opacity));\n}\n.focus\\:ring-purple-200:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(220 215 254 / var(--tw-ring-opacity));\n}\n.focus\\:ring-purple-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(202 191 253 / var(--tw-ring-opacity));\n}\n.focus\\:ring-purple-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(172 148 250 / var(--tw-ring-opacity));\n}\n.focus\\:ring-purple-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(126 58 242 / var(--tw-ring-opacity));\n}\n.focus\\:ring-red-100:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(253 232 232 / var(--tw-ring-opacity));\n}\n.focus\\:ring-red-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(248 180 180 / var(--tw-ring-opacity));\n}\n.focus\\:ring-red-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(249 128 128 / var(--tw-ring-opacity));\n}\n.focus\\:ring-red-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(240 82 82 / var(--tw-ring-opacity));\n}\n.focus\\:ring-red-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(224 36 36 / var(--tw-ring-opacity));\n}\n.focus\\:ring-red-900:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(119 29 29 / var(--tw-ring-opacity));\n}\n.focus\\:ring-teal-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(126 220 226 / var(--tw-ring-opacity));\n}\n.focus\\:ring-teal-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(22 189 202 / var(--tw-ring-opacity));\n}\n.focus\\:ring-teal-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(4 116 129 / var(--tw-ring-opacity));\n}\n.focus\\:ring-yellow-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(250 202 21 / var(--tw-ring-opacity));\n}\n.focus\\:ring-yellow-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(227 160 8 / var(--tw-ring-opacity));\n}\n.focus\\:ring-yellow-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(194 120 3 / var(--tw-ring-opacity));\n}\n.enabled\\:hover\\:bg-blue-700:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(26 86 219 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-blue-800:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 66 159 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-cyan-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(207 250 254 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-cyan-800:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(21 94 117 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-gray-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-gray-900:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-green-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(222 247 236 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-green-800:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(3 84 63 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-indigo-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 237 255 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-lime-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(236 252 203 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-pink-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(252 232 243 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-primary-800:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 66 159 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-purple-800:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(85 33 181 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-red-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 232 232 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-red-700:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(200 30 30 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-red-800:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(155 28 28 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-teal-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(213 245 246 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-yellow-100:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 246 178 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-yellow-500:hover:enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(194 120 3 / var(--tw-bg-opacity));\n}\n.enabled\\:hover\\:bg-gradient-to-bl:hover:enabled {\n  background-image: linear-gradient(to bottom left, var(--tw-gradient-stops));\n}\n.enabled\\:hover\\:bg-gradient-to-br:hover:enabled {\n  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));\n}\n.enabled\\:hover\\:bg-gradient-to-l:hover:enabled {\n  background-image: linear-gradient(to left, var(--tw-gradient-stops));\n}\n.enabled\\:hover\\:from-teal-200:hover:enabled {\n  --tw-gradient-from: #AFECEF var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(175 236 239 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n.enabled\\:hover\\:to-lime-200:hover:enabled {\n  --tw-gradient-to: #d9f99d var(--tw-gradient-to-position);\n}\n.enabled\\:hover\\:text-cyan-700:hover:enabled {\n  --tw-text-opacity: 1;\n  color: rgb(14 116 144 / var(--tw-text-opacity));\n}\n.enabled\\:hover\\:text-gray-700:hover:enabled {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n.enabled\\:hover\\:text-gray-900:hover:enabled {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n.disabled\\:cursor-not-allowed:disabled {\n  cursor: not-allowed;\n}\n.disabled\\:text-gray-400:disabled {\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n.disabled\\:opacity-50:disabled {\n  opacity: 0.5;\n}\n.group:first-child .group-first\\:hidden {\n  display: none;\n}\n.group\\/body:first-child .group\\/row:first-child .group-first\\/body\\:group-first\\/row\\:first\\:rounded-tl-lg:first-child {\n  border-top-left-radius: 0.5rem;\n}\n.group\\/head:first-child .group-first\\/head\\:first\\:rounded-tl-lg:first-child {\n  border-top-left-radius: 0.5rem;\n}\n.group\\/body:first-child .group\\/row:first-child .group-first\\/body\\:group-first\\/row\\:last\\:rounded-tr-lg:last-child {\n  border-top-right-radius: 0.5rem;\n}\n.group\\/head:first-child .group-first\\/head\\:last\\:rounded-tr-lg:last-child {\n  border-top-right-radius: 0.5rem;\n}\n.group\\/body:last-child .group\\/row:last-child .group-last\\/body\\:group-last\\/row\\:first\\:rounded-bl-lg:first-child {\n  border-bottom-left-radius: 0.5rem;\n}\n.group\\/body:last-child .group\\/row:last-child .group-last\\/body\\:group-last\\/row\\:last\\:rounded-br-lg:last-child {\n  border-bottom-right-radius: 0.5rem;\n}\n.group:hover .group-hover\\:bg-blue-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(195 221 253 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-cyan-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(165 243 252 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-gray-300 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(209 213 219 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-gray-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-green-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(188 240 218 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-indigo-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(205 219 254 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-lime-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(217 249 157 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-pink-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(250 209 232 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-purple-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 215 254 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-red-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(251 213 213 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-teal-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(175 236 239 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-white\\/50 {\n  background-color: rgb(255 255 255 / 0.5);\n}\n.group:hover .group-hover\\:bg-yellow-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(252 233 106 / var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-opacity-0 {\n  --tw-bg-opacity: 0;\n}\n.group:hover .group-hover\\:text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n.group:hover .group-hover\\:text-inherit {\n  color: inherit;\n}\n.group:focus .group-focus\\:outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.group:focus .group-focus\\:ring-4 {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.group:focus .group-focus\\:ring-cyan-500\\/25 {\n  --tw-ring-color: rgb(6 182 212 / 0.25);\n}\n.group:focus .group-focus\\:ring-white {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(255 255 255 / var(--tw-ring-opacity));\n}\n.group:enabled:hover .group-enabled\\:group-hover\\:bg-opacity-0 {\n  --tw-bg-opacity: 0;\n}\n.group:enabled:hover .group-enabled\\:group-hover\\:text-inherit {\n  color: inherit;\n}\n.peer:checked ~ .peer-checked\\:bg-blue-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(28 100 242 / var(--tw-bg-opacity));\n}\n.peer:checked ~ .peer-checked\\:bg-cyan-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(8 145 178 / var(--tw-bg-opacity));\n}\n.peer:checked ~ .peer-checked\\:bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.peer:checked ~ .peer-checked\\:bg-green-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(5 122 85 / var(--tw-bg-opacity));\n}\n.peer:checked ~ .peer-checked\\:bg-red-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(224 36 36 / var(--tw-bg-opacity));\n}\n.peer:checked ~ .peer-checked\\:bg-yellow-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(227 160 8 / var(--tw-bg-opacity));\n}\n.peer:checked ~ .peer-checked\\:after\\:translate-x-full::after {\n  content: var(--tw-content);\n  --tw-translate-x: 100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:checked ~ .peer-checked\\:after\\:border-white::after {\n  content: var(--tw-content);\n  --tw-border-opacity: 1;\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n.peer:-moz-placeholder-shown ~ .peer-placeholder-shown\\:top-1\\/2 {\n  top: 50%;\n}\n.peer:placeholder-shown ~ .peer-placeholder-shown\\:top-1\\/2 {\n  top: 50%;\n}\n.peer:-moz-placeholder-shown ~ .peer-placeholder-shown\\:-translate-y-1\\/2 {\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:placeholder-shown ~ .peer-placeholder-shown\\:-translate-y-1\\/2 {\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:-moz-placeholder-shown ~ .peer-placeholder-shown\\:translate-y-0 {\n  --tw-translate-y: 0px;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:placeholder-shown ~ .peer-placeholder-shown\\:translate-y-0 {\n  --tw-translate-y: 0px;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:-moz-placeholder-shown ~ .peer-placeholder-shown\\:scale-100 {\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:placeholder-shown ~ .peer-placeholder-shown\\:scale-100 {\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:focus ~ .peer-focus\\:left-0 {\n  left: 0px;\n}\n.peer:focus ~ .peer-focus\\:top-2 {\n  top: 0.5rem;\n}\n.peer:focus ~ .peer-focus\\:-translate-y-4 {\n  --tw-translate-y: -1rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:focus ~ .peer-focus\\:-translate-y-6 {\n  --tw-translate-y: -1.5rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:focus ~ .peer-focus\\:scale-75 {\n  --tw-scale-x: .75;\n  --tw-scale-y: .75;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.peer:focus ~ .peer-focus\\:px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n.peer:focus ~ .peer-focus\\:text-blue-600 {\n  --tw-text-opacity: 1;\n  color: rgb(28 100 242 / var(--tw-text-opacity));\n}\n.peer:focus ~ .peer-focus\\:outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.peer:focus ~ .peer-focus\\:ring-2 {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.peer:focus ~ .peer-focus\\:ring-blue-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(164 202 254 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .peer-focus\\:ring-cyan-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(103 232 249 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .peer-focus\\:ring-gray-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(209 213 219 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .peer-focus\\:ring-green-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(132 225 188 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .peer-focus\\:ring-red-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(248 180 180 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .peer-focus\\:ring-yellow-300 {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(250 202 21 / var(--tw-ring-opacity));\n}\n.dark\\:block:is(.dark *) {\n  display: block;\n}\n.dark\\:hidden:is(.dark *) {\n  display: none;\n}\n.dark\\:divide-gray-700:is(.dark *) > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgb(55 65 81 / var(--tw-divide-opacity));\n}\n.dark\\:border-none:is(.dark *) {\n  border-style: none;\n}\n.dark\\:border-cyan-400:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(34 211 238 / var(--tw-border-opacity));\n}\n.dark\\:border-cyan-500:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(6 182 212 / var(--tw-border-opacity));\n}\n.dark\\:border-cyan-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(8 145 178 / var(--tw-border-opacity));\n}\n.dark\\:border-gray-500:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(107 114 128 / var(--tw-border-opacity));\n}\n.dark\\:border-gray-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\n.dark\\:border-gray-700:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(55 65 81 / var(--tw-border-opacity));\n}\n.dark\\:border-gray-800:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(31 41 55 / var(--tw-border-opacity));\n}\n.dark\\:border-gray-900:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(17 24 39 / var(--tw-border-opacity));\n}\n.dark\\:border-green-400:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(49 196 141 / var(--tw-border-opacity));\n}\n.dark\\:border-green-500:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 159 110 / var(--tw-border-opacity));\n}\n.dark\\:border-green-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(5 122 85 / var(--tw-border-opacity));\n}\n.dark\\:border-indigo-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(88 80 236 / var(--tw-border-opacity));\n}\n.dark\\:border-lime-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(101 163 13 / var(--tw-border-opacity));\n}\n.dark\\:border-pink-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(214 31 105 / var(--tw-border-opacity));\n}\n.dark\\:border-red-400:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(249 128 128 / var(--tw-border-opacity));\n}\n.dark\\:border-red-500:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(240 82 82 / var(--tw-border-opacity));\n}\n.dark\\:border-red-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(224 36 36 / var(--tw-border-opacity));\n}\n.dark\\:border-teal-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(4 116 129 / var(--tw-border-opacity));\n}\n.dark\\:border-white:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n.dark\\:border-yellow-400:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(227 160 8 / var(--tw-border-opacity));\n}\n.dark\\:border-yellow-600:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(159 88 10 / var(--tw-border-opacity));\n}\n.dark\\:bg-black:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\n.dark\\:bg-blue-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(195 221 253 / var(--tw-bg-opacity));\n}\n.dark\\:bg-blue-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(28 100 242 / var(--tw-bg-opacity));\n}\n.dark\\:bg-blue-900:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(35 56 118 / var(--tw-bg-opacity));\n}\n.dark\\:bg-cyan-100:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(207 250 254 / var(--tw-bg-opacity));\n}\n.dark\\:bg-cyan-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(165 243 252 / var(--tw-bg-opacity));\n}\n.dark\\:bg-cyan-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(8 145 178 / var(--tw-bg-opacity));\n}\n.dark\\:bg-cyan-900:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(22 78 99 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(209 213 219 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-400:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(156 163 175 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-500:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-700:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-800:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-800\\/30:is(.dark *) {\n  background-color: rgb(31 41 55 / 0.3);\n}\n.dark\\:bg-gray-800\\/50:is(.dark *) {\n  background-color: rgb(31 41 55 / 0.5);\n}\n.dark\\:bg-gray-900:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\n.dark\\:bg-gray-900\\/80:is(.dark *) {\n  background-color: rgb(17 24 39 / 0.8);\n}\n.dark\\:bg-green-100:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(222 247 236 / var(--tw-bg-opacity));\n}\n.dark\\:bg-green-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(188 240 218 / var(--tw-bg-opacity));\n}\n.dark\\:bg-green-500:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(14 159 110 / var(--tw-bg-opacity));\n}\n.dark\\:bg-green-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(5 122 85 / var(--tw-bg-opacity));\n}\n.dark\\:bg-green-900:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(1 71 55 / var(--tw-bg-opacity));\n}\n.dark\\:bg-indigo-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(205 219 254 / var(--tw-bg-opacity));\n}\n.dark\\:bg-indigo-500:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(104 117 245 / var(--tw-bg-opacity));\n}\n.dark\\:bg-indigo-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(88 80 236 / var(--tw-bg-opacity));\n}\n.dark\\:bg-lime-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(217 249 157 / var(--tw-bg-opacity));\n}\n.dark\\:bg-lime-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(101 163 13 / var(--tw-bg-opacity));\n}\n.dark\\:bg-pink-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(250 209 232 / var(--tw-bg-opacity));\n}\n.dark\\:bg-pink-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(214 31 105 / var(--tw-bg-opacity));\n}\n.dark\\:bg-primary-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(28 100 242 / var(--tw-bg-opacity));\n}\n.dark\\:bg-purple-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 215 254 / var(--tw-bg-opacity));\n}\n.dark\\:bg-purple-500:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(144 97 249 / var(--tw-bg-opacity));\n}\n.dark\\:bg-purple-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(126 58 242 / var(--tw-bg-opacity));\n}\n.dark\\:bg-purple-900:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(74 29 150 / var(--tw-bg-opacity));\n}\n.dark\\:bg-red-100:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 232 232 / var(--tw-bg-opacity));\n}\n.dark\\:bg-red-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(251 213 213 / var(--tw-bg-opacity));\n}\n.dark\\:bg-red-500:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(240 82 82 / var(--tw-bg-opacity));\n}\n.dark\\:bg-red-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(224 36 36 / var(--tw-bg-opacity));\n}\n.dark\\:bg-red-900:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(119 29 29 / var(--tw-bg-opacity));\n}\n.dark\\:bg-slate-800:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 41 59 / var(--tw-bg-opacity));\n}\n.dark\\:bg-teal-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(175 236 239 / var(--tw-bg-opacity));\n}\n.dark\\:bg-teal-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(4 116 129 / var(--tw-bg-opacity));\n}\n.dark\\:bg-transparent:is(.dark *) {\n  background-color: transparent;\n}\n.dark\\:bg-yellow-100:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 246 178 / var(--tw-bg-opacity));\n}\n.dark\\:bg-yellow-200:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(252 233 106 / var(--tw-bg-opacity));\n}\n.dark\\:bg-yellow-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(159 88 10 / var(--tw-bg-opacity));\n}\n.dark\\:bg-yellow-700:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(142 75 16 / var(--tw-bg-opacity));\n}\n.dark\\:bg-yellow-900:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(99 49 18 / var(--tw-bg-opacity));\n}\n.dark\\:bg-opacity-80:is(.dark *) {\n  --tw-bg-opacity: 0.8;\n}\n.dark\\:fill-gray-300:is(.dark *) {\n  fill: #D1D5DB;\n}\n.dark\\:text-blue-500:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(63 131 248 / var(--tw-text-opacity));\n}\n.dark\\:text-blue-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(28 100 242 / var(--tw-text-opacity));\n}\n.dark\\:text-blue-700:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(26 86 219 / var(--tw-text-opacity));\n}\n.dark\\:text-blue-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(30 66 159 / var(--tw-text-opacity));\n}\n.dark\\:text-blue-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(35 56 118 / var(--tw-text-opacity));\n}\n.dark\\:text-cyan-100:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(207 250 254 / var(--tw-text-opacity));\n}\n.dark\\:text-cyan-300:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(103 232 249 / var(--tw-text-opacity));\n}\n.dark\\:text-cyan-500:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(6 182 212 / var(--tw-text-opacity));\n}\n.dark\\:text-cyan-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(8 145 178 / var(--tw-text-opacity));\n}\n.dark\\:text-cyan-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(21 94 117 / var(--tw-text-opacity));\n}\n.dark\\:text-cyan-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(22 78 99 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-100:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(243 244 246 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-200:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(229 231 235 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-300:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-400:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-500:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\n.dark\\:text-gray-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n.dark\\:text-green-400:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(49 196 141 / var(--tw-text-opacity));\n}\n.dark\\:text-green-500:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(14 159 110 / var(--tw-text-opacity));\n}\n.dark\\:text-green-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(5 122 85 / var(--tw-text-opacity));\n}\n.dark\\:text-green-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(3 84 63 / var(--tw-text-opacity));\n}\n.dark\\:text-green-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(1 71 55 / var(--tw-text-opacity));\n}\n.dark\\:text-indigo-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(88 80 236 / var(--tw-text-opacity));\n}\n.dark\\:text-indigo-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(66 56 157 / var(--tw-text-opacity));\n}\n.dark\\:text-indigo-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(54 47 120 / var(--tw-text-opacity));\n}\n.dark\\:text-lime-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(101 163 13 / var(--tw-text-opacity));\n}\n.dark\\:text-lime-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(63 98 18 / var(--tw-text-opacity));\n}\n.dark\\:text-lime-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(54 83 20 / var(--tw-text-opacity));\n}\n.dark\\:text-orange-700:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(180 52 3 / var(--tw-text-opacity));\n}\n.dark\\:text-pink-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(214 31 105 / var(--tw-text-opacity));\n}\n.dark\\:text-pink-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(153 21 75 / var(--tw-text-opacity));\n}\n.dark\\:text-pink-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(117 26 61 / var(--tw-text-opacity));\n}\n.dark\\:text-primary-400:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(118 169 250 / var(--tw-text-opacity));\n}\n.dark\\:text-purple-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(126 58 242 / var(--tw-text-opacity));\n}\n.dark\\:text-purple-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(85 33 181 / var(--tw-text-opacity));\n}\n.dark\\:text-purple-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(74 29 150 / var(--tw-text-opacity));\n}\n.dark\\:text-red-400:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(249 128 128 / var(--tw-text-opacity));\n}\n.dark\\:text-red-500:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(240 82 82 / var(--tw-text-opacity));\n}\n.dark\\:text-red-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(224 36 36 / var(--tw-text-opacity));\n}\n.dark\\:text-red-700:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(200 30 30 / var(--tw-text-opacity));\n}\n.dark\\:text-red-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(155 28 28 / var(--tw-text-opacity));\n}\n.dark\\:text-red-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(119 29 29 / var(--tw-text-opacity));\n}\n.dark\\:text-teal-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(4 116 129 / var(--tw-text-opacity));\n}\n.dark\\:text-teal-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(5 80 92 / var(--tw-text-opacity));\n}\n.dark\\:text-teal-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(1 68 81 / var(--tw-text-opacity));\n}\n.dark\\:text-white:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.dark\\:text-yellow-600:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(159 88 10 / var(--tw-text-opacity));\n}\n.dark\\:text-yellow-800:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(114 59 19 / var(--tw-text-opacity));\n}\n.dark\\:text-yellow-900:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(99 49 18 / var(--tw-text-opacity));\n}\n.dark\\:placeholder-gray-400:is(.dark *)::-moz-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-placeholder-opacity));\n}\n.dark\\:placeholder-gray-400:is(.dark *)::placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-placeholder-opacity));\n}\n.dark\\:mix-blend-color:is(.dark *) {\n  mix-blend-mode: color;\n}\n.dark\\:shadow-sm-light:is(.dark *) {\n  --tw-shadow: 0 2px 5px 0px rgba(255, 255, 255, 0.08);\n  --tw-shadow-colored: 0 2px 5px 0px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.dark\\:ring-cyan-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(21 94 117 / var(--tw-ring-opacity));\n}\n.dark\\:ring-gray-400:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(156 163 175 / var(--tw-ring-opacity));\n}\n.dark\\:ring-gray-500:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(107 114 128 / var(--tw-ring-opacity));\n}\n.dark\\:ring-gray-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(31 41 55 / var(--tw-ring-opacity));\n}\n.dark\\:ring-gray-900:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(17 24 39 / var(--tw-ring-opacity));\n}\n.dark\\:ring-green-500:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 159 110 / var(--tw-ring-opacity));\n}\n.dark\\:ring-pink-500:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(231 70 148 / var(--tw-ring-opacity));\n}\n.dark\\:ring-purple-600:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(126 58 242 / var(--tw-ring-opacity));\n}\n.dark\\:ring-red-700:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(200 30 30 / var(--tw-ring-opacity));\n}\n.dark\\:ring-yellow-500:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(194 120 3 / var(--tw-ring-opacity));\n}\n.dark\\:ring-offset-blue-700:is(.dark *) {\n  --tw-ring-offset-color: #1A56DB;\n}\n.dark\\:ring-offset-cyan-600:is(.dark *) {\n  --tw-ring-offset-color: #0891b2;\n}\n.dark\\:ring-offset-gray-800:is(.dark *) {\n  --tw-ring-offset-color: #1F2937;\n}\n.dark\\:ring-offset-gray-900:is(.dark *) {\n  --tw-ring-offset-color: #111827;\n}\n.dark\\:ring-offset-green-600:is(.dark *) {\n  --tw-ring-offset-color: #057A55;\n}\n.dark\\:ring-offset-green-800:is(.dark *) {\n  --tw-ring-offset-color: #03543F;\n}\n.dark\\:ring-offset-indigo-700:is(.dark *) {\n  --tw-ring-offset-color: #5145CD;\n}\n.dark\\:ring-offset-lime-700:is(.dark *) {\n  --tw-ring-offset-color: #4d7c0f;\n}\n.dark\\:ring-offset-pink-600:is(.dark *) {\n  --tw-ring-offset-color: #D61F69;\n}\n.dark\\:ring-offset-purple-600:is(.dark *) {\n  --tw-ring-offset-color: #7E3AF2;\n}\n.dark\\:ring-offset-red-600:is(.dark *) {\n  --tw-ring-offset-color: #E02424;\n}\n.dark\\:ring-offset-red-900:is(.dark *) {\n  --tw-ring-offset-color: #771D1D;\n}\n.dark\\:ring-offset-teal-600:is(.dark *) {\n  --tw-ring-offset-color: #047481;\n}\n.dark\\:ring-offset-yellow-400:is(.dark *) {\n  --tw-ring-offset-color: #E3A008;\n}\n.dark\\:\\[color-scheme\\:dark\\]:is(.dark *) {\n  color-scheme: dark;\n}\n.odd\\:dark\\:bg-gray-800:is(.dark *):nth-child(odd) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n.even\\:dark\\:bg-gray-700:is(.dark *):nth-child(even) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-blue-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(164 202 254 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-blue-700:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(26 86 219 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-cyan-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(103 232 249 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-cyan-700:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(14 116 144 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-gray-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(209 213 219 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-gray-600:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-gray-700:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-gray-800:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-green-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(132 225 188 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-indigo-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(180 198 252 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-lime-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(190 242 100 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-pink-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 180 217 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-purple-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(202 191 253 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-red-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 180 180 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-teal-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(126 220 226 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:bg-yellow-300:hover:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(250 202 21 / var(--tw-bg-opacity));\n}\n.dark\\:hover\\:text-gray-300:hover:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\n.dark\\:hover\\:text-white:hover:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.dark\\:focus\\:border-blue-500:focus:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(63 131 248 / var(--tw-border-opacity));\n}\n.dark\\:focus\\:border-cyan-500:focus:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(6 182 212 / var(--tw-border-opacity));\n}\n.dark\\:focus\\:border-green-500:focus:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 159 110 / var(--tw-border-opacity));\n}\n.dark\\:focus\\:border-red-500:focus:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(240 82 82 / var(--tw-border-opacity));\n}\n.dark\\:focus\\:border-yellow-500:focus:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(194 120 3 / var(--tw-border-opacity));\n}\n.dark\\:focus\\:bg-cyan-600:focus:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(8 145 178 / var(--tw-bg-opacity));\n}\n.dark\\:focus\\:bg-gray-600:focus:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.dark\\:focus\\:text-white:focus:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.dark\\:focus\\:ring-blue-500:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(63 131 248 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-blue-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(28 100 242 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-blue-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(26 86 219 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-blue-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(30 66 159 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-cyan-500:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(6 182 212 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-cyan-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(8 145 178 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-cyan-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 116 144 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-cyan-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(21 94 117 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-gray-500:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(107 114 128 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-gray-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(75 85 99 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-gray-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(55 65 81 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-gray-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(31 41 55 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-gray-900:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(17 24 39 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-green-500:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 159 110 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-green-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(5 122 85 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-green-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(4 108 78 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-green-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(3 84 63 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-indigo-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(81 69 205 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-lime-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(77 124 15 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-lime-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(63 98 18 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-pink-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(214 31 105 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-pink-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(191 18 93 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-pink-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(153 21 75 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-primary-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(30 66 159 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-purple-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(126 58 242 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-purple-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(85 33 181 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-purple-900:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(74 29 150 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-red-400:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(249 128 128 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-red-500:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(240 82 82 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-red-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(224 36 36 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-red-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(200 30 30 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-red-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(155 28 28 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-red-900:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(119 29 29 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-teal-600:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(4 116 129 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-teal-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(3 102 114 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-teal-800:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(5 80 92 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-yellow-400:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(227 160 8 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-yellow-500:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(194 120 3 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-yellow-700:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(142 75 16 / var(--tw-ring-opacity));\n}\n.dark\\:focus\\:ring-yellow-900:focus:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(99 49 18 / var(--tw-ring-opacity));\n}\n.dark\\:enabled\\:hover\\:border-cyan-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 116 144 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-gray-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(55 65 81 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-green-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(4 108 78 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-indigo-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(81 69 205 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-lime-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(77 124 15 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-pink-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(191 18 93 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-red-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(200 30 30 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-teal-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(3 102 114 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:border-yellow-700:hover:enabled:is(.dark *) {\n  --tw-border-opacity: 1;\n  border-color: rgb(142 75 16 / var(--tw-border-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-blue-800:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 66 159 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-cyan-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(14 116 144 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-gray-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-green-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(4 108 78 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-indigo-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(81 69 205 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-lime-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(77 124 15 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-pink-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(191 18 93 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-primary-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(26 86 219 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-purple-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(108 43 217 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-red-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(200 30 30 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-red-800:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(155 28 28 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-teal-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(3 102 114 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-yellow-600:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(159 88 10 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:bg-yellow-700:hover:enabled:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(142 75 16 / var(--tw-bg-opacity));\n}\n.enabled\\:dark\\:hover\\:bg-gray-700:hover:is(.dark *):enabled {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n.dark\\:enabled\\:hover\\:text-white:hover:enabled:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.enabled\\:dark\\:hover\\:text-white:hover:is(.dark *):enabled {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.disabled\\:dark\\:text-gray-500:is(.dark *):disabled {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-blue-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(164 202 254 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-cyan-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(103 232 249 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-gray-500:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-gray-600:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-gray-700:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-gray-800\\/60:is(.dark *) {\n  background-color: rgb(31 41 55 / 0.6);\n}\n.group:hover .dark\\:group-hover\\:bg-green-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(132 225 188 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-indigo-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(180 198 252 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-lime-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(190 242 100 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-pink-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 180 217 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-purple-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(202 191 253 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-red-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 180 180 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-teal-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(126 220 226 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:bg-yellow-300:is(.dark *) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(250 202 21 / var(--tw-bg-opacity));\n}\n.group:hover .dark\\:group-hover\\:text-white:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.group:focus .dark\\:group-focus\\:ring-gray-800\\/70:is(.dark *) {\n  --tw-ring-color: rgb(31 41 55 / 0.7);\n}\n.peer:focus ~ .peer-focus\\:dark\\:text-blue-500:is(.dark *) {\n  --tw-text-opacity: 1;\n  color: rgb(63 131 248 / var(--tw-text-opacity));\n}\n.peer:focus ~ .dark\\:peer-focus\\:ring-blue-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(30 66 159 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .dark\\:peer-focus\\:ring-cyan-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(21 94 117 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .dark\\:peer-focus\\:ring-gray-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(31 41 55 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .dark\\:peer-focus\\:ring-green-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(3 84 63 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .dark\\:peer-focus\\:ring-red-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(155 28 28 / var(--tw-ring-opacity));\n}\n.peer:focus ~ .dark\\:peer-focus\\:ring-yellow-800:is(.dark *) {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(114 59 19 / var(--tw-ring-opacity));\n}\n@media (min-width: 640px) {\n  .sm\\:mx-auto {\n    margin-left: auto;\n    margin-right: auto;\n  }\n  .sm\\:mb-0 {\n    margin-bottom: 0px;\n  }\n  .sm\\:flex {\n    display: flex;\n  }\n  .sm\\:h-10 {\n    height: 2.5rem;\n  }\n  .sm\\:h-12 {\n    height: 3rem;\n  }\n  .sm\\:h-6 {\n    height: 1.5rem;\n  }\n  .sm\\:h-7 {\n    height: 1.75rem;\n  }\n  .sm\\:w-10 {\n    width: 2.5rem;\n  }\n  .sm\\:w-6 {\n    width: 1.5rem;\n  }\n  .sm\\:w-auto {\n    width: auto;\n  }\n  .sm\\:gap-2 {\n    gap: 0.5rem;\n  }\n  .sm\\:px-4 {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n  .sm\\:pr-8 {\n    padding-right: 2rem;\n  }\n  .sm\\:text-center {\n    text-align: center;\n  }\n  .sm\\:text-base {\n    font-size: 1rem;\n    line-height: 1.5rem;\n  }\n  .sm\\:text-xs {\n    font-size: 0.75rem;\n    line-height: 1rem;\n  }\n}\n@media (min-width: 768px) {\n  .md\\:inset-0 {\n    inset: 0px;\n  }\n  .md\\:mx-2 {\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n  }\n  .md\\:my-10 {\n    margin-top: 2.5rem;\n    margin-bottom: 2.5rem;\n  }\n  .md\\:my-12 {\n    margin-top: 3rem;\n    margin-bottom: 3rem;\n  }\n  .md\\:mr-6 {\n    margin-right: 1.5rem;\n  }\n  .md\\:mt-0 {\n    margin-top: 0px;\n  }\n  .md\\:block {\n    display: block;\n  }\n  .md\\:flex {\n    display: flex;\n  }\n  .md\\:hidden {\n    display: none;\n  }\n  .md\\:h-\\[33vh\\] {\n    height: 33vh;\n  }\n  .md\\:h-auto {\n    height: auto;\n  }\n  .md\\:h-full {\n    height: 100%;\n  }\n  .md\\:w-48 {\n    width: 12rem;\n  }\n  .md\\:w-auto {\n    width: auto;\n  }\n  .md\\:max-w-xl {\n    max-width: 36rem;\n  }\n  .md\\:flex-row {\n    flex-direction: row;\n  }\n  .md\\:items-center {\n    align-items: center;\n  }\n  .md\\:justify-between {\n    justify-content: space-between;\n  }\n  .md\\:gap-4 {\n    gap: 1rem;\n  }\n  .md\\:gap-6 {\n    gap: 1.5rem;\n  }\n  .md\\:space-x-8 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 0;\n    margin-right: calc(2rem * var(--tw-space-x-reverse));\n    margin-left: calc(2rem * calc(1 - var(--tw-space-x-reverse)));\n  }\n  .md\\:rounded-none {\n    border-radius: 0px;\n  }\n  .md\\:rounded-l-lg {\n    border-top-left-radius: 0.5rem;\n    border-bottom-left-radius: 0.5rem;\n  }\n  .md\\:border-0 {\n    border-width: 0px;\n  }\n  .md\\:bg-transparent {\n    background-color: transparent;\n  }\n  .md\\:p-0 {\n    padding: 0px;\n  }\n  .md\\:text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n  .md\\:font-medium {\n    font-weight: 500;\n  }\n  .md\\:text-cyan-700 {\n    --tw-text-opacity: 1;\n    color: rgb(14 116 144 / var(--tw-text-opacity));\n  }\n  .md\\:hover\\:bg-transparent:hover {\n    background-color: transparent;\n  }\n  .md\\:hover\\:text-cyan-700:hover {\n    --tw-text-opacity: 1;\n    color: rgb(14 116 144 / var(--tw-text-opacity));\n  }\n  .md\\:dark\\:hover\\:bg-transparent:hover:is(.dark *) {\n    background-color: transparent;\n  }\n  .md\\:dark\\:hover\\:text-white:hover:is(.dark *) {\n    --tw-text-opacity: 1;\n    color: rgb(255 255 255 / var(--tw-text-opacity));\n  }\n}\n@media (min-width: 1024px) {\n  .lg\\:my-8 {\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n  }\n  .lg\\:gap-8 {\n    gap: 2rem;\n  }\n}\n@media (min-width: 1280px) {\n  .xl\\:h-\\[50vh\\] {\n    height: 50vh;\n  }\n  .xl\\:gap-16 {\n    gap: 4rem;\n  }\n}\n.rtl\\:after\\:right-1:where([dir=rtl], [dir=rtl] *)::after {\n  content: var(--tw-content);\n  right: 0.25rem;\n}\n.rtl\\:after\\:right-px:where([dir=rtl], [dir=rtl] *)::after {\n  content: var(--tw-content);\n  right: 1px;\n}\n.rtl\\:after\\:-translate-x-full:where([dir=rtl], [dir=rtl] *)::after {\n  content: var(--tw-content);\n  --tw-translate-x: -100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n@media print {\n  .print\\:hidden {\n    display: none;\n  }\n  .dark\\:print\\:border-gray-200:is(.dark *) {\n    --tw-border-opacity: 1;\n    border-color: rgb(229 231 235 / var(--tw-border-opacity));\n  }\n}\n.\\[\\&\\:\\:-webkit-scrollbar\\]\\:\\!hidden::-webkit-scrollbar {\n  display: none !important;\n}\n.\\[\\&\\:\\:-webkit-scrollbar\\]\\:\\!h-0::-webkit-scrollbar {\n  height: 0px !important;\n}\n.\\[\\&\\:\\:-webkit-scrollbar\\]\\:\\!w-0::-webkit-scrollbar {\n  width: 0px !important;\n}\n.\\[\\&\\:\\:-webkit-scrollbar\\]\\:\\!bg-transparent::-webkit-scrollbar {\n  background-color: transparent !important;\n}\n.\\[\\&\\>\\*\\]\\:pointer-events-none > * {\n  pointer-events: none;\n}\n.\\[\\&\\>\\*\\]\\:cursor-grab > * {\n  cursor: grab;\n}\n.\\[\\&\\>\\*\\]\\:first\\:rounded-t-lg:first-child > * {\n  border-top-left-radius: 0.5rem;\n  border-top-right-radius: 0.5rem;\n}\n.\\[\\&\\>\\*\\]\\:last\\:rounded-b-lg:last-child > * {\n  border-bottom-right-radius: 0.5rem;\n  border-bottom-left-radius: 0.5rem;\n}\n.\\[\\&\\>\\*\\]\\:last\\:border-b-0:last-child > * {\n  border-bottom-width: 0px;\n}\n.\\[\\&_\\*\\]\\:cursor-pointer * {\n  cursor: pointer;\n}\n.\\[\\&_div\\:nth-child\\(1\\)_label\\]\\:w-40 div:nth-child(1) label {\n  width: 10rem;\n}\n\n/* temp_stylePlugin:node_modules/@howso/react-tailwind-flowbite-components/lib/styles.css */\n.LineClamp-module_root__szmwa {\n  -webkit-box-orient: vertical;\n  display: -webkit-box;\n}\n.FieldBase-module_labelInline__SLGo5 {\n  display: grid;\n  grid-template-areas: \"label field\" \". extras\";\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto auto;\n}\n.FieldBase-module_labelInline__SLGo5 .labelContainer {\n  align-items: flex-start;\n  grid-area: label;\n  justify-content: flex-end;\n  margin-top: .65rem;\n}\n.FieldBase-module_labelInline__SLGo5 .fieldContainer {\n  grid-area: field;\n}\n.FieldBase-module_labelInline__SLGo5 .extrasContainer {\n  grid-area: extras;\n}\n.FieldBase-module_labelInline__SLGo5.sizing-sm .labelContainer {\n  margin-top: .5rem;\n}\n.FieldBase-module_labelInline__SLGo5.sizing-lg .labelContainer {\n  margin-top: 1rem;\n}\n\n/* temp_stylePlugin:node_modules/@fontsource/inter/500.css */\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 500;\n  src: url(data:font/woff2;base64,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) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0460-052F,\n    U+1C80-1C88,\n    U+20B4,\n    U+2DE0-2DFF,\n    U+A640-A69F,\n    U+FE2E-FE2F;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 500;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0301,\n    U+0400-045F,\n    U+0490-0491,\n    U+04B0-04B1,\n    U+2116;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 500;\n  src: url(data:font/woff2;base64,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) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range: U+1F00-1FFF;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 500;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0370-0377,\n    U+037A-037F,\n    U+0384-038A,\n    U+038C,\n    U+038E-03A1,\n    U+03A3-03FF;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 500;\n  src: url(data:font/woff2;base64,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) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0102-0103,\n    U+0110-0111,\n    U+0128-0129,\n    U+0168-0169,\n    U+01A0-01A1,\n    U+01AF-01B0,\n    U+0300-0301,\n    U+0303-0304,\n    U+0308-0309,\n    U+0323,\n    U+0329,\n    U+1EA0-1EF9,\n    U+20AB;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 500;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,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) format(\"woff\");\n  unicode-range:\n    U+0100-02AF,\n    U+0304,\n    U+0308,\n    U+0329,\n    U+1E00-1E9F,\n    U+1EF2-1EFF,\n    U+2020,\n    U+20A0-20AB,\n    U+20AD-20C0,\n    U+2113,\n    U+2C60-2C7F,\n    U+A720-A7FF;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 500;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0000-00FF,\n    U+0131,\n    U+0152-0153,\n    U+02BB-02BC,\n    U+02C6,\n    U+02DA,\n    U+02DC,\n    U+0304,\n    U+0308,\n    U+0329,\n    U+2000-206F,\n    U+2074,\n    U+20AC,\n    U+2122,\n    U+2191,\n    U+2193,\n    U+2212,\n    U+2215,\n    U+FEFF,\n    U+FFFD;\n}\n\n/* temp_stylePlugin:node_modules/@fontsource/inter/700.css */\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,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) format(\"woff\");\n  unicode-range:\n    U+0460-052F,\n    U+1C80-1C88,\n    U+20B4,\n    U+2DE0-2DFF,\n    U+A640-A69F,\n    U+FE2E-FE2F;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0301,\n    U+0400-045F,\n    U+0490-0491,\n    U+04B0-04B1,\n    U+2116;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(data:font/woff2;base64,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) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range: U+1F00-1FFF;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0370-0377,\n    U+037A-037F,\n    U+0384-038A,\n    U+038C,\n    U+038E-03A1,\n    U+03A3-03FF;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(data:font/woff2;base64,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) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0102-0103,\n    U+0110-0111,\n    U+0128-0129,\n    U+0168-0169,\n    U+01A0-01A1,\n    U+01AF-01B0,\n    U+0300-0301,\n    U+0303-0304,\n    U+0308-0309,\n    U+0323,\n    U+0329,\n    U+1EA0-1EF9,\n    U+20AB;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0100-02AF,\n    U+0304,\n    U+0308,\n    U+0329,\n    U+1E00-1E9F,\n    U+1EF2-1EFF,\n    U+2020,\n    U+20A0-20AB,\n    U+20AD-20C0,\n    U+2113,\n    U+2C60-2C7F,\n    U+A720-A7FF;\n}\n@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(data:font/woff2;base64,) format(\"woff2\"), url(data:font/woff;base64,) format(\"woff\");\n  unicode-range:\n    U+0000-00FF,\n    U+0131,\n    U+0152-0153,\n    U+02BB-02BC,\n    U+02C6,\n    U+02DA,\n    U+02DC,\n    U+0304,\n    U+0308,\n    U+0329,\n    U+2000-206F,\n    U+2074,\n    U+20AC,\n    U+2122,\n    U+2191,\n    U+2193,\n    U+2212,\n    U+2215,\n    U+FEFF,\n    U+FFFD;\n}\n"))