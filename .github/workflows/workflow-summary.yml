name: Reusable WF - Output Workflow Summary

on:
  workflow_call:
    inputs:
      payload:
        type: string
        required: true

defaults:
  run:
    shell: bash

jobs:

  get-amalgam-lang-py-details:
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "amalgam-lang-py"
      payload: "${{ inputs.payload }}"
      skip-version-json-check: true

  get-howso-engine-py-details:
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "howso-engine-py"
      payload: "${{ inputs.payload }}"
      skip-version-json-check: true

  output-summary:
    needs: ["get-amalgam-lang-py-details", "get-howso-engine-py-details"]
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Download amalgam-lang-py
        if: needs.get-amalgam-lang-py-details.outputs.run-type != ''
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
        run: |
          gh ${{ needs.get-amalgam-lang-py-details.outputs.run-type }} download -D amlg -R "howsoai/amalgam-lang-py" -p "amalgam_lang-*-py3-none-any" "${{ needs.get-amalgam-lang-py-details.outputs.run-id }}"
          # Needed because release/non-release downloads are different structure
          cd amlg && if [ ! -f *.whl ]; then mv */*.whl ./; fi

      - name: Download howso-engine-py
        if: needs.get-howso-engine-py-details.outputs.run-type != ''
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
        run: |
          gh ${{ needs.get-howso-engine-py-details.outputs.run-type }} download -D hse -R "howsoai/howso-engine-py" -p "howso_engine-*-py3-none-any" "${{ needs.get-howso-engine-py-details.outputs.run-id }}"
          # Needed because release/non-release downloads are different structure
          cd hse && if [ ! -f *.whl ]; then mv */*.whl ./; fi

      - name: Generate workflow summary
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_TOKEN }}
        run: |
          # Install requirements
          export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          pip install -r requirements.in --user
          # Reinstall howso-engine/amalgam-lang to get latest versions (TODO: fix this)
          site_packages=$(python -m site --user-site)
          pip uninstall howso-engine amalgam-lang -y
          pip install amalgam-lang --platform none --no-deps --target $site_packages
          pip install howso-engine --user
          # If any prerelease versions are specified in the payload, manually install those
          if [ -d "hse" ]; then
            echo "Found custom howso-engine version; installing..."
            pip uninstall howso-engine -y
            pip install hse/*.whl --user
          fi
          if [ -d "amlg" ]; then
            echo "Found custom amalgam-lang version; installing..."
            pip uninstall amalgam-lang -y
            pip install amlg/*.whl --user
          fi

          # Determine site-packages location (to retrieve version.json)
          site_packages=$(python -m site --user-site)

          # Get amalgam metadata from version.json
          amlg_version=$(jq -r '.version.amalgam' $site_packages/amalgam/lib/version.json)
          amlg_sha=$(jq -r '.version."amalgam_sha"' $site_packages/amalgam/lib/version.json)
          amlg_url=$(jq -r '.version."amalgam_url"' $site_packages/amalgam/lib/version.json)
          if [[ $(cat $site_packages/amalgam/lib/version.json | jq '.version | has("amalgam_build_date")') == true ]]; then
            # Version is a prerelease (workflow run)
            build_date=$(jq -r '.version."amalgam_build_date"' $site_packages/amalgam/lib/version.json)
            build_date=$(python -c "from datetime import datetime; print(datetime.strptime('$build_date', '%Y-%m-%dT%H:%M:%SZ').strftime('%A, %B %d, %I:%M %p'))")
            amlg_notes=$(jq -r '.version."amalgam_display_title"' $site_packages/amalgam/lib/version.json)
            amlg_notes=$(python -c "notes = '$amlg_notes'.split(' -')[0] if 'PR Build' in '$amlg_notes' else '$amlg_notes'; print(notes)")
            amlg_version=$(echo "$amlg_version ($build_date)")
          else
            # Version is a release
            amlg_notes=$(echo "Release version embedded in the installed \`amalgam-lang-py\`")
          fi
          # Substitute info into version_summary.md
          sed -i "s|{amalgam-version}|$amlg_version|g" ./.github/templates/version_summary.md
          sed -i "s|{amalgam-notes}|$amlg_notes|g" ./.github/templates/version_summary.md
          sed -i "s|{amalgam-sha}|$amlg_sha|g" ./.github/templates/version_summary.md
          sed -i "s|{amalgam-url}|$amlg_url|g" ./.github/templates/version_summary.md

          # Get howso-engine metadata from version.json
          hse_version=$(jq -r '."version"' $site_packages/howso/howso-engine/version.json)
          hse_sha=$(jq -r '."sha"' $site_packages/howso/howso-engine/version.json)
          hse_url=$(jq -r '."url"' $site_packages/howso/howso-engine/version.json)
          if [[ $(cat $site_packages/howso/howso-engine/version.json | jq '. | has("build_date")') == true ]]; then
            # Version is a prerelease (workflow run)
            build_date=$(jq -r '."build_date"' $site_packages/howso/howso-engine/version.json)
            build_date=$(python -c "from datetime import datetime; print(datetime.strptime('$build_date', '%Y-%m-%dT%H:%M:%SZ').strftime('%A, %B %d, %I:%M %p'))")
            hse_notes=$(jq -r '."display_title"' $site_packages/howso/howso-engine/version.json)
            hse_notes=$(python -c "notes = '$hse_notes'.split(' -')[0] if 'PR Build' in '$hse_notes' else '$hse_notes'; print(notes)")
            hse_version=$(echo "$hse_version ($build_date)")
          else
            # Version is a release
            hse_notes=$(echo "Release version embedded in the installed \`howso-engine-py\`")
          fi
          # Substitute info into version_summary.md
          sed -i "s|{howso-engine-version}|$hse_version|g" ./.github/templates/version_summary.md
          sed -i "s|{howso-engine-notes}|$hse_notes|g" ./.github/templates/version_summary.md
          sed -i "s|{howso-engine-sha}|$hse_sha|g" ./.github/templates/version_summary.md
          sed -i "s|{howso-engine-url}|$hse_url|g" ./.github/templates/version_summary.md

          # Get Howso Python package metadata from workflow run or release install
          declare -a arr=("amalgam-lang-py" "howso-engine-py")
          for repo in "${arr[@]}"; do
            pkg_version=$(python -c "import importlib.metadata; print(importlib.metadata.version('${repo%-py}'))")
            
            # Get run_id and run_type for the current package
            if [[ "$repo" == "amalgam-lang-py" ]]; then
              run_id=${{ needs.get-amalgam-lang-py-details.outputs.run-id }}
              run_type=${{ needs.get-amalgam-lang-py-details.outputs.run-type }}
            elif [[ "$repo" == "howso-engine-py" ]]; then
              run_id=${{ needs.get-howso-engine-py-details.outputs.run-id }}
              run_type=${{ needs.get-howso-engine-py-details.outputs.run-type }}
            fi
            
            if [[ "$run_type" == "run" ]]; then
              build_date=$(gh run view --repo howsoai/$repo $run_id --json createdAt | jq '.createdAt')
              build_date=$(python -c "from datetime import datetime; print(datetime.strptime($build_date, '%Y-%m-%dT%H:%M:%SZ').strftime('%A, %B %d, %I:%M %p'))")
              branch=$(gh run view --repo howsoai/$repo $run_id --json headBranch | jq '.headBranch')
              pkg_notes=$(echo "Branch build of \`$branch\`")
              pkg_version=$(echo "$pkg_version ($build_date)")
              pkg_sha=$(gh run view --repo howsoai/$repo $run_id --json headSha | jq '.headSha')
              pkg_url=$(gh run view --repo howsoai/$repo $run_id --json url | jq '.url')
            else
              pkg_notes=$(echo "Release version specified in Python requirements")
              pkg_sha=$(gh release view --repo howsoai/$repo $run_id --json targetCommitish | jq '.targetCommitish')
              pkg_url=$(gh release view --repo howsoai/$repo $run_id --json url | jq '.url')
            fi
            sed -i "s|{$repo-version}|$pkg_version|g" ./.github/templates/version_summary.md
            sed -i "s|{$repo-notes}|$pkg_notes|g" ./.github/templates/version_summary.md
            sed -i "s|{$repo-sha}|$pkg_sha|g" ./.github/templates/version_summary.md
            sed -i "s|{$repo-url}|$pkg_url|g" ./.github/templates/version_summary.md
          done

          # Remove unecessary quotations from variable substitutions
          sed -i "s|\"||g" ./.github/templates/version_summary.md
          # Output filled template file to workflow summary
          cat ./.github/templates/version_summary.md >> $GITHUB_STEP_SUMMARY